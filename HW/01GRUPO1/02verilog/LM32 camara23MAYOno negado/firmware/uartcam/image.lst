
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a3c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000098  00000a3c  00000a3c  00000a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000ad4  00000ad4  00000b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000aec  00000aec  00000b40  2**2
                  ALLOC
  4 .debug_frame  000003bc  00000000  00000000  00000b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e15  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b7  00000000  00000000  00002d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000005f1  00000000  00000000  000036c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000c0  00000000  00000000  00003cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00003d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000a15  00000000  00000000  00003da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006e6  00000000  00000000  000047b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 33 	calli e0 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_scall_handler>:
  c0:	34 00 00 00 	nop
  c4:	34 00 00 00 	nop
  c8:	34 00 00 00 	nop
  cc:	34 00 00 00 	nop
  d0:	34 00 00 00 	nop
  d4:	34 00 00 00 	nop
  d8:	34 00 00 00 	nop
  dc:	34 00 00 00 	nop

000000e0 <_crt0>:
  e0:	78 1c 00 00 	mvhi sp,0x0
  e4:	3b 9c 0f fc 	ori sp,sp,0xffc
  e8:	78 1a 00 00 	mvhi gp,0x0
  ec:	3b 5a 0a f0 	ori gp,gp,0xaf0
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 0a ec 	ori r1,r1,0xaec
  f8:	78 03 00 00 	mvhi r3,0x0
  fc:	38 63 0b 70 	ori r3,r3,0xb70

00000100 <.clearBSS>:
 100:	44 23 00 04 	be r1,r3,110 <.callMain>
 104:	58 20 00 00 	sw (r1+0),r0
 108:	34 21 00 04 	addi r1,r1,4
 10c:	e3 ff ff fd 	bi 100 <.clearBSS>

00000110 <.callMain>:
 110:	34 01 00 00 	mvi r1,0
 114:	34 02 00 00 	mvi r2,0
 118:	34 03 00 00 	mvi r3,0
 11c:	f8 00 00 33 	calli 1e8 <main>

00000120 <irq_enable>:
 120:	34 01 00 01 	mvi r1,1
 124:	d0 01 00 00 	wcsr IE,r1
 128:	c3 a0 00 00 	ret

0000012c <irq_disable>:
 12c:	34 01 00 00 	mvi r1,0
 130:	d0 01 00 00 	wcsr IE,r1
 134:	c3 a0 00 00 	ret

00000138 <irq_set_mask>:
 138:	d0 21 00 00 	wcsr IM,r1
 13c:	c3 a0 00 00 	ret

00000140 <irq_get_mask>:
 140:	90 20 08 00 	rcsr r1,IM
 144:	c3 a0 00 00 	ret

00000148 <jump>:
 148:	c0 20 00 00 	b r1

0000014c <halt>:
 14c:	e0 00 00 00 	bi 14c <halt>

00000150 <_save_all>:
 150:	37 9c ff 80 	addi sp,sp,-128
 154:	5b 81 00 04 	sw (sp+4),r1
 158:	5b 82 00 08 	sw (sp+8),r2
 15c:	5b 83 00 0c 	sw (sp+12),r3
 160:	5b 84 00 10 	sw (sp+16),r4
 164:	5b 85 00 14 	sw (sp+20),r5
 168:	5b 86 00 18 	sw (sp+24),r6
 16c:	5b 87 00 1c 	sw (sp+28),r7
 170:	5b 88 00 20 	sw (sp+32),r8
 174:	5b 89 00 24 	sw (sp+36),r9
 178:	5b 8a 00 28 	sw (sp+40),r10
 17c:	5b 9e 00 78 	sw (sp+120),ea
 180:	5b 9f 00 7c 	sw (sp+124),ba
 184:	2b 81 00 80 	lw r1,(sp+128)
 188:	5b 81 00 74 	sw (sp+116),r1
 18c:	bb 80 08 00 	mv r1,sp
 190:	34 21 00 80 	addi r1,r1,128
 194:	5b 81 00 70 	sw (sp+112),r1
 198:	c3 a0 00 00 	ret

0000019c <_restore_all_and_eret>:
 19c:	2b 81 00 04 	lw r1,(sp+4)
 1a0:	2b 82 00 08 	lw r2,(sp+8)
 1a4:	2b 83 00 0c 	lw r3,(sp+12)
 1a8:	2b 84 00 10 	lw r4,(sp+16)
 1ac:	2b 85 00 14 	lw r5,(sp+20)
 1b0:	2b 86 00 18 	lw r6,(sp+24)
 1b4:	2b 87 00 1c 	lw r7,(sp+28)
 1b8:	2b 88 00 20 	lw r8,(sp+32)
 1bc:	2b 89 00 24 	lw r9,(sp+36)
 1c0:	2b 8a 00 28 	lw r10,(sp+40)
 1c4:	2b 9d 00 74 	lw ra,(sp+116)
 1c8:	2b 9e 00 78 	lw ea,(sp+120)
 1cc:	2b 9f 00 7c 	lw ba,(sp+124)
 1d0:	2b 9c 00 70 	lw sp,(sp+112)
 1d4:	c3 c0 00 00 	eret

000001d8 <get_sp>:
 1d8:	bb 80 08 00 	mv r1,sp
 1dc:	c3 a0 00 00 	ret

000001e0 <get_gp>:
 1e0:	bb 40 08 00 	mv r1,gp
 1e4:	c3 a0 00 00 	ret

000001e8 <main>:
#include "uart.h"
#include "camera.h"


int main()
{	
 1e8:	37 9c ff cc 	addi sp,sp,-52
 1ec:	5b 8b 00 14 	sw (sp+20),r11
 1f0:	5b 8c 00 10 	sw (sp+16),r12
 1f4:	5b 8d 00 0c 	sw (sp+12),r13
 1f8:	5b 8e 00 08 	sw (sp+8),r14
 1fc:	5b 9d 00 04 	sw (sp+4),ra
   while(1)
   {
	
		com=comando.uart_getchar();	
		comando.uart_putchar(com);
		if(com==0xC0)
 200:	34 0c 00 c0 	mvi r12,192
			comando.uart_putchar(0xC0);//TOMAR
			camara.cam_tomar(off);
			tiempo.nsleep(30000);
			camara.cam_tomar(on);		
		}
		if(com==0XC1)//VER-ENVIAR
 204:	34 0d 00 c1 	mvi r13,193
				}
			camara.cam_ver1(off);//OE		
			comando.uart_putchar(0XFE);
			camara.cam_ver(off);//RCK				
		}
		if(com==0xC2)//RESET
 208:	34 0e 00 c2 	mvi r14,194
		com=comando.uart_getchar();	
 20c:	37 81 00 1c 	addi r1,sp,28
 210:	f8 00 01 b8 	calli 8f0 <_ZN4uart12uart_getcharEv>
 214:	b8 20 58 00 	mv r11,r1
		comando.uart_putchar(com);
 218:	b8 20 10 00 	mv r2,r1
 21c:	37 81 00 1c 	addi r1,sp,28
 220:	f8 00 01 be 	calli 918 <_ZN4uart12uart_putcharEc>
		if(com==0xC0)
 224:	45 6c 00 18 	be r11,r12,284 <main+0x9c>
		if(com==0XC1)//VER-ENVIAR
 228:	45 6d 00 24 	be r11,r13,2b8 <main+0xd0>
		if(com==0xC2)//RESET
 22c:	5d 6e ff f8 	bne r11,r14,20c <main+0x24>
		{
			comando.uart_putchar(0xc2);
 230:	37 81 00 1c 	addi r1,sp,28
 234:	34 02 00 c2 	mvi r2,194
 238:	f8 00 01 b8 	calli 918 <_ZN4uart12uart_putcharEc>
			camara.cam_rst(on,on);
 23c:	34 03 00 01 	mvi r3,1
 240:	37 81 00 24 	addi r1,sp,36
 244:	34 02 00 01 	mvi r2,1
 248:	f8 00 01 f1 	calli a0c <_ZN6camera7cam_rstEii>
			tiempo.nsleep(3000);
 24c:	37 81 00 18 	addi r1,sp,24
 250:	34 02 0b b8 	mvi r2,3000
 254:	f8 00 01 99 	calli 8b8 <_ZN5timer6nsleepEi>
			camara.cam_rst(off,off);		
 258:	34 02 00 00 	mvi r2,0
 25c:	34 03 00 00 	mvi r3,0
 260:	37 81 00 24 	addi r1,sp,36
 264:	f8 00 01 ea 	calli a0c <_ZN6camera7cam_rstEii>
		com=comando.uart_getchar();	
 268:	37 81 00 1c 	addi r1,sp,28
 26c:	f8 00 01 a1 	calli 8f0 <_ZN4uart12uart_getcharEv>
 270:	b8 20 58 00 	mv r11,r1
		comando.uart_putchar(com);
 274:	b8 20 10 00 	mv r2,r1
 278:	37 81 00 1c 	addi r1,sp,28
 27c:	f8 00 01 a7 	calli 918 <_ZN4uart12uart_putcharEc>
		if(com==0xC0)
 280:	5d 6c ff ea 	bne r11,r12,228 <main+0x40>
			comando.uart_putchar(0xC0);//TOMAR
 284:	37 81 00 1c 	addi r1,sp,28
 288:	34 02 00 c0 	mvi r2,192
 28c:	f8 00 01 a3 	calli 918 <_ZN4uart12uart_putcharEc>
			camara.cam_tomar(off);
 290:	37 81 00 24 	addi r1,sp,36
 294:	34 02 00 00 	mvi r2,0
 298:	f8 00 01 c1 	calli 99c <_ZN6camera9cam_tomarEi>
			tiempo.nsleep(30000);
 29c:	37 81 00 18 	addi r1,sp,24
 2a0:	34 02 75 30 	mvi r2,30000
 2a4:	f8 00 01 85 	calli 8b8 <_ZN5timer6nsleepEi>
			camara.cam_tomar(on);		
 2a8:	34 02 00 01 	mvi r2,1
 2ac:	37 81 00 24 	addi r1,sp,36
 2b0:	f8 00 01 bb 	calli 99c <_ZN6camera9cam_tomarEi>
 2b4:	e3 ff ff d6 	bi 20c <main+0x24>
			camara.cam_ver1(on);//OE		
 2b8:	34 02 00 01 	mvi r2,1
 2bc:	37 81 00 24 	addi r1,sp,36
 2c0:	f8 00 01 c5 	calli 9d4 <_ZN6camera8cam_ver1Ei>
			comando.uart_putchar(0XC1);
 2c4:	34 02 00 c1 	mvi r2,193
 2c8:	37 81 00 1c 	addi r1,sp,28
 2cc:	f8 00 01 93 	calli 918 <_ZN4uart12uart_putcharEc>
			camara.cam_ver(on);//RCK
 2d0:	34 02 00 01 	mvi r2,1
 2d4:	37 81 00 24 	addi r1,sp,36
 2d8:	f8 00 01 b8 	calli 9b8 <_ZN6camera7cam_verEi>
 2dc:	38 0b e2 80 	mvu r11,0xe280
 2e0:	79 6b 00 04 	orhi r11,r11,0x4
					dato=camara.cam_dato();
 2e4:	37 81 00 24 	addi r1,sp,36
 2e8:	f8 00 01 c2 	calli 9f0 <_ZN6camera8cam_datoEv>
					comando.uart_putchar(dato);
 2ec:	b8 20 10 00 	mv r2,r1
 2f0:	35 6b ff ff 	addi r11,r11,-1
 2f4:	37 81 00 1c 	addi r1,sp,28
 2f8:	f8 00 01 88 	calli 918 <_ZN4uart12uart_putcharEc>
				while(i<320128)
 2fc:	5d 60 ff fa 	bne r11,r0,2e4 <main+0xfc>
			camara.cam_ver1(off);//OE		
 300:	37 81 00 24 	addi r1,sp,36
 304:	34 02 00 00 	mvi r2,0
 308:	f8 00 01 b3 	calli 9d4 <_ZN6camera8cam_ver1Ei>
			comando.uart_putchar(0XFE);
 30c:	37 81 00 1c 	addi r1,sp,28
 310:	34 02 00 fe 	mvi r2,254
 314:	f8 00 01 81 	calli 918 <_ZN4uart12uart_putcharEc>
			camara.cam_ver(off);//RCK				
 318:	34 02 00 00 	mvi r2,0
 31c:	37 81 00 24 	addi r1,sp,36
 320:	f8 00 01 a6 	calli 9b8 <_ZN6camera7cam_verEi>
 324:	e3 ff ff ba 	bi 20c <main+0x24>

00000328 <_Z7tic_isrv>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 328:	78 01 00 00 	mvhi r1,0x0
 32c:	38 21 0a 3c 	ori r1,r1,0xa3c
 330:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 334:	78 04 00 00 	mvhi r4,0x0
 338:	38 84 0a 40 	ori r4,r4,0xa40
 33c:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 340:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 344:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 348:	34 21 00 01 	addi r1,r1,1
 34c:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 350:	34 01 00 0e 	mvi r1,14
 354:	58 61 00 00 	sw (r3+0),r1
}
 358:	c3 a0 00 00 	ret

0000035c <_Z8isr_nullv>:
 35c:	c3 a0 00 00 	ret

00000360 <_Z8cam_readv>:
	return cam -> d_out;
 360:	78 02 00 00 	mvhi r2,0x0
 364:	38 42 0a 44 	ori r2,r2,0xa44
 368:	28 41 00 00 	lw r1,(r2+0)
 36c:	28 21 00 00 	lw r1,(r1+0)
 370:	28 21 00 00 	lw r1,(r1+0)
}
 374:	c3 a0 00 00 	ret

00000378 <_Z15cam_takepictureh>:
cam -> takepicture  = vtakepicture;
 378:	78 03 00 00 	mvhi r3,0x0
 37c:	38 63 0a 48 	ori r3,r3,0xa48
 380:	28 62 00 00 	lw r2,(r3+0)
void cam_takepicture (uint8_t vtakepicture ){
 384:	20 21 00 ff 	andi r1,r1,0xff
cam -> takepicture  = vtakepicture;
 388:	28 42 00 00 	lw r2,(r2+0)
 38c:	30 41 00 04 	sb (r2+4),r1
}
 390:	c3 a0 00 00 	ret

00000394 <_Z8cam_leerj>:
cam -> leer = vleer;
 394:	78 03 00 00 	mvhi r3,0x0
 398:	38 63 0a 4c 	ori r3,r3,0xa4c
 39c:	28 62 00 00 	lw r2,(r3+0)
 3a0:	28 42 00 00 	lw r2,(r2+0)
 3a4:	58 41 00 08 	sw (r2+8),r1
}
 3a8:	c3 a0 00 00 	ret

000003ac <_Z11cam_resetwrh>:
cam -> resetwr   = vresetwr;
 3ac:	78 03 00 00 	mvhi r3,0x0
 3b0:	38 63 0a 50 	ori r3,r3,0xa50
 3b4:	28 62 00 00 	lw r2,(r3+0)
void cam_resetwr  (uint8_t vresetwr){
 3b8:	20 21 00 ff 	andi r1,r1,0xff
cam -> resetwr   = vresetwr;
 3bc:	28 42 00 00 	lw r2,(r2+0)
 3c0:	30 41 00 0c 	sb (r2+12),r1
}
 3c4:	c3 a0 00 00 	ret

000003c8 <_Z11cam_resetrdj>:
cam -> resetrd = vresetrd;
 3c8:	78 03 00 00 	mvhi r3,0x0
 3cc:	38 63 0a 54 	ori r3,r3,0xa54
 3d0:	28 62 00 00 	lw r2,(r3+0)
 3d4:	28 42 00 00 	lw r2,(r2+0)
 3d8:	58 41 00 10 	sw (r2+16),r1
}
 3dc:	c3 a0 00 00 	ret

000003e0 <_Z9cam_leer1h>:
cam -> leer1=vleer1;
 3e0:	78 03 00 00 	mvhi r3,0x0
 3e4:	38 63 0a 58 	ori r3,r3,0xa58
 3e8:	28 62 00 00 	lw r2,(r3+0)
void cam_leer1(uint8_t vleer1){
 3ec:	20 21 00 ff 	andi r1,r1,0xff
cam -> leer1=vleer1;
 3f0:	28 42 00 00 	lw r2,(r2+0)
 3f4:	30 41 00 14 	sb (r2+20),r1
}
 3f8:	c3 a0 00 00 	ret

000003fc <_Z8pwm_readv>:
	return pwm -> d_out;
 3fc:	78 02 00 00 	mvhi r2,0x0
 400:	38 42 0a 5c 	ori r2,r2,0xa5c
 404:	28 41 00 00 	lw r1,(r2+0)
 408:	28 21 00 00 	lw r1,(r1+0)
 40c:	28 21 00 00 	lw r1,(r1+0)
}
 410:	c3 a0 00 00 	ret

00000414 <_Z6pwm_rdh>:
pwm -> rd = vrd;
 414:	78 03 00 00 	mvhi r3,0x0
 418:	38 63 0a 60 	ori r3,r3,0xa60
 41c:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 420:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 424:	28 42 00 00 	lw r2,(r2+0)
 428:	30 41 00 04 	sb (r2+4),r1
}
 42c:	c3 a0 00 00 	ret

00000430 <_Z8pwm_addrj>:
pwm -> addr = vaddr;
 430:	78 03 00 00 	mvhi r3,0x0
 434:	38 63 0a 64 	ori r3,r3,0xa64
 438:	28 62 00 00 	lw r2,(r3+0)
 43c:	28 42 00 00 	lw r2,(r2+0)
 440:	58 41 00 08 	sw (r2+8),r1
}
 444:	c3 a0 00 00 	ret

00000448 <_Z6pwm_wrh>:
pwm -> wr = vwr;
 448:	78 03 00 00 	mvhi r3,0x0
 44c:	38 63 0a 68 	ori r3,r3,0xa68
 450:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 454:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 458:	28 42 00 00 	lw r2,(r2+0)
 45c:	30 41 00 0c 	sb (r2+12),r1
}
 460:	c3 a0 00 00 	ret

00000464 <_Z7pwm_dinj>:
pwm -> d_in = vd_in;
 464:	78 03 00 00 	mvhi r3,0x0
 468:	38 63 0a 6c 	ori r3,r3,0xa6c
 46c:	28 62 00 00 	lw r2,(r3+0)
 470:	28 42 00 00 	lw r2,(r2+0)
 474:	58 41 00 10 	sw (r2+16),r1
}
 478:	c3 a0 00 00 	ret

0000047c <_Z15gpio_config_dirj>:
	gpio0 -> dir = vdir;
 47c:	78 03 00 00 	mvhi r3,0x0
 480:	38 63 0a 70 	ori r3,r3,0xa70
 484:	28 62 00 00 	lw r2,(r3+0)
 488:	28 42 00 00 	lw r2,(r2+0)
 48c:	58 41 00 08 	sw (r2+8),r1
}
 490:	c3 a0 00 00 	ret

00000494 <_Z10gpio_writej>:
	gpio0 -> wr = vpins;
 494:	78 03 00 00 	mvhi r3,0x0
 498:	38 63 0a 74 	ori r3,r3,0xa74
 49c:	28 62 00 00 	lw r2,(r3+0)
 4a0:	28 42 00 00 	lw r2,(r2+0)
 4a4:	58 41 00 04 	sw (r2+4),r1
}
 4a8:	c3 a0 00 00 	ret

000004ac <_Z9gpio_readv>:
	return gpio0 -> rd;
 4ac:	78 02 00 00 	mvhi r2,0x0
 4b0:	38 42 0a 78 	ori r2,r2,0xa78
 4b4:	28 41 00 00 	lw r1,(r2+0)
 4b8:	28 21 00 00 	lw r1,(r1+0)
 4bc:	28 21 00 00 	lw r1,(r1+0)
}
 4c0:	c3 a0 00 00 	ret

000004c4 <_Z11irq_handlerj>:
{
 4c4:	37 9c ff f0 	addi sp,sp,-16
 4c8:	5b 8b 00 10 	sw (sp+16),r11
 4cc:	5b 8c 00 0c 	sw (sp+12),r12
 4d0:	5b 8d 00 08 	sw (sp+8),r13
 4d4:	5b 9d 00 04 	sw (sp+4),ra
 4d8:	78 02 00 00 	mvhi r2,0x0
 4dc:	38 42 0a 7c 	ori r2,r2,0xa7c
 4e0:	28 4b 00 00 	lw r11,(r2+0)
 4e4:	b8 20 60 00 	mv r12,r1
 4e8:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 4ec:	21 81 00 01 	andi r1,r12,0x1
 4f0:	44 20 00 03 	be r1,r0,4fc <_Z11irq_handlerj+0x38>
 4f4:	29 61 00 00 	lw r1,(r11+0)
 4f8:	d8 20 00 00 	call r1
 4fc:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 500:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 504:	5d ab ff fa 	bne r13,r11,4ec <_Z11irq_handlerj+0x28>
}
 508:	2b 9d 00 04 	lw ra,(sp+4)
 50c:	2b 8b 00 10 	lw r11,(sp+16)
 510:	2b 8c 00 0c 	lw r12,(sp+12)
 514:	2b 8d 00 08 	lw r13,(sp+8)
 518:	37 9c 00 10 	addi sp,sp,16
 51c:	c3 a0 00 00 	ret

00000520 <_Z8isr_initv>:
{
 520:	78 02 00 00 	mvhi r2,0x0
 524:	38 42 0a 80 	ori r2,r2,0xa80
 528:	28 41 00 00 	lw r1,(r2+0)
 52c:	78 02 00 00 	mvhi r2,0x0
 530:	38 42 0a 84 	ori r2,r2,0xa84
 534:	28 43 00 00 	lw r3,(r2+0)
 538:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 53c:	58 23 00 00 	sw (r1+0),r3
 540:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 544:	5c 22 ff fe 	bne r1,r2,53c <_Z8isr_initv+0x1c>
}
 548:	c3 a0 00 00 	ret

0000054c <_Z12isr_registeriPFvvE>:
	isr_table[irq] = isr;
 54c:	78 04 00 00 	mvhi r4,0x0
 550:	38 84 0a 88 	ori r4,r4,0xa88
 554:	3c 23 00 02 	sli r3,r1,2
 558:	28 81 00 00 	lw r1,(r4+0)
 55c:	b4 23 08 00 	add r1,r1,r3
 560:	58 22 00 00 	sw (r1+0),r2
}
 564:	c3 a0 00 00 	ret

00000568 <_Z14isr_unregisteri>:
	isr_table[irq] = &isr_null;
 568:	78 03 00 00 	mvhi r3,0x0
 56c:	38 63 0a 8c 	ori r3,r3,0xa8c
 570:	3c 22 00 02 	sli r2,r1,2
 574:	28 61 00 00 	lw r1,(r3+0)
 578:	78 03 00 00 	mvhi r3,0x0
 57c:	38 63 0a 90 	ori r3,r3,0xa90
 580:	b4 22 08 00 	add r1,r1,r2
 584:	28 62 00 00 	lw r2,(r3+0)
 588:	58 22 00 00 	sw (r1+0),r2
}
 58c:	c3 a0 00 00 	ret

00000590 <_Z6msleepj>:
	timer0->compare1 = (FCPU/1000)*msec;
 590:	78 03 00 00 	mvhi r3,0x0
 594:	38 02 c3 50 	mvu r2,0xc350
 598:	38 63 0a 94 	ori r3,r3,0xa94
 59c:	88 22 08 00 	mul r1,r1,r2
 5a0:	28 62 00 00 	lw r2,(r3+0)
 5a4:	28 42 00 00 	lw r2,(r2+0)
 5a8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 5ac:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 5b0:	34 01 00 08 	mvi r1,8
 5b4:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 5b8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 5bc:	20 21 00 01 	andi r1,r1,0x1
 5c0:	44 20 ff fe 	be r1,r0,5b8 <_Z6msleepj+0x28>
}
 5c4:	c3 a0 00 00 	ret

000005c8 <_Z6nsleepj>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 5c8:	78 03 00 00 	mvhi r3,0x0
 5cc:	38 63 0a 98 	ori r3,r3,0xa98
 5d0:	28 62 00 00 	lw r2,(r3+0)
 5d4:	08 21 00 32 	muli r1,r1,50
 5d8:	28 42 00 00 	lw r2,(r2+0)
 5dc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 5e0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 5e4:	34 01 00 08 	mvi r1,8
 5e8:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 5ec:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 5f0:	20 21 00 01 	andi r1,r1,0x1
 5f4:	44 20 ff fe 	be r1,r0,5ec <_Z6nsleepj+0x24>
}
 5f8:	c3 a0 00 00 	ret

000005fc <_Z8tic_initv>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 5fc:	78 02 00 00 	mvhi r2,0x0
 600:	38 42 0a 9c 	ori r2,r2,0xa9c
 604:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 608:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 60c:	34 02 13 88 	mvi r2,5000
 610:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 614:	38 63 0a a0 	ori r3,r3,0xaa0
	timer0->compare0 = (FCPU/10000);
 618:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 61c:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 620:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 624:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 628:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 62c:	34 02 00 0e 	mvi r2,14
 630:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 634:	78 02 00 00 	mvhi r2,0x0
 638:	38 42 0a a4 	ori r2,r2,0xaa4
 63c:	38 63 0a a8 	ori r3,r3,0xaa8
 640:	28 41 00 00 	lw r1,(r2+0)
 644:	28 62 00 00 	lw r2,(r3+0)
 648:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 64c:	c3 a0 00 00 	ret

00000650 <_Z9uart_initv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 650:	c3 a0 00 00 	ret

00000654 <_Z12uart_getcharv>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 654:	78 02 00 00 	mvhi r2,0x0
 658:	38 42 0a ac 	ori r2,r2,0xaac
 65c:	28 41 00 00 	lw r1,(r2+0)
 660:	28 22 00 00 	lw r2,(r1+0)
 664:	28 41 00 00 	lw r1,(r2+0)
 668:	20 21 00 01 	andi r1,r1,0x1
 66c:	44 20 ff fe 	be r1,r0,664 <_Z12uart_getcharv+0x10>
	return uart0->rxtx;
 670:	28 41 00 04 	lw r1,(r2+4)
}
 674:	20 21 00 ff 	andi r1,r1,0xff
 678:	c3 a0 00 00 	ret

0000067c <_Z12uart_putcharc>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 67c:	78 03 00 00 	mvhi r3,0x0
 680:	38 63 0a b0 	ori r3,r3,0xab0
 684:	28 62 00 00 	lw r2,(r3+0)
{
 688:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 68c:	28 43 00 00 	lw r3,(r2+0)
 690:	28 62 00 00 	lw r2,(r3+0)
 694:	20 42 00 10 	andi r2,r2,0x10
 698:	5c 40 ff fe 	bne r2,r0,690 <_Z12uart_putcharc+0x14>
	uart0->rxtx = c;
 69c:	58 61 00 04 	sw (r3+4),r1
}
 6a0:	c3 a0 00 00 	ret

000006a4 <_Z11uart_putstrPc>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6a4:	40 24 00 00 	lbu r4,(r1+0)
 6a8:	44 80 00 0c 	be r4,r0,6d8 <_Z11uart_putstrPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 6ac:	78 03 00 00 	mvhi r3,0x0
 6b0:	38 63 0a b4 	ori r3,r3,0xab4
 6b4:	28 62 00 00 	lw r2,(r3+0)
 6b8:	28 43 00 00 	lw r3,(r2+0)
 6bc:	28 62 00 00 	lw r2,(r3+0)
 6c0:	20 42 00 10 	andi r2,r2,0x10
 6c4:	5c 40 ff fe 	bne r2,r0,6bc <_Z11uart_putstrPc+0x18>
	uart0->rxtx = c;
 6c8:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 6cc:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 6d0:	40 24 00 00 	lbu r4,(r1+0)
 6d4:	5c 80 ff fa 	bne r4,r0,6bc <_Z11uart_putstrPc+0x18>
	}
}
 6d8:	c3 a0 00 00 	ret

000006dc <_Z8i2c_initv>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 6dc:	78 02 00 00 	mvhi r2,0x0
 6e0:	38 42 0a b8 	ori r2,r2,0xab8
 6e4:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 6e8:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 6ec:	28 21 00 00 	lw r1,(r1+0)
 6f0:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 6f4:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 6f8:	34 02 ff 80 	mvi r2,-128
 6fc:	30 22 00 02 	sb (r1+2),r2


}
 700:	c3 a0 00 00 	ret

00000704 <_Z9i2c_writeccc>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 704:	78 05 00 00 	mvhi r5,0x0
 708:	38 a5 0a bc 	ori r5,r5,0xabc
 70c:	28 a4 00 00 	lw r4,(r5+0)
 710:	3c 21 00 02 	sli r1,r1,2
{
 714:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 718:	28 84 00 00 	lw r4,(r4+0)
 71c:	20 21 00 fc 	andi r1,r1,0xfc
{
 720:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 724:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 728:	34 01 ff 90 	mvi r1,-112
 72c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 730:	40 81 00 04 	lbu r1,(r4+4)
 734:	20 21 00 02 	andi r1,r1,0x2
 738:	5c 20 ff fe 	bne r1,r0,730 <_Z9i2c_writeccc+0x2c>
   i2c0->TxRx=addrReg;
 73c:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 740:	34 01 00 10 	mvi r1,16
 744:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 748:	40 81 00 04 	lbu r1,(r4+4)
 74c:	20 21 00 02 	andi r1,r1,0x2
 750:	5c 20 ff fe 	bne r1,r0,748 <_Z9i2c_writeccc+0x44>
   
   i2c0->TxRx=dat;
 754:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 758:	34 01 00 10 	mvi r1,16
 75c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 760:	40 81 00 04 	lbu r1,(r4+4)
 764:	20 21 00 02 	andi r1,r1,0x2
 768:	5c 20 ff fe 	bne r1,r0,760 <_Z9i2c_writeccc+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 76c:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 770:	34 01 00 50 	mvi r1,80
 774:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 778:	40 81 00 04 	lbu r1,(r4+4)
 77c:	20 21 00 02 	andi r1,r1,0x2
 780:	5c 20 ff fe 	bne r1,r0,778 <_Z9i2c_writeccc+0x74>
//7

}
 784:	c3 a0 00 00 	ret

00000788 <_ZN3pwm7pwm_selEicb>:
#include "pwm.h"
#include "soc-hw.h"

void pwm::pwm_sel(int b, char c, bool en){
 788:	37 9c ff e8 	addi sp,sp,-24
 78c:	5b 8b 00 18 	sw (sp+24),r11
 790:	5b 8c 00 14 	sw (sp+20),r12
 794:	5b 8d 00 10 	sw (sp+16),r13
 798:	5b 8e 00 0c 	sw (sp+12),r14
 79c:	5b 8f 00 08 	sw (sp+8),r15
 7a0:	5b 9d 00 04 	sw (sp+4),ra
uint8_t Rd=0;
uint8_t Wr=1;
uint32_t dint=1000000;
uint32_t dind;

uint32_t e=b*12;
 7a4:	08 4b 00 0c 	muli r11,r2,12
void pwm::pwm_sel(int b, char c, bool en){
 7a8:	20 63 00 ff 	andi r3,r3,0xff


if(c==0x11){
dind=0x36*1000;
}
if(c==0x12){
 7ac:	34 01 00 12 	mvi r1,18
void pwm::pwm_sel(int b, char c, bool en){
 7b0:	20 8f 00 ff 	andi r15,r4,0xff
uint32_t d=e+8;
 7b4:	35 6d 00 08 	addi r13,r11,8
uint32_t t=e+4;
 7b8:	35 6e 00 04 	addi r14,r11,4
if(c==0x12){
 7bc:	44 61 00 26 	be r3,r1,854 <_ZN3pwm7pwm_selEicb+0xcc>
dind=0x83*1000;
}
if(c==0x10){
 7c0:	34 01 00 10 	mvi r1,16
dind=0xda*1000;
 7c4:	38 0c 53 90 	mvu r12,0x5390
 7c8:	79 8c 00 03 	orhi r12,r12,0x3
if(c==0x10){
 7cc:	5c 61 00 1a 	bne r3,r1,834 <_ZN3pwm7pwm_selEicb+0xac>
e=e+48;
d=e+8;
t=e+4;
}

pwm_wr(Wr); pwm_rd(Rd);
 7d0:	34 01 00 01 	mvi r1,1
 7d4:	fb ff ff 1d 	calli 448 <_Z6pwm_wrh>
 7d8:	34 01 00 00 	mvi r1,0
 7dc:	fb ff ff 0e 	calli 414 <_Z6pwm_rdh>
pwm_addr(t); pwm_din(dint);
 7e0:	b9 c0 08 00 	mv r1,r14
 7e4:	fb ff ff 13 	calli 430 <_Z8pwm_addrj>
 7e8:	38 01 42 40 	mvu r1,0x4240
 7ec:	78 21 00 0f 	orhi r1,r1,0xf
 7f0:	fb ff ff 1d 	calli 464 <_Z7pwm_dinj>

pwm_addr(d); pwm_din(dind);
 7f4:	b9 a0 08 00 	mv r1,r13
 7f8:	fb ff ff 0e 	calli 430 <_Z8pwm_addrj>
 7fc:	b9 80 08 00 	mv r1,r12
 800:	fb ff ff 19 	calli 464 <_Z7pwm_dinj>

pwm_addr(e); pwm_din(en);
 804:	b9 60 08 00 	mv r1,r11
 808:	fb ff ff 0a 	calli 430 <_Z8pwm_addrj>
 80c:	b9 e0 08 00 	mv r1,r15
 810:	fb ff ff 15 	calli 464 <_Z7pwm_dinj>


};
 814:	2b 9d 00 04 	lw ra,(sp+4)
 818:	2b 8b 00 18 	lw r11,(sp+24)
 81c:	2b 8c 00 14 	lw r12,(sp+20)
 820:	2b 8d 00 10 	lw r13,(sp+16)
 824:	2b 8e 00 0c 	lw r14,(sp+12)
 828:	2b 8f 00 08 	lw r15,(sp+8)
 82c:	37 9c 00 18 	addi sp,sp,24
 830:	c3 a0 00 00 	ret
if(c==0x13){
 834:	34 01 00 13 	mvi r1,19
 838:	5c 61 00 0a 	bne r3,r1,860 <_ZN3pwm7pwm_selEicb+0xd8>
d=e+8;
 83c:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 840:	35 6e 00 34 	addi r14,r11,52
dind=180000;
 844:	38 0c bf 20 	mvu r12,0xbf20
 848:	79 8c 00 02 	orhi r12,r12,0x2
e=e+48;
 84c:	35 6b 00 30 	addi r11,r11,48
 850:	e3 ff ff e0 	bi 7d0 <_ZN3pwm7pwm_selEicb+0x48>
dind=0x83*1000;
 854:	38 0c ff b8 	mvu r12,0xffb8
 858:	79 8c 00 01 	orhi r12,r12,0x1
 85c:	e3 ff ff dd 	bi 7d0 <_ZN3pwm7pwm_selEicb+0x48>
if(c==0x14){
 860:	34 01 00 14 	mvi r1,20
 864:	38 0c d2 f0 	mvu r12,0xd2f0
 868:	5c 61 ff da 	bne r3,r1,7d0 <_ZN3pwm7pwm_selEicb+0x48>
d=e+8;
 86c:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 870:	35 6e 00 34 	addi r14,r11,52
dind=100000;
 874:	38 0c 86 a0 	mvu r12,0x86a0
 878:	79 8c 00 01 	orhi r12,r12,0x1
e=e+48;
 87c:	35 6b 00 30 	addi r11,r11,48
 880:	e3 ff ff d4 	bi 7d0 <_ZN3pwm7pwm_selEicb+0x48>

00000884 <_ZN3pwm5brazoEc>:

int pwm::brazo(char d){
 884:	20 42 00 ff 	andi r2,r2,0xff
int m;
if(d==0x01){m=0;}
if(d==0x02){m=1;}
 888:	34 03 00 02 	mvi r3,2
 88c:	34 01 00 01 	mvi r1,1
 890:	44 43 00 04 	be r2,r3,8a0 <_ZN3pwm5brazoEc+0x1c>
if(d==0x03){m=2;}
 894:	34 03 00 03 	mvi r3,3
 898:	34 01 00 02 	mvi r1,2
 89c:	5c 43 00 02 	bne r2,r3,8a4 <_ZN3pwm5brazoEc+0x20>
if(d==0x04){m=3;}
return m;
};
 8a0:	c3 a0 00 00 	ret
if(d==0x04){m=3;}
 8a4:	34 03 00 04 	mvi r3,4
 8a8:	34 01 00 00 	mvi r1,0
 8ac:	5c 43 ff fd 	bne r2,r3,8a0 <_ZN3pwm5brazoEc+0x1c>
 8b0:	34 01 00 03 	mvi r1,3
};
 8b4:	c3 a0 00 00 	ret

000008b8 <_ZN5timer6nsleepEi>:
void timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 8b8:	78 03 00 00 	mvhi r3,0x0
 8bc:	38 63 0a c0 	ori r3,r3,0xac0
 8c0:	28 61 00 00 	lw r1,(r3+0)
 8c4:	08 42 00 32 	muli r2,r2,50
 8c8:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 8cc:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 8d0:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 8d4:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 8d8:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 8dc:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 8e0:	20 21 00 01 	andi r1,r1,0x1
 8e4:	44 20 ff fe 	be r1,r0,8dc <_ZN5timer6nsleepEi+0x24>
};
 8e8:	c3 a0 00 00 	ret

000008ec <_ZN4uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 8ec:	c3 a0 00 00 	ret

000008f0 <_ZN4uart12uart_getcharEv>:

char uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 8f0:	78 02 00 00 	mvhi r2,0x0
 8f4:	38 42 0a c4 	ori r2,r2,0xac4
 8f8:	28 41 00 00 	lw r1,(r2+0)
 8fc:	28 22 00 00 	lw r2,(r1+0)
 900:	28 41 00 00 	lw r1,(r2+0)
 904:	20 21 00 01 	andi r1,r1,0x1
 908:	44 20 ff fe 	be r1,r0,900 <_ZN4uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 90c:	28 41 00 04 	lw r1,(r2+4)
}
 910:	20 21 00 ff 	andi r1,r1,0xff
 914:	c3 a0 00 00 	ret

00000918 <_ZN4uart12uart_putcharEc>:

void uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 918:	78 03 00 00 	mvhi r3,0x0
 91c:	38 63 0a c8 	ori r3,r3,0xac8
 920:	28 61 00 00 	lw r1,(r3+0)
{
 924:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 928:	28 23 00 00 	lw r3,(r1+0)
 92c:	28 61 00 00 	lw r1,(r3+0)
 930:	20 21 00 10 	andi r1,r1,0x10
 934:	5c 20 ff fe 	bne r1,r0,92c <_ZN4uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 938:	58 62 00 04 	sw (r3+4),r2
}
 93c:	c3 a0 00 00 	ret

00000940 <_ZN4uart11uart_putstrEPc>:

void uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 940:	40 44 00 00 	lbu r4,(r2+0)
 944:	44 80 00 0c 	be r4,r0,974 <_ZN4uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 948:	78 03 00 00 	mvhi r3,0x0
 94c:	38 63 0a cc 	ori r3,r3,0xacc
 950:	28 61 00 00 	lw r1,(r3+0)
 954:	28 23 00 00 	lw r3,(r1+0)
 958:	28 61 00 00 	lw r1,(r3+0)
 95c:	20 21 00 10 	andi r1,r1,0x10
 960:	5c 20 ff fe 	bne r1,r0,958 <_ZN4uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 964:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 968:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 96c:	40 44 00 00 	lbu r4,(r2+0)
 970:	5c 80 ff fa 	bne r4,r0,958 <_ZN4uart11uart_putstrEPc+0x18>
	}
}
 974:	c3 a0 00 00 	ret

00000978 <_ZN4uart11uart_getintEv>:

int uart::uart_getint()
{   
	while (! (uart0->ucr & UART_DR)) ;
 978:	78 02 00 00 	mvhi r2,0x0
 97c:	38 42 0a d0 	ori r2,r2,0xad0
 980:	28 41 00 00 	lw r1,(r2+0)
 984:	28 22 00 00 	lw r2,(r1+0)
 988:	28 41 00 00 	lw r1,(r2+0)
 98c:	20 21 00 01 	andi r1,r1,0x1
 990:	44 20 ff fe 	be r1,r0,988 <_ZN4uart11uart_getintEv+0x10>
	return uart0->rxtx;
 994:	28 41 00 04 	lw r1,(r2+4)
}
 998:	c3 a0 00 00 	ret

0000099c <_ZN6camera9cam_tomarEi>:
#include "camera.h"
#include "soc-hw.h"


void camera::cam_tomar(int take)
{
 99c:	37 9c ff fc 	addi sp,sp,-4
 9a0:	5b 9d 00 04 	sw (sp+4),ra
	cam_takepicture(take);
 9a4:	20 41 00 ff 	andi r1,r2,0xff
 9a8:	fb ff fe 74 	calli 378 <_Z15cam_takepictureh>

};
 9ac:	2b 9d 00 04 	lw ra,(sp+4)
 9b0:	37 9c 00 04 	addi sp,sp,4
 9b4:	c3 a0 00 00 	ret

000009b8 <_ZN6camera7cam_verEi>:

void camera::cam_ver(int ver)
{	
 9b8:	37 9c ff fc 	addi sp,sp,-4
 9bc:	5b 9d 00 04 	sw (sp+4),ra
	cam_leer(ver);
 9c0:	b8 40 08 00 	mv r1,r2
 9c4:	fb ff fe 74 	calli 394 <_Z8cam_leerj>
}; 
 9c8:	2b 9d 00 04 	lw ra,(sp+4)
 9cc:	37 9c 00 04 	addi sp,sp,4
 9d0:	c3 a0 00 00 	ret

000009d4 <_ZN6camera8cam_ver1Ei>:

void camera::cam_ver1(int ver1)
{	
 9d4:	37 9c ff fc 	addi sp,sp,-4
 9d8:	5b 9d 00 04 	sw (sp+4),ra
	cam_leer1(ver1);
 9dc:	20 41 00 ff 	andi r1,r2,0xff
 9e0:	fb ff fe 80 	calli 3e0 <_Z9cam_leer1h>
}; 
 9e4:	2b 9d 00 04 	lw ra,(sp+4)
 9e8:	37 9c 00 04 	addi sp,sp,4
 9ec:	c3 a0 00 00 	ret

000009f0 <_ZN6camera8cam_datoEv>:

char camera::cam_dato()
{	
 9f0:	37 9c ff fc 	addi sp,sp,-4
 9f4:	5b 9d 00 04 	sw (sp+4),ra
	return cam_read();
 9f8:	fb ff fe 5a 	calli 360 <_Z8cam_readv>
}; 
 9fc:	20 21 00 ff 	andi r1,r1,0xff
 a00:	2b 9d 00 04 	lw ra,(sp+4)
 a04:	37 9c 00 04 	addi sp,sp,4
 a08:	c3 a0 00 00 	ret

00000a0c <_ZN6camera7cam_rstEii>:

void camera::cam_rst(int datwrst, int datrrst)
{
 a0c:	37 9c ff f8 	addi sp,sp,-8
 a10:	5b 8b 00 08 	sw (sp+8),r11
 a14:	5b 9d 00 04 	sw (sp+4),ra
	cam_resetwr  (datwrst);
 a18:	20 41 00 ff 	andi r1,r2,0xff
{
 a1c:	b8 60 58 00 	mv r11,r3
	cam_resetwr  (datwrst);
 a20:	fb ff fe 63 	calli 3ac <_Z11cam_resetwrh>
	cam_resetrd (datrrst);
 a24:	b9 60 08 00 	mv r1,r11
 a28:	fb ff fe 68 	calli 3c8 <_Z11cam_resetrdj>
};
 a2c:	2b 9d 00 04 	lw ra,(sp+4)
 a30:	2b 8b 00 08 	lw r11,(sp+8)
 a34:	37 9c 00 08 	addi sp,sp,8
 a38:	c3 a0 00 00 	ret
