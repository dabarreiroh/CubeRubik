
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ec  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000080  000006ec  000006ec  00000740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  0000076c  0000076c  000007c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000784  00000784  000007d8  2**2
                  ALLOC
  4 .debug_frame  0000021c  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b0c  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000336  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005ff  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035b  00000000  00000000  00001e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000015e  00000000  00000000  00002209  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 d7 	calli 428 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 90 	ori gp,gp,0x790
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 84 	ori r1,r1,0x784
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 08 	ori r3,r3,0x808

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"

int main(){
 208:	37 9c ff f8 	addi sp,sp,-8
 20c:	5b 8b 00 08 	sw (sp+8),r11
 210:	5b 9d 00 04 	sw (sp+4),ra
uint32_t resetOn=1;
uint32_t resetOff=0;


 
cam_takepicture(wrOn);
 214:	34 01 00 01 	mvi r1,1
nsleep(3000000); 
 218:	38 0b c6 c0 	mvu r11,0xc6c0
 21c:	79 6b 00 2d 	orhi r11,r11,0x2d
cam_takepicture(wrOn);
 220:	f8 00 00 36 	calli 2f8 <cam_takepicture>
nsleep(3000000); 
 224:	b9 60 08 00 	mv r1,r11
 228:	f8 00 00 c1 	calli 52c <nsleep>
cam_takepicture(wrOff);
 22c:	34 01 00 00 	mvi r1,0
 230:	f8 00 00 32 	calli 2f8 <cam_takepicture>
nsleep(3000000); 
 234:	b9 60 08 00 	mv r1,r11
 238:	f8 00 00 bd 	calli 52c <nsleep>
cam_leer(rdOn);
 23c:	34 01 00 01 	mvi r1,1
 240:	f8 00 00 35 	calli 314 <cam_leer>
nsleep(3000000);
 244:	b9 60 08 00 	mv r1,r11
 248:	f8 00 00 b9 	calli 52c <nsleep>
cam_leer(rdOff);
 24c:	34 01 00 00 	mvi r1,0
 250:	f8 00 00 31 	calli 314 <cam_leer>
nsleep(3000000);
 254:	b9 60 08 00 	mv r1,r11
 258:	f8 00 00 b5 	calli 52c <nsleep>
cam_resetwr (resetOn);
 25c:	34 01 00 01 	mvi r1,1
 260:	f8 00 00 33 	calli 32c <cam_resetwr>
nsleep(3000000);
 264:	b9 60 08 00 	mv r1,r11
 268:	f8 00 00 b1 	calli 52c <nsleep>
cam_resetwr (resetOff);
 26c:	34 01 00 00 	mvi r1,0
 270:	f8 00 00 2f 	calli 32c <cam_resetwr>
nsleep(3000000);
 274:	b9 60 08 00 	mv r1,r11
 278:	f8 00 00 ad 	calli 52c <nsleep>
cam_resetrd(resetOn);
 27c:	34 01 00 01 	mvi r1,1
 280:	f8 00 00 32 	calli 348 <cam_resetrd>
nsleep(3000000);
 284:	b9 60 08 00 	mv r1,r11
 288:	f8 00 00 a9 	calli 52c <nsleep>
cam_resetrd(resetOff);
 28c:	34 01 00 00 	mvi r1,0
 290:	f8 00 00 2e 	calli 348 <cam_resetrd>


}
 294:	34 01 00 00 	mvi r1,0
 298:	2b 9d 00 04 	lw ra,(sp+4)
 29c:	2b 8b 00 08 	lw r11,(sp+8)
 2a0:	37 9c 00 08 	addi sp,sp,8
 2a4:	c3 a0 00 00 	ret

000002a8 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2a8:	78 01 00 00 	mvhi r1,0x0
 2ac:	38 21 06 ec 	ori r1,r1,0x6ec
 2b0:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2b4:	78 04 00 00 	mvhi r4,0x0
 2b8:	38 84 06 f0 	ori r4,r4,0x6f0
 2bc:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 2c0:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2c4:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 2c8:	34 21 00 01 	addi r1,r1,1
 2cc:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2d0:	34 01 00 0e 	mvi r1,14
 2d4:	58 61 00 00 	sw (r3+0),r1
}
 2d8:	c3 a0 00 00 	ret

000002dc <isr_null>:
 2dc:	c3 a0 00 00 	ret

000002e0 <cam_read>:
	return cam -> d_out;
 2e0:	78 02 00 00 	mvhi r2,0x0
 2e4:	38 42 06 f4 	ori r2,r2,0x6f4
 2e8:	28 41 00 00 	lw r1,(r2+0)
 2ec:	28 21 00 00 	lw r1,(r1+0)
 2f0:	28 21 00 00 	lw r1,(r1+0)
}
 2f4:	c3 a0 00 00 	ret

000002f8 <cam_takepicture>:
cam -> takepicture  = vtakepicture;
 2f8:	78 03 00 00 	mvhi r3,0x0
 2fc:	38 63 06 f8 	ori r3,r3,0x6f8
 300:	28 62 00 00 	lw r2,(r3+0)
void cam_takepicture (uint8_t vtakepicture ){
 304:	20 21 00 ff 	andi r1,r1,0xff
cam -> takepicture  = vtakepicture;
 308:	28 42 00 00 	lw r2,(r2+0)
 30c:	30 41 00 04 	sb (r2+4),r1
}
 310:	c3 a0 00 00 	ret

00000314 <cam_leer>:
cam -> leer = vleer;
 314:	78 03 00 00 	mvhi r3,0x0
 318:	38 63 06 fc 	ori r3,r3,0x6fc
 31c:	28 62 00 00 	lw r2,(r3+0)
 320:	28 42 00 00 	lw r2,(r2+0)
 324:	58 41 00 08 	sw (r2+8),r1
}
 328:	c3 a0 00 00 	ret

0000032c <cam_resetwr>:
cam -> resetwr   = vresetwr;
 32c:	78 03 00 00 	mvhi r3,0x0
 330:	38 63 07 00 	ori r3,r3,0x700
 334:	28 62 00 00 	lw r2,(r3+0)
void cam_resetwr  (uint8_t vresetwr){
 338:	20 21 00 ff 	andi r1,r1,0xff
cam -> resetwr   = vresetwr;
 33c:	28 42 00 00 	lw r2,(r2+0)
 340:	30 41 00 0c 	sb (r2+12),r1
}
 344:	c3 a0 00 00 	ret

00000348 <cam_resetrd>:
cam -> resetrd = vresetrd;
 348:	78 03 00 00 	mvhi r3,0x0
 34c:	38 63 07 04 	ori r3,r3,0x704
 350:	28 62 00 00 	lw r2,(r3+0)
 354:	28 42 00 00 	lw r2,(r2+0)
 358:	58 41 00 10 	sw (r2+16),r1
}
 35c:	c3 a0 00 00 	ret

00000360 <pwm_read>:
	return pwm -> d_out;
 360:	78 02 00 00 	mvhi r2,0x0
 364:	38 42 07 08 	ori r2,r2,0x708
 368:	28 41 00 00 	lw r1,(r2+0)
 36c:	28 21 00 00 	lw r1,(r1+0)
 370:	28 21 00 00 	lw r1,(r1+0)
}
 374:	c3 a0 00 00 	ret

00000378 <pwm_rd>:
pwm -> rd = vrd;
 378:	78 03 00 00 	mvhi r3,0x0
 37c:	38 63 07 0c 	ori r3,r3,0x70c
 380:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 384:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 388:	28 42 00 00 	lw r2,(r2+0)
 38c:	30 41 00 04 	sb (r2+4),r1
}
 390:	c3 a0 00 00 	ret

00000394 <pwm_addr>:
pwm -> addr = vaddr;
 394:	78 03 00 00 	mvhi r3,0x0
 398:	38 63 07 10 	ori r3,r3,0x710
 39c:	28 62 00 00 	lw r2,(r3+0)
 3a0:	28 42 00 00 	lw r2,(r2+0)
 3a4:	58 41 00 08 	sw (r2+8),r1
}
 3a8:	c3 a0 00 00 	ret

000003ac <pwm_wr>:
pwm -> wr = vwr;
 3ac:	78 03 00 00 	mvhi r3,0x0
 3b0:	38 63 07 14 	ori r3,r3,0x714
 3b4:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 3b8:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 3bc:	28 42 00 00 	lw r2,(r2+0)
 3c0:	30 41 00 0c 	sb (r2+12),r1
}
 3c4:	c3 a0 00 00 	ret

000003c8 <pwm_din>:
pwm -> d_in = vd_in;
 3c8:	78 03 00 00 	mvhi r3,0x0
 3cc:	38 63 07 18 	ori r3,r3,0x718
 3d0:	28 62 00 00 	lw r2,(r3+0)
 3d4:	28 42 00 00 	lw r2,(r2+0)
 3d8:	58 41 00 10 	sw (r2+16),r1
}
 3dc:	c3 a0 00 00 	ret

000003e0 <gpio_config_dir>:
	gpio0 -> dir = vdir;
 3e0:	78 03 00 00 	mvhi r3,0x0
 3e4:	38 63 07 1c 	ori r3,r3,0x71c
 3e8:	28 62 00 00 	lw r2,(r3+0)
 3ec:	28 42 00 00 	lw r2,(r2+0)
 3f0:	58 41 00 08 	sw (r2+8),r1
}
 3f4:	c3 a0 00 00 	ret

000003f8 <gpio_write>:
	gpio0 -> wr = vpins;
 3f8:	78 03 00 00 	mvhi r3,0x0
 3fc:	38 63 07 20 	ori r3,r3,0x720
 400:	28 62 00 00 	lw r2,(r3+0)
 404:	28 42 00 00 	lw r2,(r2+0)
 408:	58 41 00 04 	sw (r2+4),r1
}
 40c:	c3 a0 00 00 	ret

00000410 <gpio_read>:
	return gpio0 -> rd;
 410:	78 02 00 00 	mvhi r2,0x0
 414:	38 42 07 24 	ori r2,r2,0x724
 418:	28 41 00 00 	lw r1,(r2+0)
 41c:	28 21 00 00 	lw r1,(r1+0)
 420:	28 21 00 00 	lw r1,(r1+0)
}
 424:	c3 a0 00 00 	ret

00000428 <irq_handler>:
{
 428:	37 9c ff f0 	addi sp,sp,-16
 42c:	5b 8b 00 10 	sw (sp+16),r11
 430:	5b 8c 00 0c 	sw (sp+12),r12
 434:	5b 8d 00 08 	sw (sp+8),r13
 438:	5b 9d 00 04 	sw (sp+4),ra
 43c:	78 02 00 00 	mvhi r2,0x0
 440:	38 42 07 28 	ori r2,r2,0x728
 444:	28 4b 00 00 	lw r11,(r2+0)
 448:	b8 20 60 00 	mv r12,r1
 44c:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 450:	21 81 00 01 	andi r1,r12,0x1
 454:	44 20 00 03 	be r1,r0,460 <irq_handler+0x38>
 458:	29 61 00 00 	lw r1,(r11+0)
 45c:	d8 20 00 00 	call r1
 460:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 464:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 468:	5d ab ff fa 	bne r13,r11,450 <irq_handler+0x28>
}
 46c:	2b 9d 00 04 	lw ra,(sp+4)
 470:	2b 8b 00 10 	lw r11,(sp+16)
 474:	2b 8c 00 0c 	lw r12,(sp+12)
 478:	2b 8d 00 08 	lw r13,(sp+8)
 47c:	37 9c 00 10 	addi sp,sp,16
 480:	c3 a0 00 00 	ret

00000484 <isr_init>:
{
 484:	78 02 00 00 	mvhi r2,0x0
 488:	38 42 07 2c 	ori r2,r2,0x72c
 48c:	28 41 00 00 	lw r1,(r2+0)
 490:	78 02 00 00 	mvhi r2,0x0
 494:	38 42 07 30 	ori r2,r2,0x730
 498:	28 43 00 00 	lw r3,(r2+0)
 49c:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 4a0:	58 23 00 00 	sw (r1+0),r3
 4a4:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 4a8:	5c 22 ff fe 	bne r1,r2,4a0 <isr_init+0x1c>
}
 4ac:	c3 a0 00 00 	ret

000004b0 <isr_register>:
	isr_table[irq] = isr;
 4b0:	78 04 00 00 	mvhi r4,0x0
 4b4:	38 84 07 34 	ori r4,r4,0x734
 4b8:	3c 23 00 02 	sli r3,r1,2
 4bc:	28 81 00 00 	lw r1,(r4+0)
 4c0:	b4 23 08 00 	add r1,r1,r3
 4c4:	58 22 00 00 	sw (r1+0),r2
}
 4c8:	c3 a0 00 00 	ret

000004cc <isr_unregister>:
	isr_table[irq] = &isr_null;
 4cc:	78 03 00 00 	mvhi r3,0x0
 4d0:	38 63 07 38 	ori r3,r3,0x738
 4d4:	3c 22 00 02 	sli r2,r1,2
 4d8:	28 61 00 00 	lw r1,(r3+0)
 4dc:	78 03 00 00 	mvhi r3,0x0
 4e0:	38 63 07 3c 	ori r3,r3,0x73c
 4e4:	b4 22 08 00 	add r1,r1,r2
 4e8:	28 62 00 00 	lw r2,(r3+0)
 4ec:	58 22 00 00 	sw (r1+0),r2
}
 4f0:	c3 a0 00 00 	ret

000004f4 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 4f4:	78 03 00 00 	mvhi r3,0x0
 4f8:	38 02 c3 50 	mvu r2,0xc350
 4fc:	38 63 07 40 	ori r3,r3,0x740
 500:	88 22 08 00 	mul r1,r1,r2
 504:	28 62 00 00 	lw r2,(r3+0)
 508:	28 42 00 00 	lw r2,(r2+0)
 50c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 510:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 514:	34 01 00 08 	mvi r1,8
 518:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 51c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 520:	20 21 00 01 	andi r1,r1,0x1
 524:	44 20 ff fe 	be r1,r0,51c <msleep+0x28>
}
 528:	c3 a0 00 00 	ret

0000052c <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 52c:	78 03 00 00 	mvhi r3,0x0
 530:	38 63 07 44 	ori r3,r3,0x744
 534:	28 62 00 00 	lw r2,(r3+0)
 538:	08 21 00 32 	muli r1,r1,50
 53c:	28 42 00 00 	lw r2,(r2+0)
 540:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 544:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 548:	34 01 00 08 	mvi r1,8
 54c:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 550:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 554:	20 21 00 01 	andi r1,r1,0x1
 558:	44 20 ff fe 	be r1,r0,550 <nsleep+0x24>
}
 55c:	c3 a0 00 00 	ret

00000560 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 560:	78 02 00 00 	mvhi r2,0x0
 564:	38 42 07 48 	ori r2,r2,0x748
 568:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 56c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 570:	34 02 13 88 	mvi r2,5000
 574:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 578:	38 63 07 4c 	ori r3,r3,0x74c
	timer0->compare0 = (FCPU/10000);
 57c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 580:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 584:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 588:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 58c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 590:	34 02 00 0e 	mvi r2,14
 594:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 598:	78 02 00 00 	mvhi r2,0x0
 59c:	38 42 07 50 	ori r2,r2,0x750
 5a0:	38 63 07 54 	ori r3,r3,0x754
 5a4:	28 41 00 00 	lw r1,(r2+0)
 5a8:	28 62 00 00 	lw r2,(r3+0)
 5ac:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 5b0:	c3 a0 00 00 	ret

000005b4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 5b4:	c3 a0 00 00 	ret

000005b8 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 5b8:	78 02 00 00 	mvhi r2,0x0
 5bc:	38 42 07 58 	ori r2,r2,0x758
 5c0:	28 41 00 00 	lw r1,(r2+0)
 5c4:	28 22 00 00 	lw r2,(r1+0)
 5c8:	28 41 00 00 	lw r1,(r2+0)
 5cc:	20 21 00 01 	andi r1,r1,0x1
 5d0:	44 20 ff fe 	be r1,r0,5c8 <uart_getchar+0x10>
	return uart0->rxtx;
 5d4:	28 41 00 04 	lw r1,(r2+4)
}
 5d8:	20 21 00 ff 	andi r1,r1,0xff
 5dc:	c3 a0 00 00 	ret

000005e0 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5e0:	78 03 00 00 	mvhi r3,0x0
 5e4:	38 63 07 5c 	ori r3,r3,0x75c
 5e8:	28 62 00 00 	lw r2,(r3+0)
{
 5ec:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5f0:	28 43 00 00 	lw r3,(r2+0)
 5f4:	28 62 00 00 	lw r2,(r3+0)
 5f8:	20 42 00 10 	andi r2,r2,0x10
 5fc:	5c 40 ff fe 	bne r2,r0,5f4 <uart_putchar+0x14>
	uart0->rxtx = c;
 600:	58 61 00 04 	sw (r3+4),r1
}
 604:	c3 a0 00 00 	ret

00000608 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 608:	40 24 00 00 	lbu r4,(r1+0)
 60c:	44 80 00 0c 	be r4,r0,63c <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 610:	78 03 00 00 	mvhi r3,0x0
 614:	38 63 07 60 	ori r3,r3,0x760
 618:	28 62 00 00 	lw r2,(r3+0)
 61c:	28 43 00 00 	lw r3,(r2+0)
 620:	28 62 00 00 	lw r2,(r3+0)
 624:	20 42 00 10 	andi r2,r2,0x10
 628:	5c 40 ff fe 	bne r2,r0,620 <uart_putstr+0x18>
	uart0->rxtx = c;
 62c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 630:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 634:	40 24 00 00 	lbu r4,(r1+0)
 638:	5c 80 ff fa 	bne r4,r0,620 <uart_putstr+0x18>
	}
}
 63c:	c3 a0 00 00 	ret

00000640 <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 640:	78 02 00 00 	mvhi r2,0x0
 644:	38 42 07 64 	ori r2,r2,0x764
 648:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 64c:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 650:	28 21 00 00 	lw r1,(r1+0)
 654:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 658:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 65c:	34 02 ff 80 	mvi r2,-128
 660:	30 22 00 02 	sb (r1+2),r2


}
 664:	c3 a0 00 00 	ret

00000668 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 668:	78 05 00 00 	mvhi r5,0x0
 66c:	38 a5 07 68 	ori r5,r5,0x768
 670:	28 a4 00 00 	lw r4,(r5+0)
 674:	3c 21 00 02 	sli r1,r1,2
{
 678:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 67c:	28 84 00 00 	lw r4,(r4+0)
 680:	20 21 00 fc 	andi r1,r1,0xfc
{
 684:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 688:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 68c:	34 01 ff 90 	mvi r1,-112
 690:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 694:	40 81 00 04 	lbu r1,(r4+4)
 698:	20 21 00 02 	andi r1,r1,0x2
 69c:	5c 20 ff fe 	bne r1,r0,694 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 6a0:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 6a4:	34 01 00 10 	mvi r1,16
 6a8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6ac:	40 81 00 04 	lbu r1,(r4+4)
 6b0:	20 21 00 02 	andi r1,r1,0x2
 6b4:	5c 20 ff fe 	bne r1,r0,6ac <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 6b8:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 6bc:	34 01 00 10 	mvi r1,16
 6c0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6c4:	40 81 00 04 	lbu r1,(r4+4)
 6c8:	20 21 00 02 	andi r1,r1,0x2
 6cc:	5c 20 ff fe 	bne r1,r0,6c4 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 6d0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 6d4:	34 01 00 50 	mvi r1,80
 6d8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6dc:	40 81 00 04 	lbu r1,(r4+4)
 6e0:	20 21 00 02 	andi r1,r1,0x2
 6e4:	5c 20 ff fe 	bne r1,r0,6dc <i2c_write+0x74>
//7

}
 6e8:	c3 a0 00 00 	ret
