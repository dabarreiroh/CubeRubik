
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b38  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000080  00000b38  00000b38  00000b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000bb8  00000bb8  00000c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000bd0  00000bd0  00000c24  2**2
                  ALLOC
  4 .debug_frame  000002bc  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018ac  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000823  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000055c  00000000  00000000  00002faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  0000350b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000058  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000963  00000000  00000000  00003603  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000576  00000000  00000000  00003f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000044dc  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 33 	calli e0 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_scall_handler>:
  c0:	34 00 00 00 	nop
  c4:	34 00 00 00 	nop
  c8:	34 00 00 00 	nop
  cc:	34 00 00 00 	nop
  d0:	34 00 00 00 	nop
  d4:	34 00 00 00 	nop
  d8:	34 00 00 00 	nop
  dc:	34 00 00 00 	nop

000000e0 <_crt0>:
  e0:	78 1c 00 00 	mvhi sp,0x0
  e4:	3b 9c 0f fc 	ori sp,sp,0xffc
  e8:	78 1a 00 00 	mvhi gp,0x0
  ec:	3b 5a 0b d0 	ori gp,gp,0xbd0
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 0b d0 	ori r1,r1,0xbd0
  f8:	78 03 00 00 	mvhi r3,0x0
  fc:	38 63 0c 54 	ori r3,r3,0xc54

00000100 <.clearBSS>:
 100:	44 23 00 04 	be r1,r3,110 <.callMain>
 104:	58 20 00 00 	sw (r1+0),r0
 108:	34 21 00 04 	addi r1,r1,4
 10c:	e3 ff ff fd 	bi 100 <.clearBSS>

00000110 <.callMain>:
 110:	34 01 00 00 	mvi r1,0
 114:	34 02 00 00 	mvi r2,0
 118:	34 03 00 00 	mvi r3,0
 11c:	f8 00 00 33 	calli 1e8 <main>

00000120 <irq_enable>:
 120:	34 01 00 01 	mvi r1,1
 124:	d0 01 00 00 	wcsr IE,r1
 128:	c3 a0 00 00 	ret

0000012c <irq_disable>:
 12c:	34 01 00 00 	mvi r1,0
 130:	d0 01 00 00 	wcsr IE,r1
 134:	c3 a0 00 00 	ret

00000138 <irq_set_mask>:
 138:	d0 21 00 00 	wcsr IM,r1
 13c:	c3 a0 00 00 	ret

00000140 <irq_get_mask>:
 140:	90 20 08 00 	rcsr r1,IM
 144:	c3 a0 00 00 	ret

00000148 <jump>:
 148:	c0 20 00 00 	b r1

0000014c <halt>:
 14c:	e0 00 00 00 	bi 14c <halt>

00000150 <_save_all>:
 150:	37 9c ff 80 	addi sp,sp,-128
 154:	5b 81 00 04 	sw (sp+4),r1
 158:	5b 82 00 08 	sw (sp+8),r2
 15c:	5b 83 00 0c 	sw (sp+12),r3
 160:	5b 84 00 10 	sw (sp+16),r4
 164:	5b 85 00 14 	sw (sp+20),r5
 168:	5b 86 00 18 	sw (sp+24),r6
 16c:	5b 87 00 1c 	sw (sp+28),r7
 170:	5b 88 00 20 	sw (sp+32),r8
 174:	5b 89 00 24 	sw (sp+36),r9
 178:	5b 8a 00 28 	sw (sp+40),r10
 17c:	5b 9e 00 78 	sw (sp+120),ea
 180:	5b 9f 00 7c 	sw (sp+124),ba
 184:	2b 81 00 80 	lw r1,(sp+128)
 188:	5b 81 00 74 	sw (sp+116),r1
 18c:	bb 80 08 00 	mv r1,sp
 190:	34 21 00 80 	addi r1,r1,128
 194:	5b 81 00 70 	sw (sp+112),r1
 198:	c3 a0 00 00 	ret

0000019c <_restore_all_and_eret>:
 19c:	2b 81 00 04 	lw r1,(sp+4)
 1a0:	2b 82 00 08 	lw r2,(sp+8)
 1a4:	2b 83 00 0c 	lw r3,(sp+12)
 1a8:	2b 84 00 10 	lw r4,(sp+16)
 1ac:	2b 85 00 14 	lw r5,(sp+20)
 1b0:	2b 86 00 18 	lw r6,(sp+24)
 1b4:	2b 87 00 1c 	lw r7,(sp+28)
 1b8:	2b 88 00 20 	lw r8,(sp+32)
 1bc:	2b 89 00 24 	lw r9,(sp+36)
 1c0:	2b 8a 00 28 	lw r10,(sp+40)
 1c4:	2b 9d 00 74 	lw ra,(sp+116)
 1c8:	2b 9e 00 78 	lw ea,(sp+120)
 1cc:	2b 9f 00 7c 	lw ba,(sp+124)
 1d0:	2b 9c 00 70 	lw sp,(sp+112)
 1d4:	c3 c0 00 00 	eret

000001d8 <get_sp>:
 1d8:	bb 80 08 00 	mv r1,sp
 1dc:	c3 a0 00 00 	ret

000001e0 <get_gp>:
 1e0:	bb 40 08 00 	mv r1,gp
 1e4:	c3 a0 00 00 	ret

000001e8 <main>:
#include "timer.h"
#include "uart.h"


int main()
{	
 1e8:	37 9c ff cc 	addi sp,sp,-52
 1ec:	5b 8b 00 24 	sw (sp+36),r11
 1f0:	5b 8c 00 20 	sw (sp+32),r12
 1f4:	5b 8d 00 1c 	sw (sp+28),r13
 1f8:	5b 8e 00 18 	sw (sp+24),r14
 1fc:	5b 8f 00 14 	sw (sp+20),r15
 200:	5b 90 00 10 	sw (sp+16),r16
 204:	5b 91 00 0c 	sw (sp+12),r17
 208:	5b 92 00 08 	sw (sp+8),r18
 20c:	5b 9d 00 04 	sw (sp+4),ra
		com=comando.uart_getchar();
		comando.uart_putchar(com);
		
		
	
	if(com==0xFF)
 210:	34 0c 00 ff 	mvi r12,255
			motor.pwm_sel(motor.brazo(0x02), 0x12, true);//Brazo 2 C
			motor.pwm_sel(motor.brazo(0x03), 0x10, true);//Brazo 3 D
			motor.pwm_sel(motor.brazo(0x04), 0x12, true);//Brazo 4 C
		}				
	}
	if(com==0xFE)
 214:	34 0d 00 fe 	mvi r13,254
			motor.pwm_sel(motor.brazo(0x02), 0x12, true);//brazo 2 C
			motor.pwm_sel(motor.brazo(0x03), 0x10, true);//brazo 3 D
			motor.pwm_sel(motor.brazo(0x04), 0x12, true);//brazo 4 C
		}			
	}
	if(com==0xFD)
 218:	34 0e 00 fd 	mvi r14,253
			comando.uart_putchar(b); //seleccion brazo
			comando.uart_putchar(c);//seleciona motor
			motor.pwm_sel(motor.brazo(b), c, true);//mover
		}
	}
	if(com==0xFC)
 21c:	34 0f 00 fc 	mvi r15,252
		if(com==0xF0)
 220:	34 10 00 f0 	mvi r16,240
		com=comando.uart_getchar();
 224:	37 81 00 28 	addi r1,sp,40
 228:	f8 00 02 19 	calli a8c <_ZN4uart12uart_getcharEv>
 22c:	b8 20 58 00 	mv r11,r1
		comando.uart_putchar(com);
 230:	b8 20 10 00 	mv r2,r1
 234:	37 81 00 28 	addi r1,sp,40
 238:	f8 00 02 1f 	calli ab4 <_ZN4uart12uart_putcharEc>
	if(com==0xFF)
 23c:	45 6c 00 25 	be r11,r12,2d0 <main+0xe8>
	if(com==0xFE)
 240:	45 6d 00 6c 	be r11,r13,3f0 <main+0x208>
	if(com==0xFD)
 244:	45 6e 00 90 	be r11,r14,484 <main+0x29c>
	if(com==0xFC)
 248:	5d 6f ff f7 	bne r11,r15,224 <main+0x3c>
	{
		comando.uart_putchar(0x04);//mover un motor	
 24c:	34 02 00 04 	mvi r2,4
 250:	37 81 00 28 	addi r1,sp,40
 254:	f8 00 02 18 	calli ab4 <_ZN4uart12uart_putcharEc>
		char b=comando.uart_getchar();
 258:	37 81 00 28 	addi r1,sp,40
 25c:	f8 00 02 0c 	calli a8c <_ZN4uart12uart_getcharEv>
 260:	b8 20 88 00 	mv r17,r1
		char c=comando.uart_getchar();
 264:	37 81 00 28 	addi r1,sp,40
 268:	f8 00 02 09 	calli a8c <_ZN4uart12uart_getcharEv>
 26c:	b8 20 58 00 	mv r11,r1
		com=comando.uart_getchar();
 270:	37 81 00 28 	addi r1,sp,40
 274:	f8 00 02 06 	calli a8c <_ZN4uart12uart_getcharEv>
		
		if(com==0xF0)
 278:	5c 30 ff eb 	bne r1,r16,224 <main+0x3c>
		{		
			comando.uart_putchar(b); //seleccion brazo
 27c:	ba 20 10 00 	mv r2,r17
 280:	37 81 00 28 	addi r1,sp,40
 284:	f8 00 02 0c 	calli ab4 <_ZN4uart12uart_putcharEc>
			comando.uart_putchar(c);//seleciona motor
 288:	b9 60 10 00 	mv r2,r11
 28c:	37 81 00 28 	addi r1,sp,40
 290:	f8 00 02 09 	calli ab4 <_ZN4uart12uart_putcharEc>
			motor.pwm_sel(motor.brazo(b), c, true);//mover
 294:	ba 20 10 00 	mv r2,r17
 298:	37 81 00 30 	addi r1,sp,48
 29c:	f8 00 01 e1 	calli a20 <_ZN3pwm5brazoEc>
 2a0:	b8 20 10 00 	mv r2,r1
 2a4:	b9 60 18 00 	mv r3,r11
 2a8:	34 04 00 01 	mvi r4,1
 2ac:	37 81 00 30 	addi r1,sp,48
 2b0:	f8 00 01 82 	calli 8b8 <_ZN3pwm7pwm_selEicb>
		com=comando.uart_getchar();
 2b4:	37 81 00 28 	addi r1,sp,40
 2b8:	f8 00 01 f5 	calli a8c <_ZN4uart12uart_getcharEv>
 2bc:	b8 20 58 00 	mv r11,r1
		comando.uart_putchar(com);
 2c0:	b8 20 10 00 	mv r2,r1
 2c4:	37 81 00 28 	addi r1,sp,40
 2c8:	f8 00 01 fb 	calli ab4 <_ZN4uart12uart_putcharEc>
	if(com==0xFF)
 2cc:	5d 6c ff dd 	bne r11,r12,240 <main+0x58>
		com=comando.uart_getchar();
 2d0:	37 81 00 28 	addi r1,sp,40
 2d4:	f8 00 01 ee 	calli a8c <_ZN4uart12uart_getcharEv>
 2d8:	b8 20 58 00 	mv r11,r1
		if(com==0xF0)
 2dc:	5c 30 ff d9 	bne r1,r16,240 <main+0x58>
			comando.uart_putchar(0x01);//home
 2e0:	37 81 00 28 	addi r1,sp,40
 2e4:	34 02 00 01 	mvi r2,1
 2e8:	f8 00 01 f3 	calli ab4 <_ZN4uart12uart_putcharEc>
			motor.pwm_sel(motor.brazo(0x01), 0x13, true);//motores inferiores hacia afuera
 2ec:	34 02 00 01 	mvi r2,1
 2f0:	37 81 00 30 	addi r1,sp,48
 2f4:	f8 00 01 cb 	calli a20 <_ZN3pwm5brazoEc>
 2f8:	34 04 00 01 	mvi r4,1
 2fc:	34 03 00 13 	mvi r3,19
 300:	b8 20 10 00 	mv r2,r1
 304:	37 81 00 30 	addi r1,sp,48
 308:	f8 00 01 6c 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x02), 0x13, true);//''
 30c:	34 02 00 02 	mvi r2,2
 310:	37 81 00 30 	addi r1,sp,48
 314:	f8 00 01 c3 	calli a20 <_ZN3pwm5brazoEc>
 318:	34 04 00 01 	mvi r4,1
 31c:	34 03 00 13 	mvi r3,19
 320:	b8 20 10 00 	mv r2,r1
 324:	37 81 00 30 	addi r1,sp,48
 328:	f8 00 01 64 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x03), 0x13, true);//''
 32c:	34 02 00 03 	mvi r2,3
 330:	37 81 00 30 	addi r1,sp,48
 334:	f8 00 01 bb 	calli a20 <_ZN3pwm5brazoEc>
 338:	34 04 00 01 	mvi r4,1
 33c:	34 03 00 13 	mvi r3,19
 340:	b8 20 10 00 	mv r2,r1
 344:	37 81 00 30 	addi r1,sp,48
 348:	f8 00 01 5c 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x04), 0x13, true);//''
 34c:	34 02 00 04 	mvi r2,4
 350:	37 81 00 30 	addi r1,sp,48
 354:	f8 00 01 b3 	calli a20 <_ZN3pwm5brazoEc>
 358:	34 04 00 01 	mvi r4,1
 35c:	34 03 00 13 	mvi r3,19
			motor.pwm_sel(motor.brazo(0x04), 0x14, true);//''
 360:	b8 20 10 00 	mv r2,r1
 364:	37 81 00 30 	addi r1,sp,48
 368:	f8 00 01 54 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x01), 0x10, true);//brazo 1 D 
 36c:	34 02 00 01 	mvi r2,1
 370:	37 81 00 30 	addi r1,sp,48
 374:	f8 00 01 ab 	calli a20 <_ZN3pwm5brazoEc>
 378:	34 04 00 01 	mvi r4,1
 37c:	34 03 00 10 	mvi r3,16
 380:	b8 20 10 00 	mv r2,r1
 384:	37 81 00 30 	addi r1,sp,48
 388:	f8 00 01 4c 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x02), 0x12, true);//brazo 2 C
 38c:	34 02 00 02 	mvi r2,2
 390:	37 81 00 30 	addi r1,sp,48
 394:	f8 00 01 a3 	calli a20 <_ZN3pwm5brazoEc>
 398:	34 04 00 01 	mvi r4,1
 39c:	34 03 00 12 	mvi r3,18
 3a0:	b8 20 10 00 	mv r2,r1
 3a4:	37 81 00 30 	addi r1,sp,48
 3a8:	f8 00 01 44 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x03), 0x10, true);//brazo 3 D
 3ac:	34 02 00 03 	mvi r2,3
 3b0:	37 81 00 30 	addi r1,sp,48
 3b4:	f8 00 01 9b 	calli a20 <_ZN3pwm5brazoEc>
 3b8:	34 04 00 01 	mvi r4,1
 3bc:	34 03 00 10 	mvi r3,16
 3c0:	b8 20 10 00 	mv r2,r1
 3c4:	37 81 00 30 	addi r1,sp,48
 3c8:	f8 00 01 3c 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x04), 0x12, true);//brazo 4 C
 3cc:	34 02 00 04 	mvi r2,4
 3d0:	37 81 00 30 	addi r1,sp,48
 3d4:	f8 00 01 93 	calli a20 <_ZN3pwm5brazoEc>
 3d8:	b8 20 10 00 	mv r2,r1
 3dc:	34 04 00 01 	mvi r4,1
 3e0:	34 03 00 12 	mvi r3,18
 3e4:	37 81 00 30 	addi r1,sp,48
 3e8:	f8 00 01 34 	calli 8b8 <_ZN3pwm7pwm_selEicb>
 3ec:	e3 ff ff 8e 	bi 224 <main+0x3c>
		com=comando.uart_getchar();
 3f0:	37 81 00 28 	addi r1,sp,40
 3f4:	f8 00 01 a6 	calli a8c <_ZN4uart12uart_getcharEv>
 3f8:	b8 20 58 00 	mv r11,r1
		if(com==0xF0)
 3fc:	5c 30 ff 92 	bne r1,r16,244 <main+0x5c>
			comando.uart_putchar(0x02);//init
 400:	37 81 00 28 	addi r1,sp,40
 404:	34 02 00 02 	mvi r2,2
 408:	f8 00 01 ab 	calli ab4 <_ZN4uart12uart_putcharEc>
			motor.pwm_sel(motor.brazo(0x01), 0x14, true);//motores inferiores hacia adentro (cubo)
 40c:	34 02 00 01 	mvi r2,1
 410:	37 81 00 30 	addi r1,sp,48
 414:	f8 00 01 83 	calli a20 <_ZN3pwm5brazoEc>
 418:	34 04 00 01 	mvi r4,1
 41c:	34 03 00 14 	mvi r3,20
 420:	b8 20 10 00 	mv r2,r1
 424:	37 81 00 30 	addi r1,sp,48
 428:	f8 00 01 24 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x02), 0x14, true);//''
 42c:	34 02 00 02 	mvi r2,2
 430:	37 81 00 30 	addi r1,sp,48
 434:	f8 00 01 7b 	calli a20 <_ZN3pwm5brazoEc>
 438:	34 04 00 01 	mvi r4,1
 43c:	34 03 00 14 	mvi r3,20
 440:	b8 20 10 00 	mv r2,r1
 444:	37 81 00 30 	addi r1,sp,48
 448:	f8 00 01 1c 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x03), 0x14, true);//''
 44c:	34 02 00 03 	mvi r2,3
 450:	37 81 00 30 	addi r1,sp,48
 454:	f8 00 01 73 	calli a20 <_ZN3pwm5brazoEc>
 458:	34 04 00 01 	mvi r4,1
 45c:	34 03 00 14 	mvi r3,20
 460:	b8 20 10 00 	mv r2,r1
 464:	37 81 00 30 	addi r1,sp,48
 468:	f8 00 01 14 	calli 8b8 <_ZN3pwm7pwm_selEicb>
			motor.pwm_sel(motor.brazo(0x04), 0x14, true);//''
 46c:	34 02 00 04 	mvi r2,4
 470:	37 81 00 30 	addi r1,sp,48
 474:	f8 00 01 6b 	calli a20 <_ZN3pwm5brazoEc>
 478:	34 04 00 01 	mvi r4,1
 47c:	34 03 00 14 	mvi r3,20
 480:	e3 ff ff b8 	bi 360 <main+0x178>
		comando.uart_putchar(0x03);//mover un motor	
 484:	34 02 00 03 	mvi r2,3
 488:	37 81 00 28 	addi r1,sp,40
 48c:	f8 00 01 8a 	calli ab4 <_ZN4uart12uart_putcharEc>
		char b=comando.uart_getchar();
 490:	37 81 00 28 	addi r1,sp,40
 494:	f8 00 01 7e 	calli a8c <_ZN4uart12uart_getcharEv>
 498:	b8 20 90 00 	mv r18,r1
		char c=comando.uart_getchar();
 49c:	37 81 00 28 	addi r1,sp,40
 4a0:	f8 00 01 7b 	calli a8c <_ZN4uart12uart_getcharEv>
 4a4:	b8 20 88 00 	mv r17,r1
		com=comando.uart_getchar();
 4a8:	37 81 00 28 	addi r1,sp,40
 4ac:	f8 00 01 78 	calli a8c <_ZN4uart12uart_getcharEv>
 4b0:	b8 20 58 00 	mv r11,r1
		if(com==0xF0)
 4b4:	5c 30 ff 65 	bne r1,r16,248 <main+0x60>
			comando.uart_putchar(b); //seleccion brazo
 4b8:	ba 40 10 00 	mv r2,r18
 4bc:	37 81 00 28 	addi r1,sp,40
 4c0:	f8 00 01 7d 	calli ab4 <_ZN4uart12uart_putcharEc>
			comando.uart_putchar(c);//seleciona motor
 4c4:	ba 20 10 00 	mv r2,r17
 4c8:	37 81 00 28 	addi r1,sp,40
 4cc:	f8 00 01 7a 	calli ab4 <_ZN4uart12uart_putcharEc>
			motor.pwm_sel(motor.brazo(b), c, true);//mover
 4d0:	ba 40 10 00 	mv r2,r18
 4d4:	37 81 00 30 	addi r1,sp,48
 4d8:	f8 00 01 52 	calli a20 <_ZN3pwm5brazoEc>
 4dc:	b8 20 10 00 	mv r2,r1
 4e0:	34 04 00 01 	mvi r4,1
 4e4:	ba 20 18 00 	mv r3,r17
 4e8:	37 81 00 30 	addi r1,sp,48
 4ec:	f8 00 00 f3 	calli 8b8 <_ZN3pwm7pwm_selEicb>
 4f0:	e3 ff ff 4d 	bi 224 <main+0x3c>

000004f4 <_Z7tic_isrv>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 4f4:	78 01 00 00 	mvhi r1,0x0
 4f8:	38 21 0b 38 	ori r1,r1,0xb38
 4fc:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 500:	78 04 00 00 	mvhi r4,0x0
 504:	38 84 0b 3c 	ori r4,r4,0xb3c
 508:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 50c:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 510:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 514:	34 21 00 01 	addi r1,r1,1
 518:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 51c:	34 01 00 0e 	mvi r1,14
 520:	58 61 00 00 	sw (r3+0),r1
}
 524:	c3 a0 00 00 	ret

00000528 <_Z8isr_nullv>:
 528:	c3 a0 00 00 	ret

0000052c <_Z8pwm_readv>:
	return pwm -> d_out;
 52c:	78 02 00 00 	mvhi r2,0x0
 530:	38 42 0b 40 	ori r2,r2,0xb40
 534:	28 41 00 00 	lw r1,(r2+0)
 538:	28 21 00 00 	lw r1,(r1+0)
 53c:	28 21 00 00 	lw r1,(r1+0)
}
 540:	c3 a0 00 00 	ret

00000544 <_Z6pwm_rdh>:
pwm -> rd = vrd;
 544:	78 03 00 00 	mvhi r3,0x0
 548:	38 63 0b 44 	ori r3,r3,0xb44
 54c:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 550:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 554:	28 42 00 00 	lw r2,(r2+0)
 558:	30 41 00 04 	sb (r2+4),r1
}
 55c:	c3 a0 00 00 	ret

00000560 <_Z8pwm_addrj>:
pwm -> addr = vaddr;
 560:	78 03 00 00 	mvhi r3,0x0
 564:	38 63 0b 48 	ori r3,r3,0xb48
 568:	28 62 00 00 	lw r2,(r3+0)
 56c:	28 42 00 00 	lw r2,(r2+0)
 570:	58 41 00 08 	sw (r2+8),r1
}
 574:	c3 a0 00 00 	ret

00000578 <_Z6pwm_wrh>:
pwm -> wr = vwr;
 578:	78 03 00 00 	mvhi r3,0x0
 57c:	38 63 0b 4c 	ori r3,r3,0xb4c
 580:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 584:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 588:	28 42 00 00 	lw r2,(r2+0)
 58c:	30 41 00 0c 	sb (r2+12),r1
}
 590:	c3 a0 00 00 	ret

00000594 <_Z7pwm_dinj>:
pwm -> d_in = vd_in;
 594:	78 03 00 00 	mvhi r3,0x0
 598:	38 63 0b 50 	ori r3,r3,0xb50
 59c:	28 62 00 00 	lw r2,(r3+0)
 5a0:	28 42 00 00 	lw r2,(r2+0)
 5a4:	58 41 00 10 	sw (r2+16),r1
}
 5a8:	c3 a0 00 00 	ret

000005ac <_Z15gpio_config_dirj>:
	gpio0 -> dir = vdir;
 5ac:	78 03 00 00 	mvhi r3,0x0
 5b0:	38 63 0b 54 	ori r3,r3,0xb54
 5b4:	28 62 00 00 	lw r2,(r3+0)
 5b8:	28 42 00 00 	lw r2,(r2+0)
 5bc:	58 41 00 08 	sw (r2+8),r1
}
 5c0:	c3 a0 00 00 	ret

000005c4 <_Z10gpio_writej>:
	gpio0 -> wr = vpins;
 5c4:	78 03 00 00 	mvhi r3,0x0
 5c8:	38 63 0b 58 	ori r3,r3,0xb58
 5cc:	28 62 00 00 	lw r2,(r3+0)
 5d0:	28 42 00 00 	lw r2,(r2+0)
 5d4:	58 41 00 04 	sw (r2+4),r1
}
 5d8:	c3 a0 00 00 	ret

000005dc <_Z9gpio_readv>:
	return gpio0 -> rd;
 5dc:	78 02 00 00 	mvhi r2,0x0
 5e0:	38 42 0b 5c 	ori r2,r2,0xb5c
 5e4:	28 41 00 00 	lw r1,(r2+0)
 5e8:	28 21 00 00 	lw r1,(r1+0)
 5ec:	28 21 00 00 	lw r1,(r1+0)
}
 5f0:	c3 a0 00 00 	ret

000005f4 <_Z11irq_handlerj>:
{
 5f4:	37 9c ff f0 	addi sp,sp,-16
 5f8:	5b 8b 00 10 	sw (sp+16),r11
 5fc:	5b 8c 00 0c 	sw (sp+12),r12
 600:	5b 8d 00 08 	sw (sp+8),r13
 604:	5b 9d 00 04 	sw (sp+4),ra
 608:	78 02 00 00 	mvhi r2,0x0
 60c:	38 42 0b 60 	ori r2,r2,0xb60
 610:	28 4b 00 00 	lw r11,(r2+0)
 614:	b8 20 60 00 	mv r12,r1
 618:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 61c:	21 81 00 01 	andi r1,r12,0x1
 620:	44 20 00 03 	be r1,r0,62c <_Z11irq_handlerj+0x38>
 624:	29 61 00 00 	lw r1,(r11+0)
 628:	d8 20 00 00 	call r1
 62c:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 630:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 634:	5d ab ff fa 	bne r13,r11,61c <_Z11irq_handlerj+0x28>
}
 638:	2b 9d 00 04 	lw ra,(sp+4)
 63c:	2b 8b 00 10 	lw r11,(sp+16)
 640:	2b 8c 00 0c 	lw r12,(sp+12)
 644:	2b 8d 00 08 	lw r13,(sp+8)
 648:	37 9c 00 10 	addi sp,sp,16
 64c:	c3 a0 00 00 	ret

00000650 <_Z8isr_initv>:
{
 650:	78 02 00 00 	mvhi r2,0x0
 654:	38 42 0b 64 	ori r2,r2,0xb64
 658:	28 41 00 00 	lw r1,(r2+0)
 65c:	78 02 00 00 	mvhi r2,0x0
 660:	38 42 0b 68 	ori r2,r2,0xb68
 664:	28 43 00 00 	lw r3,(r2+0)
 668:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 66c:	58 23 00 00 	sw (r1+0),r3
 670:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 674:	5c 22 ff fe 	bne r1,r2,66c <_Z8isr_initv+0x1c>
}
 678:	c3 a0 00 00 	ret

0000067c <_Z12isr_registeriPFvvE>:
	isr_table[irq] = isr;
 67c:	78 04 00 00 	mvhi r4,0x0
 680:	38 84 0b 6c 	ori r4,r4,0xb6c
 684:	3c 23 00 02 	sli r3,r1,2
 688:	28 81 00 00 	lw r1,(r4+0)
 68c:	b4 23 08 00 	add r1,r1,r3
 690:	58 22 00 00 	sw (r1+0),r2
}
 694:	c3 a0 00 00 	ret

00000698 <_Z14isr_unregisteri>:
	isr_table[irq] = &isr_null;
 698:	78 03 00 00 	mvhi r3,0x0
 69c:	38 63 0b 70 	ori r3,r3,0xb70
 6a0:	3c 22 00 02 	sli r2,r1,2
 6a4:	28 61 00 00 	lw r1,(r3+0)
 6a8:	78 03 00 00 	mvhi r3,0x0
 6ac:	38 63 0b 74 	ori r3,r3,0xb74
 6b0:	b4 22 08 00 	add r1,r1,r2
 6b4:	28 62 00 00 	lw r2,(r3+0)
 6b8:	58 22 00 00 	sw (r1+0),r2
}
 6bc:	c3 a0 00 00 	ret

000006c0 <_Z6msleepj>:
	timer0->compare1 = (FCPU/1000)*msec;
 6c0:	78 03 00 00 	mvhi r3,0x0
 6c4:	38 02 c3 50 	mvu r2,0xc350
 6c8:	38 63 0b 78 	ori r3,r3,0xb78
 6cc:	88 22 08 00 	mul r1,r1,r2
 6d0:	28 62 00 00 	lw r2,(r3+0)
 6d4:	28 42 00 00 	lw r2,(r2+0)
 6d8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 6dc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 6e0:	34 01 00 08 	mvi r1,8
 6e4:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 6e8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6ec:	20 21 00 01 	andi r1,r1,0x1
 6f0:	44 20 ff fe 	be r1,r0,6e8 <_Z6msleepj+0x28>
}
 6f4:	c3 a0 00 00 	ret

000006f8 <_Z6nsleepj>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 6f8:	78 03 00 00 	mvhi r3,0x0
 6fc:	38 63 0b 7c 	ori r3,r3,0xb7c
 700:	28 62 00 00 	lw r2,(r3+0)
 704:	08 21 00 32 	muli r1,r1,50
 708:	28 42 00 00 	lw r2,(r2+0)
 70c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 710:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 714:	34 01 00 08 	mvi r1,8
 718:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 71c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 720:	20 21 00 01 	andi r1,r1,0x1
 724:	44 20 ff fe 	be r1,r0,71c <_Z6nsleepj+0x24>
}
 728:	c3 a0 00 00 	ret

0000072c <_Z8tic_initv>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 72c:	78 02 00 00 	mvhi r2,0x0
 730:	38 42 0b 80 	ori r2,r2,0xb80
 734:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 738:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 73c:	34 02 13 88 	mvi r2,5000
 740:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 744:	38 63 0b 84 	ori r3,r3,0xb84
	timer0->compare0 = (FCPU/10000);
 748:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 74c:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 750:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 754:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 758:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 75c:	34 02 00 0e 	mvi r2,14
 760:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 764:	78 02 00 00 	mvhi r2,0x0
 768:	38 42 0b 88 	ori r2,r2,0xb88
 76c:	38 63 0b 8c 	ori r3,r3,0xb8c
 770:	28 41 00 00 	lw r1,(r2+0)
 774:	28 62 00 00 	lw r2,(r3+0)
 778:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 77c:	c3 a0 00 00 	ret

00000780 <_Z9uart_initv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 780:	c3 a0 00 00 	ret

00000784 <_Z12uart_getcharv>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 784:	78 02 00 00 	mvhi r2,0x0
 788:	38 42 0b 90 	ori r2,r2,0xb90
 78c:	28 41 00 00 	lw r1,(r2+0)
 790:	28 22 00 00 	lw r2,(r1+0)
 794:	28 41 00 00 	lw r1,(r2+0)
 798:	20 21 00 01 	andi r1,r1,0x1
 79c:	44 20 ff fe 	be r1,r0,794 <_Z12uart_getcharv+0x10>
	return uart0->rxtx;
 7a0:	28 41 00 04 	lw r1,(r2+4)
}
 7a4:	20 21 00 ff 	andi r1,r1,0xff
 7a8:	c3 a0 00 00 	ret

000007ac <_Z12uart_putcharc>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 7ac:	78 03 00 00 	mvhi r3,0x0
 7b0:	38 63 0b 94 	ori r3,r3,0xb94
 7b4:	28 62 00 00 	lw r2,(r3+0)
{
 7b8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 7bc:	28 43 00 00 	lw r3,(r2+0)
 7c0:	28 62 00 00 	lw r2,(r3+0)
 7c4:	20 42 00 10 	andi r2,r2,0x10
 7c8:	5c 40 ff fe 	bne r2,r0,7c0 <_Z12uart_putcharc+0x14>
	uart0->rxtx = c;
 7cc:	58 61 00 04 	sw (r3+4),r1
}
 7d0:	c3 a0 00 00 	ret

000007d4 <_Z11uart_putstrPc>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7d4:	40 24 00 00 	lbu r4,(r1+0)
 7d8:	44 80 00 0c 	be r4,r0,808 <_Z11uart_putstrPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 7dc:	78 03 00 00 	mvhi r3,0x0
 7e0:	38 63 0b 98 	ori r3,r3,0xb98
 7e4:	28 62 00 00 	lw r2,(r3+0)
 7e8:	28 43 00 00 	lw r3,(r2+0)
 7ec:	28 62 00 00 	lw r2,(r3+0)
 7f0:	20 42 00 10 	andi r2,r2,0x10
 7f4:	5c 40 ff fe 	bne r2,r0,7ec <_Z11uart_putstrPc+0x18>
	uart0->rxtx = c;
 7f8:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 7fc:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 800:	40 24 00 00 	lbu r4,(r1+0)
 804:	5c 80 ff fa 	bne r4,r0,7ec <_Z11uart_putstrPc+0x18>
	}
}
 808:	c3 a0 00 00 	ret

0000080c <_Z8i2c_initv>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 80c:	78 02 00 00 	mvhi r2,0x0
 810:	38 42 0b 9c 	ori r2,r2,0xb9c
 814:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 818:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 81c:	28 21 00 00 	lw r1,(r1+0)
 820:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 824:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 828:	34 02 ff 80 	mvi r2,-128
 82c:	30 22 00 02 	sb (r1+2),r2


}
 830:	c3 a0 00 00 	ret

00000834 <_Z9i2c_writeccc>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 834:	78 05 00 00 	mvhi r5,0x0
 838:	38 a5 0b a0 	ori r5,r5,0xba0
 83c:	28 a4 00 00 	lw r4,(r5+0)
 840:	3c 21 00 02 	sli r1,r1,2
{
 844:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 848:	28 84 00 00 	lw r4,(r4+0)
 84c:	20 21 00 fc 	andi r1,r1,0xfc
{
 850:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 854:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 858:	34 01 ff 90 	mvi r1,-112
 85c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 860:	40 81 00 04 	lbu r1,(r4+4)
 864:	20 21 00 02 	andi r1,r1,0x2
 868:	5c 20 ff fe 	bne r1,r0,860 <_Z9i2c_writeccc+0x2c>
   i2c0->TxRx=addrReg;
 86c:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 870:	34 01 00 10 	mvi r1,16
 874:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 878:	40 81 00 04 	lbu r1,(r4+4)
 87c:	20 21 00 02 	andi r1,r1,0x2
 880:	5c 20 ff fe 	bne r1,r0,878 <_Z9i2c_writeccc+0x44>
   
   i2c0->TxRx=dat;
 884:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 888:	34 01 00 10 	mvi r1,16
 88c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 890:	40 81 00 04 	lbu r1,(r4+4)
 894:	20 21 00 02 	andi r1,r1,0x2
 898:	5c 20 ff fe 	bne r1,r0,890 <_Z9i2c_writeccc+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 89c:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 8a0:	34 01 00 50 	mvi r1,80
 8a4:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 8a8:	40 81 00 04 	lbu r1,(r4+4)
 8ac:	20 21 00 02 	andi r1,r1,0x2
 8b0:	5c 20 ff fe 	bne r1,r0,8a8 <_Z9i2c_writeccc+0x74>
//7

}
 8b4:	c3 a0 00 00 	ret

000008b8 <_ZN3pwm7pwm_selEicb>:
#include "pwm.h"
#include "soc-hw.h"

void pwm::pwm_sel(int b, char c, bool en){
 8b8:	37 9c ff d4 	addi sp,sp,-44
 8bc:	5b 8b 00 2c 	sw (sp+44),r11
 8c0:	5b 8c 00 28 	sw (sp+40),r12
 8c4:	5b 8d 00 24 	sw (sp+36),r13
 8c8:	5b 8e 00 20 	sw (sp+32),r14
 8cc:	5b 8f 00 1c 	sw (sp+28),r15
 8d0:	5b 90 00 18 	sw (sp+24),r16
 8d4:	5b 91 00 14 	sw (sp+20),r17
 8d8:	5b 92 00 10 	sw (sp+16),r18
 8dc:	5b 93 00 0c 	sw (sp+12),r19
 8e0:	5b 94 00 08 	sw (sp+8),r20
 8e4:	5b 9d 00 04 	sw (sp+4),ra
uint8_t Rd=0;
uint8_t Wr=1;
uint32_t dint=1000000;
uint32_t dind;

uint32_t e=b*12;
 8e8:	08 51 00 0c 	muli r17,r2,12
void pwm::pwm_sel(int b, char c, bool en){
 8ec:	20 6c 00 ff 	andi r12,r3,0xff
 8f0:	20 94 00 ff 	andi r20,r4,0xff
uint32_t d=e+8;
 8f4:	36 32 00 08 	addi r18,r17,8
uint32_t t=e+4;
 8f8:	36 33 00 04 	addi r19,r17,4


for (int i=35000; i<200000; i=i+1000)
 8fc:	38 0b 88 b8 	mvu r11,0x88b8
{
	if(c==0x15)
 900:	34 0e 00 15 	mvi r14,21
	{
		dind=i;
		
		uart_putchar(i);
		nsleep(3000000);
 904:	38 10 c6 c0 	mvu r16,0xc6c0
 908:	7a 10 00 2d 	orhi r16,r16,0x2d
for (int i=35000; i<200000; i=i+1000)
 90c:	38 0d 0d 40 	mvu r13,0xd40
 910:	79 ad 00 03 	orhi r13,r13,0x3
	if(c==0x15)
 914:	45 8e 00 27 	be r12,r14,9b0 <_ZN3pwm7pwm_selEicb+0xf8>
for (int i=35000; i<200000; i=i+1000)
 918:	35 6b 03 e8 	addi r11,r11,1000
 91c:	5d 6d ff fe 	bne r11,r13,914 <_ZN3pwm7pwm_selEicb+0x5c>

}



if(c==0x11){
 920:	34 01 00 11 	mvi r1,17
 924:	45 81 00 2d 	be r12,r1,9d8 <_ZN3pwm7pwm_selEicb+0x120>
dind=35000;
}
if(c==0x12){
 928:	34 01 00 12 	mvi r1,18
 92c:	5d 81 00 27 	bne r12,r1,9c8 <_ZN3pwm7pwm_selEicb+0x110>
dind=120000;
 930:	38 0f d4 c0 	mvu r15,0xd4c0
 934:	79 ef 00 01 	orhi r15,r15,0x1
e=e+48;
d=e+8;
t=e+4;
}

pwm_wr(Wr); pwm_rd(Rd);
 938:	34 01 00 01 	mvi r1,1
 93c:	fb ff ff 0f 	calli 578 <_Z6pwm_wrh>
 940:	34 01 00 00 	mvi r1,0
 944:	fb ff ff 00 	calli 544 <_Z6pwm_rdh>
pwm_addr(t); pwm_din(dint);
 948:	ba 60 08 00 	mv r1,r19
 94c:	fb ff ff 05 	calli 560 <_Z8pwm_addrj>
 950:	38 01 42 40 	mvu r1,0x4240
 954:	78 21 00 0f 	orhi r1,r1,0xf
 958:	fb ff ff 0f 	calli 594 <_Z7pwm_dinj>

pwm_addr(d); pwm_din(dind);
 95c:	ba 40 08 00 	mv r1,r18
 960:	fb ff ff 00 	calli 560 <_Z8pwm_addrj>
 964:	b9 e0 08 00 	mv r1,r15
 968:	fb ff ff 0b 	calli 594 <_Z7pwm_dinj>

pwm_addr(e); pwm_din(en);
 96c:	ba 20 08 00 	mv r1,r17
 970:	fb ff fe fc 	calli 560 <_Z8pwm_addrj>
 974:	ba 80 08 00 	mv r1,r20
 978:	fb ff ff 07 	calli 594 <_Z7pwm_dinj>


};
 97c:	2b 9d 00 04 	lw ra,(sp+4)
 980:	2b 8b 00 2c 	lw r11,(sp+44)
 984:	2b 8c 00 28 	lw r12,(sp+40)
 988:	2b 8d 00 24 	lw r13,(sp+36)
 98c:	2b 8e 00 20 	lw r14,(sp+32)
 990:	2b 8f 00 1c 	lw r15,(sp+28)
 994:	2b 90 00 18 	lw r16,(sp+24)
 998:	2b 91 00 14 	lw r17,(sp+20)
 99c:	2b 92 00 10 	lw r18,(sp+16)
 9a0:	2b 93 00 0c 	lw r19,(sp+12)
 9a4:	2b 94 00 08 	lw r20,(sp+8)
 9a8:	37 9c 00 2c 	addi sp,sp,44
 9ac:	c3 a0 00 00 	ret
		uart_putchar(i);
 9b0:	21 61 00 ff 	andi r1,r11,0xff
 9b4:	fb ff ff 7e 	calli 7ac <_Z12uart_putcharc>
		nsleep(3000000);
 9b8:	ba 00 08 00 	mv r1,r16
		dind=i;
 9bc:	b9 60 78 00 	mv r15,r11
		nsleep(3000000);
 9c0:	fb ff ff 4e 	calli 6f8 <_Z6nsleepj>
 9c4:	e3 ff ff d5 	bi 918 <_ZN3pwm7pwm_selEicb+0x60>
if(c==0x10){
 9c8:	34 01 00 10 	mvi r1,16
 9cc:	5d 81 00 05 	bne r12,r1,9e0 <_ZN3pwm7pwm_selEicb+0x128>
dind=200000;
 9d0:	b9 60 78 00 	mv r15,r11
 9d4:	e3 ff ff d9 	bi 938 <_ZN3pwm7pwm_selEicb+0x80>
dind=35000;
 9d8:	38 0f 88 b8 	mvu r15,0x88b8
 9dc:	e3 ff ff d7 	bi 938 <_ZN3pwm7pwm_selEicb+0x80>
if(c==0x13){
 9e0:	34 01 00 13 	mvi r1,19
 9e4:	5d 81 00 07 	bne r12,r1,a00 <_ZN3pwm7pwm_selEicb+0x148>
d=e+8;
 9e8:	36 32 00 38 	addi r18,r17,56
t=e+4;
 9ec:	36 33 00 34 	addi r19,r17,52
dind=180000;
 9f0:	38 0f bf 20 	mvu r15,0xbf20
 9f4:	79 ef 00 02 	orhi r15,r15,0x2
e=e+48;
 9f8:	36 31 00 30 	addi r17,r17,48
 9fc:	e3 ff ff cf 	bi 938 <_ZN3pwm7pwm_selEicb+0x80>
if(c==0x14){
 a00:	34 01 00 14 	mvi r1,20
 a04:	5d 81 ff cd 	bne r12,r1,938 <_ZN3pwm7pwm_selEicb+0x80>
d=e+8;
 a08:	36 32 00 38 	addi r18,r17,56
t=e+4;
 a0c:	36 33 00 34 	addi r19,r17,52
dind=100000;
 a10:	38 0f 86 a0 	mvu r15,0x86a0
 a14:	79 ef 00 01 	orhi r15,r15,0x1
e=e+48;
 a18:	36 31 00 30 	addi r17,r17,48
 a1c:	e3 ff ff c7 	bi 938 <_ZN3pwm7pwm_selEicb+0x80>

00000a20 <_ZN3pwm5brazoEc>:

int pwm::brazo(char d){
 a20:	20 42 00 ff 	andi r2,r2,0xff
int m;
if(d==0x01){m=0;}
if(d==0x02){m=1;}
 a24:	34 03 00 02 	mvi r3,2
 a28:	34 01 00 01 	mvi r1,1
 a2c:	44 43 00 04 	be r2,r3,a3c <_ZN3pwm5brazoEc+0x1c>
if(d==0x03){m=2;}
 a30:	34 03 00 03 	mvi r3,3
 a34:	34 01 00 02 	mvi r1,2
 a38:	5c 43 00 02 	bne r2,r3,a40 <_ZN3pwm5brazoEc+0x20>
if(d==0x04){m=3;}
return m;
};
 a3c:	c3 a0 00 00 	ret
if(d==0x04){m=3;}
 a40:	34 03 00 04 	mvi r3,4
 a44:	34 01 00 00 	mvi r1,0
 a48:	5c 43 ff fd 	bne r2,r3,a3c <_ZN3pwm5brazoEc+0x1c>
 a4c:	34 01 00 03 	mvi r1,3
};
 a50:	c3 a0 00 00 	ret

00000a54 <_ZN5timer6nsleepEi>:
void timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 a54:	78 03 00 00 	mvhi r3,0x0
 a58:	38 63 0b a4 	ori r3,r3,0xba4
 a5c:	28 61 00 00 	lw r1,(r3+0)
 a60:	08 42 00 32 	muli r2,r2,50
 a64:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 a68:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 a6c:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 a70:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 a74:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 a78:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 a7c:	20 21 00 01 	andi r1,r1,0x1
 a80:	44 20 ff fe 	be r1,r0,a78 <_ZN5timer6nsleepEi+0x24>
};
 a84:	c3 a0 00 00 	ret

00000a88 <_ZN4uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 a88:	c3 a0 00 00 	ret

00000a8c <_ZN4uart12uart_getcharEv>:

char uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 a8c:	78 02 00 00 	mvhi r2,0x0
 a90:	38 42 0b a8 	ori r2,r2,0xba8
 a94:	28 41 00 00 	lw r1,(r2+0)
 a98:	28 22 00 00 	lw r2,(r1+0)
 a9c:	28 41 00 00 	lw r1,(r2+0)
 aa0:	20 21 00 01 	andi r1,r1,0x1
 aa4:	44 20 ff fe 	be r1,r0,a9c <_ZN4uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 aa8:	28 41 00 04 	lw r1,(r2+4)
}
 aac:	20 21 00 ff 	andi r1,r1,0xff
 ab0:	c3 a0 00 00 	ret

00000ab4 <_ZN4uart12uart_putcharEc>:

void uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 ab4:	78 03 00 00 	mvhi r3,0x0
 ab8:	38 63 0b ac 	ori r3,r3,0xbac
 abc:	28 61 00 00 	lw r1,(r3+0)
{
 ac0:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 ac4:	28 23 00 00 	lw r3,(r1+0)
 ac8:	28 61 00 00 	lw r1,(r3+0)
 acc:	20 21 00 10 	andi r1,r1,0x10
 ad0:	5c 20 ff fe 	bne r1,r0,ac8 <_ZN4uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 ad4:	58 62 00 04 	sw (r3+4),r2
}
 ad8:	c3 a0 00 00 	ret

00000adc <_ZN4uart11uart_putstrEPc>:

void uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 adc:	40 44 00 00 	lbu r4,(r2+0)
 ae0:	44 80 00 0c 	be r4,r0,b10 <_ZN4uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 ae4:	78 03 00 00 	mvhi r3,0x0
 ae8:	38 63 0b b0 	ori r3,r3,0xbb0
 aec:	28 61 00 00 	lw r1,(r3+0)
 af0:	28 23 00 00 	lw r3,(r1+0)
 af4:	28 61 00 00 	lw r1,(r3+0)
 af8:	20 21 00 10 	andi r1,r1,0x10
 afc:	5c 20 ff fe 	bne r1,r0,af4 <_ZN4uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 b00:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 b04:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 b08:	40 44 00 00 	lbu r4,(r2+0)
 b0c:	5c 80 ff fa 	bne r4,r0,af4 <_ZN4uart11uart_putstrEPc+0x18>
	}
}
 b10:	c3 a0 00 00 	ret

00000b14 <_ZN4uart11uart_getintEv>:

int uart::uart_getint()
{   
	while (! (uart0->ucr & UART_DR)) ;
 b14:	78 02 00 00 	mvhi r2,0x0
 b18:	38 42 0b b4 	ori r2,r2,0xbb4
 b1c:	28 41 00 00 	lw r1,(r2+0)
 b20:	28 22 00 00 	lw r2,(r1+0)
 b24:	28 41 00 00 	lw r1,(r2+0)
 b28:	20 21 00 01 	andi r1,r1,0x1
 b2c:	44 20 ff fe 	be r1,r0,b24 <_ZN4uart11uart_getintEv+0x10>
	return uart0->rxtx;
 b30:	28 41 00 04 	lw r1,(r2+4)
}
 b34:	c3 a0 00 00 	ret
