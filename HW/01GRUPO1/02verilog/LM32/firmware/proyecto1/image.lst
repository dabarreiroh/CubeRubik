
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000748  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000074  00000748  00000748  0000079c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000007bc  000007bc  00000810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000007d4  000007d4  00000828  2**2
                  ALLOC
  4 .debug_frame  00000260  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012c0  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000792  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000003ea  00000000  00000000  000024da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000706  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000051e  00000000  00000000  00003092  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 33 	calli e0 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_scall_handler>:
  c0:	34 00 00 00 	nop
  c4:	34 00 00 00 	nop
  c8:	34 00 00 00 	nop
  cc:	34 00 00 00 	nop
  d0:	34 00 00 00 	nop
  d4:	34 00 00 00 	nop
  d8:	34 00 00 00 	nop
  dc:	34 00 00 00 	nop

000000e0 <_crt0>:
  e0:	78 1c 00 00 	mvhi sp,0x0
  e4:	3b 9c 0f fc 	ori sp,sp,0xffc
  e8:	78 1a 00 00 	mvhi gp,0x0
  ec:	3b 5a 07 e0 	ori gp,gp,0x7e0
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 07 d4 	ori r1,r1,0x7d4
  f8:	78 03 00 00 	mvhi r3,0x0
  fc:	38 63 08 58 	ori r3,r3,0x858

00000100 <.clearBSS>:
 100:	44 23 00 04 	be r1,r3,110 <.callMain>
 104:	58 20 00 00 	sw (r1+0),r0
 108:	34 21 00 04 	addi r1,r1,4
 10c:	e3 ff ff fd 	bi 100 <.clearBSS>

00000110 <.callMain>:
 110:	34 01 00 00 	mvi r1,0
 114:	34 02 00 00 	mvi r2,0
 118:	34 03 00 00 	mvi r3,0
 11c:	f8 00 00 33 	calli 1e8 <main>

00000120 <irq_enable>:
 120:	34 01 00 01 	mvi r1,1
 124:	d0 01 00 00 	wcsr IE,r1
 128:	c3 a0 00 00 	ret

0000012c <irq_disable>:
 12c:	34 01 00 00 	mvi r1,0
 130:	d0 01 00 00 	wcsr IE,r1
 134:	c3 a0 00 00 	ret

00000138 <irq_set_mask>:
 138:	d0 21 00 00 	wcsr IM,r1
 13c:	c3 a0 00 00 	ret

00000140 <irq_get_mask>:
 140:	90 20 08 00 	rcsr r1,IM
 144:	c3 a0 00 00 	ret

00000148 <jump>:
 148:	c0 20 00 00 	b r1

0000014c <halt>:
 14c:	e0 00 00 00 	bi 14c <halt>

00000150 <_save_all>:
 150:	37 9c ff 80 	addi sp,sp,-128
 154:	5b 81 00 04 	sw (sp+4),r1
 158:	5b 82 00 08 	sw (sp+8),r2
 15c:	5b 83 00 0c 	sw (sp+12),r3
 160:	5b 84 00 10 	sw (sp+16),r4
 164:	5b 85 00 14 	sw (sp+20),r5
 168:	5b 86 00 18 	sw (sp+24),r6
 16c:	5b 87 00 1c 	sw (sp+28),r7
 170:	5b 88 00 20 	sw (sp+32),r8
 174:	5b 89 00 24 	sw (sp+36),r9
 178:	5b 8a 00 28 	sw (sp+40),r10
 17c:	5b 9e 00 78 	sw (sp+120),ea
 180:	5b 9f 00 7c 	sw (sp+124),ba
 184:	2b 81 00 80 	lw r1,(sp+128)
 188:	5b 81 00 74 	sw (sp+116),r1
 18c:	bb 80 08 00 	mv r1,sp
 190:	34 21 00 80 	addi r1,r1,128
 194:	5b 81 00 70 	sw (sp+112),r1
 198:	c3 a0 00 00 	ret

0000019c <_restore_all_and_eret>:
 19c:	2b 81 00 04 	lw r1,(sp+4)
 1a0:	2b 82 00 08 	lw r2,(sp+8)
 1a4:	2b 83 00 0c 	lw r3,(sp+12)
 1a8:	2b 84 00 10 	lw r4,(sp+16)
 1ac:	2b 85 00 14 	lw r5,(sp+20)
 1b0:	2b 86 00 18 	lw r6,(sp+24)
 1b4:	2b 87 00 1c 	lw r7,(sp+28)
 1b8:	2b 88 00 20 	lw r8,(sp+32)
 1bc:	2b 89 00 24 	lw r9,(sp+36)
 1c0:	2b 8a 00 28 	lw r10,(sp+40)
 1c4:	2b 9d 00 74 	lw ra,(sp+116)
 1c8:	2b 9e 00 78 	lw ea,(sp+120)
 1cc:	2b 9f 00 7c 	lw ba,(sp+124)
 1d0:	2b 9c 00 70 	lw sp,(sp+112)
 1d4:	c3 c0 00 00 	eret

000001d8 <get_sp>:
 1d8:	bb 80 08 00 	mv r1,sp
 1dc:	c3 a0 00 00 	ret

000001e0 <get_gp>:
 1e0:	bb 40 08 00 	mv r1,gp
 1e4:	c3 a0 00 00 	ret

000001e8 <main>:
#include "pwm.h"
#include "timer.h"
#include "uart.h"


int main(){
 1e8:	37 9c ff f4 	addi sp,sp,-12
 1ec:	5b 9d 00 04 	sw (sp+4),ra
captura.uart_putchar('b');
captura.uart_putchar(c);
captura.uart_putchar(d);
*/

l=captura.uart_getchar();
 1f0:	37 81 00 08 	addi r1,sp,8
 1f4:	f8 00 01 2a 	calli 69c <_ZN4uart12uart_getcharEv>
//{
//letra[i]=captura.uart_getchar();
//letr[i]=captura.uart_getint();
//}

if (l==' '/*&& letra[2]==' '&&letra[3]==' '&&letra[4]==' '*/)
 1f8:	34 02 00 20 	mvi r2,32
 1fc:	44 22 00 05 	be r1,r2,210 <main+0x28>
//motor.pwm_sel(motor.brazo(4), 4, true);

}


}
 200:	34 01 00 00 	mvi r1,0
 204:	2b 9d 00 04 	lw ra,(sp+4)
 208:	37 9c 00 0c 	addi sp,sp,12
 20c:	c3 a0 00 00 	ret
captura.uart_putchar(l);
 210:	37 81 00 08 	addi r1,sp,8
 214:	f8 00 01 2c 	calli 6c4 <_ZN4uart12uart_putcharEc>
 218:	e3 ff ff fa 	bi 200 <main+0x18>

0000021c <_Z8isr_nullv>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 21c:	c3 a0 00 00 	ret

00000220 <_Z7tic_isrv>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 220:	78 01 00 00 	mvhi r1,0x0
 224:	38 21 07 48 	ori r1,r1,0x748
 228:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 22c:	78 04 00 00 	mvhi r4,0x0
 230:	38 84 07 4c 	ori r4,r4,0x74c
 234:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 238:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 23c:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 240:	34 21 00 01 	addi r1,r1,1
 244:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 248:	34 01 00 0e 	mvi r1,14
 24c:	58 61 00 00 	sw (r3+0),r1
}
 250:	c3 a0 00 00 	ret

00000254 <_Z8pwm_readv>:
	return pwm -> d_out;
 254:	78 02 00 00 	mvhi r2,0x0
 258:	38 42 07 50 	ori r2,r2,0x750
 25c:	28 41 00 00 	lw r1,(r2+0)
 260:	28 21 00 00 	lw r1,(r1+0)
 264:	28 21 00 00 	lw r1,(r1+0)
}
 268:	c3 a0 00 00 	ret

0000026c <_Z6pwm_rdh>:
pwm -> rd = vrd;
 26c:	78 03 00 00 	mvhi r3,0x0
 270:	38 63 07 54 	ori r3,r3,0x754
 274:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 278:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 27c:	28 42 00 00 	lw r2,(r2+0)
 280:	30 41 00 04 	sb (r2+4),r1
}
 284:	c3 a0 00 00 	ret

00000288 <_Z8pwm_addrj>:
pwm -> addr = vaddr;
 288:	78 03 00 00 	mvhi r3,0x0
 28c:	38 63 07 58 	ori r3,r3,0x758
 290:	28 62 00 00 	lw r2,(r3+0)
 294:	28 42 00 00 	lw r2,(r2+0)
 298:	58 41 00 08 	sw (r2+8),r1
}
 29c:	c3 a0 00 00 	ret

000002a0 <_Z6pwm_wrh>:
pwm -> wr = vwr;
 2a0:	78 03 00 00 	mvhi r3,0x0
 2a4:	38 63 07 5c 	ori r3,r3,0x75c
 2a8:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 2ac:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 2b0:	28 42 00 00 	lw r2,(r2+0)
 2b4:	30 41 00 0c 	sb (r2+12),r1
}
 2b8:	c3 a0 00 00 	ret

000002bc <_Z7pwm_dinj>:
pwm -> d_in = vd_in;
 2bc:	78 03 00 00 	mvhi r3,0x0
 2c0:	38 63 07 60 	ori r3,r3,0x760
 2c4:	28 62 00 00 	lw r2,(r3+0)
 2c8:	28 42 00 00 	lw r2,(r2+0)
 2cc:	58 41 00 10 	sw (r2+16),r1
}
 2d0:	c3 a0 00 00 	ret

000002d4 <_Z15gpio_config_dirj>:
	gpio0 -> dir = vdir;
 2d4:	78 03 00 00 	mvhi r3,0x0
 2d8:	38 63 07 64 	ori r3,r3,0x764
 2dc:	28 62 00 00 	lw r2,(r3+0)
 2e0:	28 42 00 00 	lw r2,(r2+0)
 2e4:	58 41 00 08 	sw (r2+8),r1
}
 2e8:	c3 a0 00 00 	ret

000002ec <_Z10gpio_writej>:
	gpio0 -> wr = vpins;
 2ec:	78 03 00 00 	mvhi r3,0x0
 2f0:	38 63 07 68 	ori r3,r3,0x768
 2f4:	28 62 00 00 	lw r2,(r3+0)
 2f8:	28 42 00 00 	lw r2,(r2+0)
 2fc:	58 41 00 04 	sw (r2+4),r1
}
 300:	c3 a0 00 00 	ret

00000304 <_Z9gpio_readv>:
	return gpio0 -> rd;
 304:	78 02 00 00 	mvhi r2,0x0
 308:	38 42 07 6c 	ori r2,r2,0x76c
 30c:	28 41 00 00 	lw r1,(r2+0)
 310:	28 21 00 00 	lw r1,(r1+0)
 314:	28 21 00 00 	lw r1,(r1+0)
}
 318:	c3 a0 00 00 	ret

0000031c <_Z11irq_handlerj>:
{
 31c:	37 9c ff f0 	addi sp,sp,-16
 320:	5b 8b 00 10 	sw (sp+16),r11
 324:	5b 8c 00 0c 	sw (sp+12),r12
 328:	5b 8d 00 08 	sw (sp+8),r13
 32c:	5b 9d 00 04 	sw (sp+4),ra
 330:	78 02 00 00 	mvhi r2,0x0
 334:	38 42 07 70 	ori r2,r2,0x770
 338:	28 4b 00 00 	lw r11,(r2+0)
 33c:	b8 20 60 00 	mv r12,r1
 340:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 344:	21 81 00 01 	andi r1,r12,0x1
 348:	44 20 00 03 	be r1,r0,354 <_Z11irq_handlerj+0x38>
 34c:	29 61 00 00 	lw r1,(r11+0)
 350:	d8 20 00 00 	call r1
 354:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 358:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 35c:	5d ab ff fa 	bne r13,r11,344 <_Z11irq_handlerj+0x28>
}
 360:	2b 9d 00 04 	lw ra,(sp+4)
 364:	2b 8b 00 10 	lw r11,(sp+16)
 368:	2b 8c 00 0c 	lw r12,(sp+12)
 36c:	2b 8d 00 08 	lw r13,(sp+8)
 370:	37 9c 00 10 	addi sp,sp,16
 374:	c3 a0 00 00 	ret

00000378 <_Z8isr_initv>:
{
 378:	78 02 00 00 	mvhi r2,0x0
 37c:	38 42 07 74 	ori r2,r2,0x774
 380:	28 41 00 00 	lw r1,(r2+0)
 384:	78 02 00 00 	mvhi r2,0x0
 388:	38 42 07 78 	ori r2,r2,0x778
 38c:	28 43 00 00 	lw r3,(r2+0)
 390:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 394:	58 23 00 00 	sw (r1+0),r3
 398:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 39c:	5c 22 ff fe 	bne r1,r2,394 <_Z8isr_initv+0x1c>
}
 3a0:	c3 a0 00 00 	ret

000003a4 <_Z12isr_registeriPFvvE>:
	isr_table[irq] = isr;
 3a4:	78 04 00 00 	mvhi r4,0x0
 3a8:	38 84 07 7c 	ori r4,r4,0x77c
 3ac:	3c 23 00 02 	sli r3,r1,2
 3b0:	28 81 00 00 	lw r1,(r4+0)
 3b4:	b4 23 08 00 	add r1,r1,r3
 3b8:	58 22 00 00 	sw (r1+0),r2
}
 3bc:	c3 a0 00 00 	ret

000003c0 <_Z14isr_unregisteri>:
	isr_table[irq] = &isr_null;
 3c0:	78 03 00 00 	mvhi r3,0x0
 3c4:	38 63 07 80 	ori r3,r3,0x780
 3c8:	3c 22 00 02 	sli r2,r1,2
 3cc:	28 61 00 00 	lw r1,(r3+0)
 3d0:	78 03 00 00 	mvhi r3,0x0
 3d4:	38 63 07 84 	ori r3,r3,0x784
 3d8:	b4 22 08 00 	add r1,r1,r2
 3dc:	28 62 00 00 	lw r2,(r3+0)
 3e0:	58 22 00 00 	sw (r1+0),r2
}
 3e4:	c3 a0 00 00 	ret

000003e8 <_Z6msleepj>:
	timer0->compare1 = (FCPU/1000)*msec;
 3e8:	78 03 00 00 	mvhi r3,0x0
 3ec:	38 02 c3 50 	mvu r2,0xc350
 3f0:	38 63 07 88 	ori r3,r3,0x788
 3f4:	88 22 08 00 	mul r1,r1,r2
 3f8:	28 62 00 00 	lw r2,(r3+0)
 3fc:	28 42 00 00 	lw r2,(r2+0)
 400:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 404:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 408:	34 01 00 08 	mvi r1,8
 40c:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 410:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 414:	20 21 00 01 	andi r1,r1,0x1
 418:	44 20 ff fe 	be r1,r0,410 <_Z6msleepj+0x28>
}
 41c:	c3 a0 00 00 	ret

00000420 <_Z6nsleepj>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 420:	78 03 00 00 	mvhi r3,0x0
 424:	38 63 07 8c 	ori r3,r3,0x78c
 428:	28 62 00 00 	lw r2,(r3+0)
 42c:	08 21 00 32 	muli r1,r1,50
 430:	28 42 00 00 	lw r2,(r2+0)
 434:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 438:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 43c:	34 01 00 08 	mvi r1,8
 440:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 444:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 448:	20 21 00 01 	andi r1,r1,0x1
 44c:	44 20 ff fe 	be r1,r0,444 <_Z6nsleepj+0x24>
}
 450:	c3 a0 00 00 	ret

00000454 <_Z8tic_initv>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 454:	78 02 00 00 	mvhi r2,0x0
 458:	38 42 07 90 	ori r2,r2,0x790
 45c:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 460:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 464:	34 02 13 88 	mvi r2,5000
 468:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 46c:	38 63 07 94 	ori r3,r3,0x794
	timer0->compare0 = (FCPU/10000);
 470:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 474:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 478:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 47c:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 480:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 484:	34 02 00 0e 	mvi r2,14
 488:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 42 07 98 	ori r2,r2,0x798
 494:	38 63 07 9c 	ori r3,r3,0x79c
 498:	28 41 00 00 	lw r1,(r2+0)
 49c:	28 62 00 00 	lw r2,(r3+0)
 4a0:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 4a4:	c3 a0 00 00 	ret

000004a8 <_Z8i2c_initv>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 4a8:	78 02 00 00 	mvhi r2,0x0
 4ac:	38 42 07 a0 	ori r2,r2,0x7a0
 4b0:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 4b4:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 4b8:	28 21 00 00 	lw r1,(r1+0)
 4bc:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 4c0:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 4c4:	34 02 ff 80 	mvi r2,-128
 4c8:	30 22 00 02 	sb (r1+2),r2


}
 4cc:	c3 a0 00 00 	ret

000004d0 <_Z9i2c_writeccc>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 4d0:	78 05 00 00 	mvhi r5,0x0
 4d4:	38 a5 07 a4 	ori r5,r5,0x7a4
 4d8:	28 a4 00 00 	lw r4,(r5+0)
 4dc:	3c 21 00 02 	sli r1,r1,2
{
 4e0:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 4e4:	28 84 00 00 	lw r4,(r4+0)
 4e8:	20 21 00 fc 	andi r1,r1,0xfc
{
 4ec:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 4f0:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 4f4:	34 01 ff 90 	mvi r1,-112
 4f8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 4fc:	40 81 00 04 	lbu r1,(r4+4)
 500:	20 21 00 02 	andi r1,r1,0x2
 504:	5c 20 ff fe 	bne r1,r0,4fc <_Z9i2c_writeccc+0x2c>
   i2c0->TxRx=addrReg;
 508:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 50c:	34 01 00 10 	mvi r1,16
 510:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 514:	40 81 00 04 	lbu r1,(r4+4)
 518:	20 21 00 02 	andi r1,r1,0x2
 51c:	5c 20 ff fe 	bne r1,r0,514 <_Z9i2c_writeccc+0x44>
   
   i2c0->TxRx=dat;
 520:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 524:	34 01 00 10 	mvi r1,16
 528:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 52c:	40 81 00 04 	lbu r1,(r4+4)
 530:	20 21 00 02 	andi r1,r1,0x2
 534:	5c 20 ff fe 	bne r1,r0,52c <_Z9i2c_writeccc+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 538:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 53c:	34 01 00 50 	mvi r1,80
 540:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 544:	40 81 00 04 	lbu r1,(r4+4)
 548:	20 21 00 02 	andi r1,r1,0x2
 54c:	5c 20 ff fe 	bne r1,r0,544 <_Z9i2c_writeccc+0x74>
//7

}
 550:	c3 a0 00 00 	ret

00000554 <_ZN3pwm7pwm_selEiib>:
#include "pwm.h"
#include "soc-hw.h"

void pwm::pwm_sel(int b, int c, bool en){
 554:	37 9c ff e8 	addi sp,sp,-24
 558:	5b 8b 00 18 	sw (sp+24),r11
 55c:	5b 8c 00 14 	sw (sp+20),r12
 560:	5b 8d 00 10 	sw (sp+16),r13
 564:	5b 8e 00 0c 	sw (sp+12),r14
 568:	5b 8f 00 08 	sw (sp+8),r15
 56c:	5b 9d 00 04 	sw (sp+4),ra
uint8_t Rd=0;
uint8_t Wr=1;
uint32_t dint=1000;
uint32_t dind;

uint32_t e=b*12;
 570:	08 4b 00 0c 	muli r11,r2,12
uint32_t t=e+4;

if(c==1){
dind=35;
}
if(c==2){
 574:	34 01 00 02 	mvi r1,2
void pwm::pwm_sel(int b, int c, bool en){
 578:	20 8f 00 ff 	andi r15,r4,0xff
uint32_t d=e+8;
 57c:	35 6d 00 08 	addi r13,r11,8
uint32_t t=e+4;
 580:	35 6e 00 04 	addi r14,r11,4
dind=130;
 584:	34 0c 00 82 	mvi r12,130
if(c==2){
 588:	44 61 00 04 	be r3,r1,598 <_ZN3pwm7pwm_selEiib+0x44>
}
if(c==3){
 58c:	34 01 00 03 	mvi r1,3
dind=230;
 590:	34 0c 00 e6 	mvi r12,230
if(c==3){
 594:	5c 61 00 19 	bne r3,r1,5f8 <_ZN3pwm7pwm_selEiib+0xa4>
/*
int e [8]={0, 12, 24, 36, 48, 60, 72, 84};
int t [8]={4, 16, 28, 40, 52, 64, 76, 88};
int d [8]={8, 20, 32, 44, 56, 68, 80, 92};
*/
pwm_wr(Wr); pwm_rd(Rd);
 598:	34 01 00 01 	mvi r1,1
 59c:	fb ff ff 41 	calli 2a0 <_Z6pwm_wrh>
 5a0:	34 01 00 00 	mvi r1,0
 5a4:	fb ff ff 32 	calli 26c <_Z6pwm_rdh>
pwm_addr(t); pwm_din(dint);
 5a8:	b9 c0 08 00 	mv r1,r14
 5ac:	fb ff ff 37 	calli 288 <_Z8pwm_addrj>
 5b0:	34 01 03 e8 	mvi r1,1000
 5b4:	fb ff ff 42 	calli 2bc <_Z7pwm_dinj>

pwm_addr(d); pwm_din(dind);
 5b8:	b9 a0 08 00 	mv r1,r13
 5bc:	fb ff ff 33 	calli 288 <_Z8pwm_addrj>
 5c0:	b9 80 08 00 	mv r1,r12
 5c4:	fb ff ff 3e 	calli 2bc <_Z7pwm_dinj>

pwm_addr(e); pwm_din(en);
 5c8:	b9 60 08 00 	mv r1,r11
 5cc:	fb ff ff 2f 	calli 288 <_Z8pwm_addrj>
 5d0:	b9 e0 08 00 	mv r1,r15
 5d4:	fb ff ff 3a 	calli 2bc <_Z7pwm_dinj>


};
 5d8:	2b 9d 00 04 	lw ra,(sp+4)
 5dc:	2b 8b 00 18 	lw r11,(sp+24)
 5e0:	2b 8c 00 14 	lw r12,(sp+20)
 5e4:	2b 8d 00 10 	lw r13,(sp+16)
 5e8:	2b 8e 00 0c 	lw r14,(sp+12)
 5ec:	2b 8f 00 08 	lw r15,(sp+8)
 5f0:	37 9c 00 18 	addi sp,sp,24
 5f4:	c3 a0 00 00 	ret
if(c==4){
 5f8:	34 01 00 04 	mvi r1,4
 5fc:	5c 61 00 06 	bne r3,r1,614 <_ZN3pwm7pwm_selEiib+0xc0>
d=e+8;
 600:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 604:	35 6e 00 34 	addi r14,r11,52
dind=35;
 608:	34 0c 00 23 	mvi r12,35
e=e+48;
 60c:	35 6b 00 30 	addi r11,r11,48
 610:	e3 ff ff e2 	bi 598 <_ZN3pwm7pwm_selEiib+0x44>
if(c==5){
 614:	34 01 00 05 	mvi r1,5
 618:	34 0c 00 23 	mvi r12,35
 61c:	5c 61 ff df 	bne r3,r1,598 <_ZN3pwm7pwm_selEiib+0x44>
d=e+8;
 620:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 624:	35 6e 00 34 	addi r14,r11,52
dind=230;
 628:	34 0c 00 e6 	mvi r12,230
e=e+48;
 62c:	35 6b 00 30 	addi r11,r11,48
 630:	e3 ff ff da 	bi 598 <_ZN3pwm7pwm_selEiib+0x44>

00000634 <_ZN3pwm5brazoEi>:

int pwm::brazo(int d){
int m;
if(d==1){m=0;}
if(d==2){m=1;}
 634:	34 03 00 02 	mvi r3,2
 638:	34 01 00 01 	mvi r1,1
 63c:	44 43 00 04 	be r2,r3,64c <_ZN3pwm5brazoEi+0x18>
if(d==3){m=2;}
 640:	34 03 00 03 	mvi r3,3
 644:	34 01 00 02 	mvi r1,2
 648:	5c 43 00 02 	bne r2,r3,650 <_ZN3pwm5brazoEi+0x1c>
if(d==4){m=3;}
return m;
};
 64c:	c3 a0 00 00 	ret
if(d==4){m=3;}
 650:	34 03 00 04 	mvi r3,4
 654:	34 01 00 00 	mvi r1,0
 658:	5c 43 ff fd 	bne r2,r3,64c <_ZN3pwm5brazoEi+0x18>
 65c:	34 01 00 03 	mvi r1,3
};
 660:	c3 a0 00 00 	ret

00000664 <_ZN5timer6nsleepEi>:
void timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 664:	78 03 00 00 	mvhi r3,0x0
 668:	38 63 07 a8 	ori r3,r3,0x7a8
 66c:	28 61 00 00 	lw r1,(r3+0)
 670:	08 42 00 32 	muli r2,r2,50
 674:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 678:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 67c:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 680:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 684:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 688:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 68c:	20 21 00 01 	andi r1,r1,0x1
 690:	44 20 ff fe 	be r1,r0,688 <_ZN5timer6nsleepEi+0x24>
};
 694:	c3 a0 00 00 	ret

00000698 <_ZN4uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 698:	c3 a0 00 00 	ret

0000069c <_ZN4uart12uart_getcharEv>:

char uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 69c:	78 02 00 00 	mvhi r2,0x0
 6a0:	38 42 07 ac 	ori r2,r2,0x7ac
 6a4:	28 41 00 00 	lw r1,(r2+0)
 6a8:	28 22 00 00 	lw r2,(r1+0)
 6ac:	28 41 00 00 	lw r1,(r2+0)
 6b0:	20 21 00 01 	andi r1,r1,0x1
 6b4:	44 20 ff fe 	be r1,r0,6ac <_ZN4uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 6b8:	28 41 00 04 	lw r1,(r2+4)
}
 6bc:	20 21 00 ff 	andi r1,r1,0xff
 6c0:	c3 a0 00 00 	ret

000006c4 <_ZN4uart12uart_putcharEc>:

void uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6c4:	78 03 00 00 	mvhi r3,0x0
 6c8:	38 63 07 b0 	ori r3,r3,0x7b0
 6cc:	28 61 00 00 	lw r1,(r3+0)
{
 6d0:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 6d4:	28 23 00 00 	lw r3,(r1+0)
 6d8:	28 61 00 00 	lw r1,(r3+0)
 6dc:	20 21 00 10 	andi r1,r1,0x10
 6e0:	5c 20 ff fe 	bne r1,r0,6d8 <_ZN4uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 6e4:	58 62 00 04 	sw (r3+4),r2
}
 6e8:	c3 a0 00 00 	ret

000006ec <_ZN4uart11uart_putstrEPc>:

void uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6ec:	40 44 00 00 	lbu r4,(r2+0)
 6f0:	44 80 00 0c 	be r4,r0,720 <_ZN4uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 6f4:	78 03 00 00 	mvhi r3,0x0
 6f8:	38 63 07 b4 	ori r3,r3,0x7b4
 6fc:	28 61 00 00 	lw r1,(r3+0)
 700:	28 23 00 00 	lw r3,(r1+0)
 704:	28 61 00 00 	lw r1,(r3+0)
 708:	20 21 00 10 	andi r1,r1,0x10
 70c:	5c 20 ff fe 	bne r1,r0,704 <_ZN4uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 710:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 714:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 718:	40 44 00 00 	lbu r4,(r2+0)
 71c:	5c 80 ff fa 	bne r4,r0,704 <_ZN4uart11uart_putstrEPc+0x18>
	}
}
 720:	c3 a0 00 00 	ret

00000724 <_ZN4uart11uart_getintEv>:

int uart::uart_getint()
{   
	while (! (uart0->ucr & UART_DR)) ;
 724:	78 02 00 00 	mvhi r2,0x0
 728:	38 42 07 b8 	ori r2,r2,0x7b8
 72c:	28 41 00 00 	lw r1,(r2+0)
 730:	28 22 00 00 	lw r2,(r1+0)
 734:	28 41 00 00 	lw r1,(r2+0)
 738:	20 21 00 01 	andi r1,r1,0x1
 73c:	44 20 ff fe 	be r1,r0,734 <_ZN4uart11uart_getintEv+0x10>
	return uart0->rxtx;
 740:	28 41 00 04 	lw r1,(r2+4)
}
 744:	c3 a0 00 00 	ret
