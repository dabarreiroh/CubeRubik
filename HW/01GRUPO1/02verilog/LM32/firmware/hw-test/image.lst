
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009dc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000006c  000009dc  000009dc  00000a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000a48  00000a48  00000a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000088  00000a60  00000a60  00000ab4  2**2
                  ALLOC
  4 .debug_frame  000001f8  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001109  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038a  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000044b  00000000  00000000  0000213f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000048  00000000  00000000  0000258a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000711  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f9  00000000  00000000  00002d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 93 	calli 718 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0a 60 	ori gp,gp,0xa60
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a 60 	ori r1,r1,0xa60
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0a e8 	ori r3,r3,0xae8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 e2 	calli 4c4 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <pwm_sel>:
#include "soc-hw.h"
uint8_t Re=0;
void pwm_sel(int sel, int T, int D){
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	b8 20 58 00 	mv r11,r1
 220:	b8 40 68 00 	mv r13,r2
 224:	b8 60 60 00 	mv r12,r3
uint32_t ae3=36;uint32_t at3=40;uint32_t ad3=44;
uint32_t ae4=48;uint32_t at4=52;uint32_t ad4=56;
uint32_t ae5=60;uint32_t at5=64;uint32_t ad5=68;
uint32_t ae6=72;uint32_t at6=76;uint32_t ad6=80;
uint32_t ae7=84;uint32_t at7=88;uint32_t ad7=102;
if (sel==0){
 228:	44 20 00 7e 	be r1,r0,420 <pwm_sel+0x218>

pwm_addr(ae); pwm_din(on);

}

if (sel==1){
 22c:	34 02 00 01 	mvi r2,1
 230:	44 22 00 2d 	be r1,r2,2e4 <pwm_sel+0xdc>

pwm_addr(ae1);pwm_din(on);

}

if (sel==2){
 234:	34 01 00 02 	mvi r1,2
 238:	45 61 00 52 	be r11,r1,380 <pwm_sel+0x178>
pwm_addr(ad2);pwm_din(dind);

pwm_addr(ae2);pwm_din(on);

}
if (sel==3){
 23c:	34 01 00 03 	mvi r1,3
 240:	5d 61 00 89 	bne r11,r1,464 <pwm_sel+0x25c>
pwm_wr(W);pwm_rd(R);
 244:	34 01 00 01 	mvi r1,1
 248:	f8 00 01 15 	calli 69c <pwm_wr>
 24c:	34 01 00 00 	mvi r1,0
 250:	f8 00 01 06 	calli 668 <pwm_rd>

pwm_addr(at3);pwm_din(dint);
 254:	34 01 00 28 	mvi r1,40
 258:	f8 00 01 0b 	calli 684 <pwm_addr>
 25c:	b9 a0 08 00 	mv r1,r13
 260:	f8 00 01 16 	calli 6b8 <pwm_din>

pwm_addr(ad3);pwm_din(dind);
 264:	34 01 00 2c 	mvi r1,44
 268:	f8 00 01 07 	calli 684 <pwm_addr>
 26c:	b9 80 08 00 	mv r1,r12
 270:	f8 00 01 12 	calli 6b8 <pwm_din>

pwm_addr(ae3);pwm_din(on);
 274:	34 01 00 24 	mvi r1,36
 278:	f8 00 01 03 	calli 684 <pwm_addr>
 27c:	34 01 00 01 	mvi r1,1
 280:	f8 00 01 0e 	calli 6b8 <pwm_din>
pwm_addr(ad6);pwm_din(dind);

pwm_addr(ae6);pwm_din(on);

}
if (sel==7){
 284:	34 01 00 07 	mvi r1,7
 288:	5d 61 00 11 	bne r11,r1,2cc <pwm_sel+0xc4>
pwm_wr(W);pwm_rd(R);
 28c:	34 01 00 01 	mvi r1,1
 290:	f8 00 01 03 	calli 69c <pwm_wr>
 294:	34 01 00 00 	mvi r1,0
 298:	f8 00 00 f4 	calli 668 <pwm_rd>

pwm_addr(at7);pwm_din(dint);
 29c:	34 01 00 58 	mvi r1,88
 2a0:	f8 00 00 f9 	calli 684 <pwm_addr>
 2a4:	b9 a0 08 00 	mv r1,r13
 2a8:	f8 00 01 04 	calli 6b8 <pwm_din>

pwm_addr(ad7);pwm_din(dind);
 2ac:	34 01 00 66 	mvi r1,102
 2b0:	f8 00 00 f5 	calli 684 <pwm_addr>
 2b4:	b9 80 08 00 	mv r1,r12
 2b8:	f8 00 01 00 	calli 6b8 <pwm_din>

pwm_addr(ae7);pwm_din(on);
 2bc:	34 01 00 54 	mvi r1,84
 2c0:	f8 00 00 f1 	calli 684 <pwm_addr>
 2c4:	34 01 00 01 	mvi r1,1
 2c8:	f8 00 00 fc 	calli 6b8 <pwm_din>

}
}
 2cc:	2b 9d 00 04 	lw ra,(sp+4)
 2d0:	2b 8b 00 10 	lw r11,(sp+16)
 2d4:	2b 8c 00 0c 	lw r12,(sp+12)
 2d8:	2b 8d 00 08 	lw r13,(sp+8)
 2dc:	37 9c 00 10 	addi sp,sp,16
 2e0:	c3 a0 00 00 	ret
pwm_wr(W);pwm_rd(R);
 2e4:	f8 00 00 ee 	calli 69c <pwm_wr>
 2e8:	34 01 00 00 	mvi r1,0
 2ec:	f8 00 00 df 	calli 668 <pwm_rd>
pwm_addr(at1);pwm_din(dint);
 2f0:	34 01 00 10 	mvi r1,16
 2f4:	f8 00 00 e4 	calli 684 <pwm_addr>
 2f8:	b9 a0 08 00 	mv r1,r13
 2fc:	f8 00 00 ef 	calli 6b8 <pwm_din>
pwm_addr(ad1);pwm_din(dind);
 300:	34 01 00 14 	mvi r1,20
 304:	f8 00 00 e0 	calli 684 <pwm_addr>
 308:	b9 80 08 00 	mv r1,r12
 30c:	f8 00 00 eb 	calli 6b8 <pwm_din>
pwm_addr(ae1);pwm_din(on);
 310:	34 01 00 0c 	mvi r1,12
 314:	f8 00 00 dc 	calli 684 <pwm_addr>
 318:	34 01 00 01 	mvi r1,1
 31c:	f8 00 00 e7 	calli 6b8 <pwm_din>
if (sel==5){
 320:	34 01 00 05 	mvi r1,5
 324:	5d 61 00 27 	bne r11,r1,3c0 <pwm_sel+0x1b8>
pwm_wr(W);pwm_rd(R);
 328:	34 01 00 01 	mvi r1,1
 32c:	f8 00 00 dc 	calli 69c <pwm_wr>
 330:	34 01 00 00 	mvi r1,0
 334:	f8 00 00 cd 	calli 668 <pwm_rd>
pwm_addr(at5);pwm_din(dint);
 338:	34 01 00 40 	mvi r1,64
 33c:	f8 00 00 d2 	calli 684 <pwm_addr>
 340:	b9 a0 08 00 	mv r1,r13
 344:	f8 00 00 dd 	calli 6b8 <pwm_din>
pwm_addr(ad5);pwm_din(dind);
 348:	34 01 00 44 	mvi r1,68
 34c:	f8 00 00 ce 	calli 684 <pwm_addr>
 350:	b9 80 08 00 	mv r1,r12
 354:	f8 00 00 d9 	calli 6b8 <pwm_din>
pwm_addr(ae5);pwm_din(on);
 358:	34 01 00 3c 	mvi r1,60
 35c:	f8 00 00 ca 	calli 684 <pwm_addr>
 360:	34 01 00 01 	mvi r1,1
 364:	f8 00 00 d5 	calli 6b8 <pwm_din>
}
 368:	2b 9d 00 04 	lw ra,(sp+4)
 36c:	2b 8b 00 10 	lw r11,(sp+16)
 370:	2b 8c 00 0c 	lw r12,(sp+12)
 374:	2b 8d 00 08 	lw r13,(sp+8)
 378:	37 9c 00 10 	addi sp,sp,16
 37c:	c3 a0 00 00 	ret
pwm_wr(W);pwm_rd(R);
 380:	34 01 00 01 	mvi r1,1
 384:	f8 00 00 c6 	calli 69c <pwm_wr>
 388:	34 01 00 00 	mvi r1,0
 38c:	f8 00 00 b7 	calli 668 <pwm_rd>
pwm_addr(at2);pwm_din(dint);
 390:	34 01 00 1c 	mvi r1,28
 394:	f8 00 00 bc 	calli 684 <pwm_addr>
 398:	b9 a0 08 00 	mv r1,r13
 39c:	f8 00 00 c7 	calli 6b8 <pwm_din>
pwm_addr(ad2);pwm_din(dind);
 3a0:	34 01 00 20 	mvi r1,32
 3a4:	f8 00 00 b8 	calli 684 <pwm_addr>
 3a8:	b9 80 08 00 	mv r1,r12
 3ac:	f8 00 00 c3 	calli 6b8 <pwm_din>
pwm_addr(ae2);pwm_din(on);
 3b0:	34 01 00 18 	mvi r1,24
 3b4:	f8 00 00 b4 	calli 684 <pwm_addr>
 3b8:	34 01 00 01 	mvi r1,1
 3bc:	f8 00 00 bf 	calli 6b8 <pwm_din>
if (sel==6){
 3c0:	34 01 00 06 	mvi r1,6
 3c4:	5d 61 ff b0 	bne r11,r1,284 <pwm_sel+0x7c>
pwm_wr(W);pwm_rd(R);
 3c8:	34 01 00 01 	mvi r1,1
 3cc:	f8 00 00 b4 	calli 69c <pwm_wr>
 3d0:	34 01 00 00 	mvi r1,0
 3d4:	f8 00 00 a5 	calli 668 <pwm_rd>
pwm_addr(at6);pwm_din(dint);
 3d8:	34 01 00 4c 	mvi r1,76
 3dc:	f8 00 00 aa 	calli 684 <pwm_addr>
 3e0:	b9 a0 08 00 	mv r1,r13
 3e4:	f8 00 00 b5 	calli 6b8 <pwm_din>
pwm_addr(ad6);pwm_din(dind);
 3e8:	34 01 00 50 	mvi r1,80
 3ec:	f8 00 00 a6 	calli 684 <pwm_addr>
 3f0:	b9 80 08 00 	mv r1,r12
 3f4:	f8 00 00 b1 	calli 6b8 <pwm_din>
pwm_addr(ae6);pwm_din(on);
 3f8:	34 01 00 48 	mvi r1,72
 3fc:	f8 00 00 a2 	calli 684 <pwm_addr>
 400:	34 01 00 01 	mvi r1,1
 404:	f8 00 00 ad 	calli 6b8 <pwm_din>
}
 408:	2b 9d 00 04 	lw ra,(sp+4)
 40c:	2b 8b 00 10 	lw r11,(sp+16)
 410:	2b 8c 00 0c 	lw r12,(sp+12)
 414:	2b 8d 00 08 	lw r13,(sp+8)
 418:	37 9c 00 10 	addi sp,sp,16
 41c:	c3 a0 00 00 	ret
pwm_wr(W); pwm_rd(R);
 420:	34 01 00 01 	mvi r1,1
 424:	f8 00 00 9e 	calli 69c <pwm_wr>
 428:	34 01 00 00 	mvi r1,0
 42c:	f8 00 00 8f 	calli 668 <pwm_rd>
pwm_addr(at); pwm_din(dint);
 430:	34 01 00 04 	mvi r1,4
 434:	f8 00 00 94 	calli 684 <pwm_addr>
 438:	b9 a0 08 00 	mv r1,r13
 43c:	f8 00 00 9f 	calli 6b8 <pwm_din>
pwm_addr(ad); pwm_din(dind);
 440:	34 01 00 08 	mvi r1,8
 444:	f8 00 00 90 	calli 684 <pwm_addr>
 448:	b9 80 08 00 	mv r1,r12
 44c:	f8 00 00 9b 	calli 6b8 <pwm_din>
pwm_addr(ae); pwm_din(on);
 450:	34 01 00 00 	mvi r1,0
 454:	f8 00 00 8c 	calli 684 <pwm_addr>
 458:	34 01 00 01 	mvi r1,1
 45c:	f8 00 00 97 	calli 6b8 <pwm_din>
 460:	e3 ff ff b0 	bi 320 <pwm_sel+0x118>
if (sel==4){
 464:	34 01 00 04 	mvi r1,4
 468:	5d 61 ff ae 	bne r11,r1,320 <pwm_sel+0x118>
pwm_wr(W);pwm_rd(R);
 46c:	34 01 00 01 	mvi r1,1
 470:	f8 00 00 8b 	calli 69c <pwm_wr>
 474:	34 01 00 00 	mvi r1,0
 478:	f8 00 00 7c 	calli 668 <pwm_rd>
pwm_addr(at4);pwm_din(dint);
 47c:	34 01 00 34 	mvi r1,52
 480:	f8 00 00 81 	calli 684 <pwm_addr>
 484:	b9 a0 08 00 	mv r1,r13
 488:	f8 00 00 8c 	calli 6b8 <pwm_din>
pwm_addr(ad4);pwm_din(dind);
 48c:	34 01 00 38 	mvi r1,56
 490:	f8 00 00 7d 	calli 684 <pwm_addr>
 494:	b9 80 08 00 	mv r1,r12
 498:	f8 00 00 88 	calli 6b8 <pwm_din>
pwm_addr(ae4);pwm_din(on);
 49c:	34 01 00 30 	mvi r1,48
 4a0:	f8 00 00 79 	calli 684 <pwm_addr>
 4a4:	34 01 00 01 	mvi r1,1
 4a8:	f8 00 00 84 	calli 6b8 <pwm_din>
}
 4ac:	2b 9d 00 04 	lw ra,(sp+4)
 4b0:	2b 8b 00 10 	lw r11,(sp+16)
 4b4:	2b 8c 00 0c 	lw r12,(sp+12)
 4b8:	2b 8d 00 08 	lw r13,(sp+8)
 4bc:	37 9c 00 10 	addi sp,sp,16
 4c0:	c3 a0 00 00 	ret

000004c4 <main>:

int main(){
 4c4:	37 9c ff e8 	addi sp,sp,-24
 4c8:	5b 8b 00 18 	sw (sp+24),r11
 4cc:	5b 8c 00 14 	sw (sp+20),r12
 4d0:	5b 8d 00 10 	sw (sp+16),r13
 4d4:	5b 8e 00 0c 	sw (sp+12),r14
 4d8:	5b 8f 00 08 	sw (sp+8),r15
 4dc:	5b 9d 00 04 	sw (sp+4),ra

pwm_sel(0, 1000000, 200000);
 4e0:	38 0b 42 40 	mvu r11,0x4240
 4e4:	79 6b 00 0f 	orhi r11,r11,0xf
 4e8:	38 0f 0d 40 	mvu r15,0xd40
 4ec:	79 ef 00 03 	orhi r15,r15,0x3
 4f0:	b9 e0 18 00 	mv r3,r15
 4f4:	b9 60 10 00 	mv r2,r11
 4f8:	34 01 00 00 	mvi r1,0
 4fc:	fb ff ff 43 	calli 208 <pwm_sel>
pwm_sel(1, 1000000, 130000);
 500:	38 0e fb d0 	mvu r14,0xfbd0
 504:	79 ce 00 01 	orhi r14,r14,0x1
 508:	b9 c0 18 00 	mv r3,r14
 50c:	b9 60 10 00 	mv r2,r11
 510:	34 01 00 01 	mvi r1,1
nsleep(3000000);
 514:	38 0c c6 c0 	mvu r12,0xc6c0
 518:	79 8c 00 2d 	orhi r12,r12,0x2d
pwm_sel(1, 1000000, 130000);
 51c:	fb ff ff 3b 	calli 208 <pwm_sel>
nsleep(3000000);
 520:	b9 80 08 00 	mv r1,r12
pwm_sel(0, 1000000, 35000);
 524:	38 0d 88 b8 	mvu r13,0x88b8
nsleep(3000000);
 528:	f8 00 00 bd 	calli 81c <nsleep>
pwm_sel(0, 1000000, 35000);
 52c:	b9 a0 18 00 	mv r3,r13
 530:	b9 60 10 00 	mv r2,r11
 534:	34 01 00 00 	mvi r1,0
 538:	fb ff ff 34 	calli 208 <pwm_sel>
pwm_sel(1, 1000000, 35000);
 53c:	b9 a0 18 00 	mv r3,r13
 540:	b9 60 10 00 	mv r2,r11
 544:	34 01 00 01 	mvi r1,1
 548:	fb ff ff 30 	calli 208 <pwm_sel>
nsleep(3000000);
 54c:	b9 80 08 00 	mv r1,r12
 550:	f8 00 00 b3 	calli 81c <nsleep>
pwm_sel(0, 1000000, 200000);
 554:	b9 e0 18 00 	mv r3,r15
 558:	b9 60 10 00 	mv r2,r11
 55c:	34 01 00 00 	mvi r1,0
 560:	fb ff ff 2a 	calli 208 <pwm_sel>
pwm_sel(1, 1000000, 130000);
 564:	b9 c0 18 00 	mv r3,r14
 568:	b9 60 10 00 	mv r2,r11
 56c:	34 01 00 01 	mvi r1,1
 570:	fb ff ff 26 	calli 208 <pwm_sel>
nsleep(3000000);
 574:	b9 80 08 00 	mv r1,r12
 578:	f8 00 00 a9 	calli 81c <nsleep>
pwm_sel(0, 1000000, 35000);
 57c:	b9 a0 18 00 	mv r3,r13
 580:	b9 60 10 00 	mv r2,r11
 584:	34 01 00 00 	mvi r1,0
 588:	fb ff ff 20 	calli 208 <pwm_sel>
pwm_sel(1, 1000000, 35000);
 58c:	b9 a0 18 00 	mv r3,r13
 590:	b9 60 10 00 	mv r2,r11
 594:	34 01 00 01 	mvi r1,1
 598:	fb ff ff 1c 	calli 208 <pwm_sel>
nsleep(3000000);
 59c:	b9 80 08 00 	mv r1,r12
 5a0:	f8 00 00 9f 	calli 81c <nsleep>
pwm_sel(0, 1000000, 200000);
 5a4:	b9 e0 18 00 	mv r3,r15
 5a8:	b9 60 10 00 	mv r2,r11
 5ac:	34 01 00 00 	mvi r1,0
 5b0:	fb ff ff 16 	calli 208 <pwm_sel>
pwm_sel(1, 1000000, 130000);
 5b4:	b9 c0 18 00 	mv r3,r14
 5b8:	b9 60 10 00 	mv r2,r11
 5bc:	34 01 00 01 	mvi r1,1
 5c0:	fb ff ff 12 	calli 208 <pwm_sel>
nsleep(3000000);
 5c4:	b9 80 08 00 	mv r1,r12
 5c8:	f8 00 00 95 	calli 81c <nsleep>
pwm_sel(0, 1000000, 35000);
 5cc:	b9 a0 18 00 	mv r3,r13
 5d0:	b9 60 10 00 	mv r2,r11
 5d4:	34 01 00 00 	mvi r1,0
 5d8:	fb ff ff 0c 	calli 208 <pwm_sel>
pwm_sel(1, 1000000, 35000);
 5dc:	b9 a0 18 00 	mv r3,r13
 5e0:	b9 60 10 00 	mv r2,r11
 5e4:	34 01 00 01 	mvi r1,1
 5e8:	fb ff ff 08 	calli 208 <pwm_sel>
nsleep(3000000); 
 5ec:	b9 80 08 00 	mv r1,r12
 5f0:	f8 00 00 8b 	calli 81c <nsleep>

 	
}
 5f4:	34 01 00 00 	mvi r1,0
 5f8:	2b 9d 00 04 	lw ra,(sp+4)
 5fc:	2b 8b 00 18 	lw r11,(sp+24)
 600:	2b 8c 00 14 	lw r12,(sp+20)
 604:	2b 8d 00 10 	lw r13,(sp+16)
 608:	2b 8e 00 0c 	lw r14,(sp+12)
 60c:	2b 8f 00 08 	lw r15,(sp+8)
 610:	37 9c 00 18 	addi sp,sp,24
 614:	c3 a0 00 00 	ret

00000618 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 618:	78 01 00 00 	mvhi r1,0x0
 61c:	38 21 09 dc 	ori r1,r1,0x9dc
 620:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 624:	78 04 00 00 	mvhi r4,0x0
 628:	38 84 09 e0 	ori r4,r4,0x9e0
 62c:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 630:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 634:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 638:	34 21 00 01 	addi r1,r1,1
 63c:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 640:	34 01 00 0e 	mvi r1,14
 644:	58 61 00 00 	sw (r3+0),r1
}
 648:	c3 a0 00 00 	ret

0000064c <isr_null>:
 64c:	c3 a0 00 00 	ret

00000650 <pwm_read>:
	return pwm -> d_out;
 650:	78 02 00 00 	mvhi r2,0x0
 654:	38 42 09 e4 	ori r2,r2,0x9e4
 658:	28 41 00 00 	lw r1,(r2+0)
 65c:	28 21 00 00 	lw r1,(r1+0)
 660:	28 21 00 00 	lw r1,(r1+0)
}
 664:	c3 a0 00 00 	ret

00000668 <pwm_rd>:
pwm -> rd = vrd;
 668:	78 03 00 00 	mvhi r3,0x0
 66c:	38 63 09 e8 	ori r3,r3,0x9e8
 670:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 674:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 678:	28 42 00 00 	lw r2,(r2+0)
 67c:	30 41 00 04 	sb (r2+4),r1
}
 680:	c3 a0 00 00 	ret

00000684 <pwm_addr>:
pwm -> addr = vaddr;
 684:	78 03 00 00 	mvhi r3,0x0
 688:	38 63 09 ec 	ori r3,r3,0x9ec
 68c:	28 62 00 00 	lw r2,(r3+0)
 690:	28 42 00 00 	lw r2,(r2+0)
 694:	58 41 00 08 	sw (r2+8),r1
}
 698:	c3 a0 00 00 	ret

0000069c <pwm_wr>:
pwm -> wr = vwr;
 69c:	78 03 00 00 	mvhi r3,0x0
 6a0:	38 63 09 f0 	ori r3,r3,0x9f0
 6a4:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 6a8:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 6ac:	28 42 00 00 	lw r2,(r2+0)
 6b0:	30 41 00 0c 	sb (r2+12),r1
}
 6b4:	c3 a0 00 00 	ret

000006b8 <pwm_din>:
pwm -> d_in = vd_in;
 6b8:	78 03 00 00 	mvhi r3,0x0
 6bc:	38 63 09 f4 	ori r3,r3,0x9f4
 6c0:	28 62 00 00 	lw r2,(r3+0)
 6c4:	28 42 00 00 	lw r2,(r2+0)
 6c8:	58 41 00 10 	sw (r2+16),r1
}
 6cc:	c3 a0 00 00 	ret

000006d0 <gpio_config_dir>:
	gpio0 -> dir = vdir;
 6d0:	78 03 00 00 	mvhi r3,0x0
 6d4:	38 63 09 f8 	ori r3,r3,0x9f8
 6d8:	28 62 00 00 	lw r2,(r3+0)
 6dc:	28 42 00 00 	lw r2,(r2+0)
 6e0:	58 41 00 08 	sw (r2+8),r1
}
 6e4:	c3 a0 00 00 	ret

000006e8 <gpio_write>:
	gpio0 -> wr = vpins;
 6e8:	78 03 00 00 	mvhi r3,0x0
 6ec:	38 63 09 fc 	ori r3,r3,0x9fc
 6f0:	28 62 00 00 	lw r2,(r3+0)
 6f4:	28 42 00 00 	lw r2,(r2+0)
 6f8:	58 41 00 04 	sw (r2+4),r1
}
 6fc:	c3 a0 00 00 	ret

00000700 <gpio_read>:
	return gpio0 -> rd;
 700:	78 02 00 00 	mvhi r2,0x0
 704:	38 42 0a 00 	ori r2,r2,0xa00
 708:	28 41 00 00 	lw r1,(r2+0)
 70c:	28 21 00 00 	lw r1,(r1+0)
 710:	28 21 00 00 	lw r1,(r1+0)
}
 714:	c3 a0 00 00 	ret

00000718 <irq_handler>:
{
 718:	37 9c ff f0 	addi sp,sp,-16
 71c:	5b 8b 00 10 	sw (sp+16),r11
 720:	5b 8c 00 0c 	sw (sp+12),r12
 724:	5b 8d 00 08 	sw (sp+8),r13
 728:	5b 9d 00 04 	sw (sp+4),ra
 72c:	78 02 00 00 	mvhi r2,0x0
 730:	38 42 0a 04 	ori r2,r2,0xa04
 734:	28 4b 00 00 	lw r11,(r2+0)
 738:	b8 20 60 00 	mv r12,r1
 73c:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 740:	21 81 00 01 	andi r1,r12,0x1
 744:	44 20 00 03 	be r1,r0,750 <irq_handler+0x38>
 748:	29 61 00 00 	lw r1,(r11+0)
 74c:	d8 20 00 00 	call r1
 750:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 754:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 758:	5d ab ff fa 	bne r13,r11,740 <irq_handler+0x28>
}
 75c:	2b 9d 00 04 	lw ra,(sp+4)
 760:	2b 8b 00 10 	lw r11,(sp+16)
 764:	2b 8c 00 0c 	lw r12,(sp+12)
 768:	2b 8d 00 08 	lw r13,(sp+8)
 76c:	37 9c 00 10 	addi sp,sp,16
 770:	c3 a0 00 00 	ret

00000774 <isr_init>:
{
 774:	78 02 00 00 	mvhi r2,0x0
 778:	38 42 0a 08 	ori r2,r2,0xa08
 77c:	28 41 00 00 	lw r1,(r2+0)
 780:	78 02 00 00 	mvhi r2,0x0
 784:	38 42 0a 0c 	ori r2,r2,0xa0c
 788:	28 43 00 00 	lw r3,(r2+0)
 78c:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 790:	58 23 00 00 	sw (r1+0),r3
 794:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 798:	5c 22 ff fe 	bne r1,r2,790 <isr_init+0x1c>
}
 79c:	c3 a0 00 00 	ret

000007a0 <isr_register>:
	isr_table[irq] = isr;
 7a0:	78 04 00 00 	mvhi r4,0x0
 7a4:	38 84 0a 10 	ori r4,r4,0xa10
 7a8:	3c 23 00 02 	sli r3,r1,2
 7ac:	28 81 00 00 	lw r1,(r4+0)
 7b0:	b4 23 08 00 	add r1,r1,r3
 7b4:	58 22 00 00 	sw (r1+0),r2
}
 7b8:	c3 a0 00 00 	ret

000007bc <isr_unregister>:
	isr_table[irq] = &isr_null;
 7bc:	78 03 00 00 	mvhi r3,0x0
 7c0:	38 63 0a 14 	ori r3,r3,0xa14
 7c4:	3c 22 00 02 	sli r2,r1,2
 7c8:	28 61 00 00 	lw r1,(r3+0)
 7cc:	78 03 00 00 	mvhi r3,0x0
 7d0:	38 63 0a 18 	ori r3,r3,0xa18
 7d4:	b4 22 08 00 	add r1,r1,r2
 7d8:	28 62 00 00 	lw r2,(r3+0)
 7dc:	58 22 00 00 	sw (r1+0),r2
}
 7e0:	c3 a0 00 00 	ret

000007e4 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 7e4:	78 03 00 00 	mvhi r3,0x0
 7e8:	38 02 c3 50 	mvu r2,0xc350
 7ec:	38 63 0a 1c 	ori r3,r3,0xa1c
 7f0:	88 22 08 00 	mul r1,r1,r2
 7f4:	28 62 00 00 	lw r2,(r3+0)
 7f8:	28 42 00 00 	lw r2,(r2+0)
 7fc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 800:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 804:	34 01 00 08 	mvi r1,8
 808:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 80c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 810:	20 21 00 01 	andi r1,r1,0x1
 814:	44 20 ff fe 	be r1,r0,80c <msleep+0x28>
}
 818:	c3 a0 00 00 	ret

0000081c <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 81c:	78 03 00 00 	mvhi r3,0x0
 820:	38 63 0a 20 	ori r3,r3,0xa20
 824:	28 62 00 00 	lw r2,(r3+0)
 828:	08 21 00 32 	muli r1,r1,50
 82c:	28 42 00 00 	lw r2,(r2+0)
 830:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 834:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 838:	34 01 00 08 	mvi r1,8
 83c:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 840:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 844:	20 21 00 01 	andi r1,r1,0x1
 848:	44 20 ff fe 	be r1,r0,840 <nsleep+0x24>
}
 84c:	c3 a0 00 00 	ret

00000850 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 850:	78 02 00 00 	mvhi r2,0x0
 854:	38 42 0a 24 	ori r2,r2,0xa24
 858:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 85c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 860:	34 02 13 88 	mvi r2,5000
 864:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 868:	38 63 0a 28 	ori r3,r3,0xa28
	timer0->compare0 = (FCPU/10000);
 86c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 870:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 874:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 878:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 87c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 880:	34 02 00 0e 	mvi r2,14
 884:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 888:	78 02 00 00 	mvhi r2,0x0
 88c:	38 42 0a 2c 	ori r2,r2,0xa2c
 890:	38 63 0a 30 	ori r3,r3,0xa30
 894:	28 41 00 00 	lw r1,(r2+0)
 898:	28 62 00 00 	lw r2,(r3+0)
 89c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 8a0:	c3 a0 00 00 	ret

000008a4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 8a4:	c3 a0 00 00 	ret

000008a8 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 8a8:	78 02 00 00 	mvhi r2,0x0
 8ac:	38 42 0a 34 	ori r2,r2,0xa34
 8b0:	28 41 00 00 	lw r1,(r2+0)
 8b4:	28 22 00 00 	lw r2,(r1+0)
 8b8:	28 41 00 00 	lw r1,(r2+0)
 8bc:	20 21 00 01 	andi r1,r1,0x1
 8c0:	44 20 ff fe 	be r1,r0,8b8 <uart_getchar+0x10>
	return uart0->rxtx;
 8c4:	28 41 00 04 	lw r1,(r2+4)
}
 8c8:	20 21 00 ff 	andi r1,r1,0xff
 8cc:	c3 a0 00 00 	ret

000008d0 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 8d0:	78 03 00 00 	mvhi r3,0x0
 8d4:	38 63 0a 38 	ori r3,r3,0xa38
 8d8:	28 62 00 00 	lw r2,(r3+0)
{
 8dc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 8e0:	28 43 00 00 	lw r3,(r2+0)
 8e4:	28 62 00 00 	lw r2,(r3+0)
 8e8:	20 42 00 10 	andi r2,r2,0x10
 8ec:	5c 40 ff fe 	bne r2,r0,8e4 <uart_putchar+0x14>
	uart0->rxtx = c;
 8f0:	58 61 00 04 	sw (r3+4),r1
}
 8f4:	c3 a0 00 00 	ret

000008f8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 8f8:	40 24 00 00 	lbu r4,(r1+0)
 8fc:	44 80 00 0c 	be r4,r0,92c <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 900:	78 03 00 00 	mvhi r3,0x0
 904:	38 63 0a 3c 	ori r3,r3,0xa3c
 908:	28 62 00 00 	lw r2,(r3+0)
 90c:	28 43 00 00 	lw r3,(r2+0)
 910:	28 62 00 00 	lw r2,(r3+0)
 914:	20 42 00 10 	andi r2,r2,0x10
 918:	5c 40 ff fe 	bne r2,r0,910 <uart_putstr+0x18>
	uart0->rxtx = c;
 91c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 920:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 924:	40 24 00 00 	lbu r4,(r1+0)
 928:	5c 80 ff fa 	bne r4,r0,910 <uart_putstr+0x18>
	}
}
 92c:	c3 a0 00 00 	ret

00000930 <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 930:	78 02 00 00 	mvhi r2,0x0
 934:	38 42 0a 40 	ori r2,r2,0xa40
 938:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 93c:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 940:	28 21 00 00 	lw r1,(r1+0)
 944:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 948:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 94c:	34 02 ff 80 	mvi r2,-128
 950:	30 22 00 02 	sb (r1+2),r2


}
 954:	c3 a0 00 00 	ret

00000958 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 958:	78 05 00 00 	mvhi r5,0x0
 95c:	38 a5 0a 44 	ori r5,r5,0xa44
 960:	28 a4 00 00 	lw r4,(r5+0)
 964:	3c 21 00 02 	sli r1,r1,2
{
 968:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 96c:	28 84 00 00 	lw r4,(r4+0)
 970:	20 21 00 fc 	andi r1,r1,0xfc
{
 974:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 978:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 97c:	34 01 ff 90 	mvi r1,-112
 980:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 984:	40 81 00 04 	lbu r1,(r4+4)
 988:	20 21 00 02 	andi r1,r1,0x2
 98c:	5c 20 ff fe 	bne r1,r0,984 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 990:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 994:	34 01 00 10 	mvi r1,16
 998:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 99c:	40 81 00 04 	lbu r1,(r4+4)
 9a0:	20 21 00 02 	andi r1,r1,0x2
 9a4:	5c 20 ff fe 	bne r1,r0,99c <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 9a8:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 9ac:	34 01 00 10 	mvi r1,16
 9b0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 9b4:	40 81 00 04 	lbu r1,(r4+4)
 9b8:	20 21 00 02 	andi r1,r1,0x2
 9bc:	5c 20 ff fe 	bne r1,r0,9b4 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 9c0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 9c4:	34 01 00 50 	mvi r1,80
 9c8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 9cc:	40 81 00 04 	lbu r1,(r4+4)
 9d0:	20 21 00 02 	andi r1,r1,0x2
 9d4:	5c 20 ff fe 	bne r1,r0,9cc <i2c_write+0x74>
//7

}
 9d8:	c3 a0 00 00 	ret
