
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000006c  0000095c  0000095c  000009b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000009c8  000009c8  00000a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000088  000009e0  000009e0  00000a34  2**2
                  ALLOC
  4 .debug_frame  000001f0  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001096  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038a  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000044b  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000048  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000006d9  00000000  00000000  00002507  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f9  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00002ed9  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 73 	calli 698 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 e0 	ori gp,gp,0x9e0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 e0 	ori r1,r1,0x9e0
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0a 68 	ori r3,r3,0xa68

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 e2 	calli 4c4 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <pwm_sel>:
#include "soc-hw.h"
uint8_t Re=0;
void pwm_sel(int sel, int T, int D){
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	b8 20 58 00 	mv r11,r1
 220:	b8 40 68 00 	mv r13,r2
 224:	b8 60 60 00 	mv r12,r3
uint32_t ae3=36;uint32_t at3=40;uint32_t ad3=44;
uint32_t ae4=48;uint32_t at4=52;uint32_t ad4=56;
uint32_t ae5=60;uint32_t at5=64;uint32_t ad5=68;
uint32_t ae6=72;uint32_t at6=76;uint32_t ad6=80;
uint32_t ae7=84;uint32_t at7=88;uint32_t ad7=102;
if (sel==0){
 228:	44 20 00 7e 	be r1,r0,420 <pwm_sel+0x218>

pwm_addr(ae); pwm_din(on);

}

if (sel==1){
 22c:	34 02 00 01 	mvi r2,1
 230:	44 22 00 2d 	be r1,r2,2e4 <pwm_sel+0xdc>

pwm_addr(ae1);pwm_din(on);

}

if (sel==2){
 234:	34 01 00 02 	mvi r1,2
 238:	45 61 00 52 	be r11,r1,380 <pwm_sel+0x178>
pwm_addr(ad2);pwm_din(dind);

pwm_addr(ae2);pwm_din(on);

}
if (sel==3){
 23c:	34 01 00 03 	mvi r1,3
 240:	5d 61 00 89 	bne r11,r1,464 <pwm_sel+0x25c>
pwm_wr(W);pwm_rd(R);
 244:	34 01 00 01 	mvi r1,1
 248:	f8 00 00 f5 	calli 61c <pwm_wr>
 24c:	34 01 00 00 	mvi r1,0
 250:	f8 00 00 e6 	calli 5e8 <pwm_rd>

pwm_addr(at3);pwm_din(dint);
 254:	34 01 00 28 	mvi r1,40
 258:	f8 00 00 eb 	calli 604 <pwm_addr>
 25c:	b9 a0 08 00 	mv r1,r13
 260:	f8 00 00 f6 	calli 638 <pwm_din>

pwm_addr(ad3);pwm_din(dind);
 264:	34 01 00 2c 	mvi r1,44
 268:	f8 00 00 e7 	calli 604 <pwm_addr>
 26c:	b9 80 08 00 	mv r1,r12
 270:	f8 00 00 f2 	calli 638 <pwm_din>

pwm_addr(ae3);pwm_din(on);
 274:	34 01 00 24 	mvi r1,36
 278:	f8 00 00 e3 	calli 604 <pwm_addr>
 27c:	34 01 00 01 	mvi r1,1
 280:	f8 00 00 ee 	calli 638 <pwm_din>
pwm_addr(ad6);pwm_din(dind);

pwm_addr(ae6);pwm_din(on);

}
if (sel==7){
 284:	34 01 00 07 	mvi r1,7
 288:	5d 61 00 11 	bne r11,r1,2cc <pwm_sel+0xc4>
pwm_wr(W);pwm_rd(R);
 28c:	34 01 00 01 	mvi r1,1
 290:	f8 00 00 e3 	calli 61c <pwm_wr>
 294:	34 01 00 00 	mvi r1,0
 298:	f8 00 00 d4 	calli 5e8 <pwm_rd>

pwm_addr(at7);pwm_din(dint);
 29c:	34 01 00 58 	mvi r1,88
 2a0:	f8 00 00 d9 	calli 604 <pwm_addr>
 2a4:	b9 a0 08 00 	mv r1,r13
 2a8:	f8 00 00 e4 	calli 638 <pwm_din>

pwm_addr(ad7);pwm_din(dind);
 2ac:	34 01 00 66 	mvi r1,102
 2b0:	f8 00 00 d5 	calli 604 <pwm_addr>
 2b4:	b9 80 08 00 	mv r1,r12
 2b8:	f8 00 00 e0 	calli 638 <pwm_din>

pwm_addr(ae7);pwm_din(on);
 2bc:	34 01 00 54 	mvi r1,84
 2c0:	f8 00 00 d1 	calli 604 <pwm_addr>
 2c4:	34 01 00 01 	mvi r1,1
 2c8:	f8 00 00 dc 	calli 638 <pwm_din>

}
}
 2cc:	2b 9d 00 04 	lw ra,(sp+4)
 2d0:	2b 8b 00 10 	lw r11,(sp+16)
 2d4:	2b 8c 00 0c 	lw r12,(sp+12)
 2d8:	2b 8d 00 08 	lw r13,(sp+8)
 2dc:	37 9c 00 10 	addi sp,sp,16
 2e0:	c3 a0 00 00 	ret
pwm_wr(W);pwm_rd(R);
 2e4:	f8 00 00 ce 	calli 61c <pwm_wr>
 2e8:	34 01 00 00 	mvi r1,0
 2ec:	f8 00 00 bf 	calli 5e8 <pwm_rd>
pwm_addr(at1);pwm_din(dint);
 2f0:	34 01 00 10 	mvi r1,16
 2f4:	f8 00 00 c4 	calli 604 <pwm_addr>
 2f8:	b9 a0 08 00 	mv r1,r13
 2fc:	f8 00 00 cf 	calli 638 <pwm_din>
pwm_addr(ad1);pwm_din(dind);
 300:	34 01 00 14 	mvi r1,20
 304:	f8 00 00 c0 	calli 604 <pwm_addr>
 308:	b9 80 08 00 	mv r1,r12
 30c:	f8 00 00 cb 	calli 638 <pwm_din>
pwm_addr(ae1);pwm_din(on);
 310:	34 01 00 0c 	mvi r1,12
 314:	f8 00 00 bc 	calli 604 <pwm_addr>
 318:	34 01 00 01 	mvi r1,1
 31c:	f8 00 00 c7 	calli 638 <pwm_din>
if (sel==5){
 320:	34 01 00 05 	mvi r1,5
 324:	5d 61 00 27 	bne r11,r1,3c0 <pwm_sel+0x1b8>
pwm_wr(W);pwm_rd(R);
 328:	34 01 00 01 	mvi r1,1
 32c:	f8 00 00 bc 	calli 61c <pwm_wr>
 330:	34 01 00 00 	mvi r1,0
 334:	f8 00 00 ad 	calli 5e8 <pwm_rd>
pwm_addr(at5);pwm_din(dint);
 338:	34 01 00 40 	mvi r1,64
 33c:	f8 00 00 b2 	calli 604 <pwm_addr>
 340:	b9 a0 08 00 	mv r1,r13
 344:	f8 00 00 bd 	calli 638 <pwm_din>
pwm_addr(ad5);pwm_din(dind);
 348:	34 01 00 44 	mvi r1,68
 34c:	f8 00 00 ae 	calli 604 <pwm_addr>
 350:	b9 80 08 00 	mv r1,r12
 354:	f8 00 00 b9 	calli 638 <pwm_din>
pwm_addr(ae5);pwm_din(on);
 358:	34 01 00 3c 	mvi r1,60
 35c:	f8 00 00 aa 	calli 604 <pwm_addr>
 360:	34 01 00 01 	mvi r1,1
 364:	f8 00 00 b5 	calli 638 <pwm_din>
}
 368:	2b 9d 00 04 	lw ra,(sp+4)
 36c:	2b 8b 00 10 	lw r11,(sp+16)
 370:	2b 8c 00 0c 	lw r12,(sp+12)
 374:	2b 8d 00 08 	lw r13,(sp+8)
 378:	37 9c 00 10 	addi sp,sp,16
 37c:	c3 a0 00 00 	ret
pwm_wr(W);pwm_rd(R);
 380:	34 01 00 01 	mvi r1,1
 384:	f8 00 00 a6 	calli 61c <pwm_wr>
 388:	34 01 00 00 	mvi r1,0
 38c:	f8 00 00 97 	calli 5e8 <pwm_rd>
pwm_addr(at2);pwm_din(dint);
 390:	34 01 00 1c 	mvi r1,28
 394:	f8 00 00 9c 	calli 604 <pwm_addr>
 398:	b9 a0 08 00 	mv r1,r13
 39c:	f8 00 00 a7 	calli 638 <pwm_din>
pwm_addr(ad2);pwm_din(dind);
 3a0:	34 01 00 20 	mvi r1,32
 3a4:	f8 00 00 98 	calli 604 <pwm_addr>
 3a8:	b9 80 08 00 	mv r1,r12
 3ac:	f8 00 00 a3 	calli 638 <pwm_din>
pwm_addr(ae2);pwm_din(on);
 3b0:	34 01 00 18 	mvi r1,24
 3b4:	f8 00 00 94 	calli 604 <pwm_addr>
 3b8:	34 01 00 01 	mvi r1,1
 3bc:	f8 00 00 9f 	calli 638 <pwm_din>
if (sel==6){
 3c0:	34 01 00 06 	mvi r1,6
 3c4:	5d 61 ff b0 	bne r11,r1,284 <pwm_sel+0x7c>
pwm_wr(W);pwm_rd(R);
 3c8:	34 01 00 01 	mvi r1,1
 3cc:	f8 00 00 94 	calli 61c <pwm_wr>
 3d0:	34 01 00 00 	mvi r1,0
 3d4:	f8 00 00 85 	calli 5e8 <pwm_rd>
pwm_addr(at6);pwm_din(dint);
 3d8:	34 01 00 4c 	mvi r1,76
 3dc:	f8 00 00 8a 	calli 604 <pwm_addr>
 3e0:	b9 a0 08 00 	mv r1,r13
 3e4:	f8 00 00 95 	calli 638 <pwm_din>
pwm_addr(ad6);pwm_din(dind);
 3e8:	34 01 00 50 	mvi r1,80
 3ec:	f8 00 00 86 	calli 604 <pwm_addr>
 3f0:	b9 80 08 00 	mv r1,r12
 3f4:	f8 00 00 91 	calli 638 <pwm_din>
pwm_addr(ae6);pwm_din(on);
 3f8:	34 01 00 48 	mvi r1,72
 3fc:	f8 00 00 82 	calli 604 <pwm_addr>
 400:	34 01 00 01 	mvi r1,1
 404:	f8 00 00 8d 	calli 638 <pwm_din>
}
 408:	2b 9d 00 04 	lw ra,(sp+4)
 40c:	2b 8b 00 10 	lw r11,(sp+16)
 410:	2b 8c 00 0c 	lw r12,(sp+12)
 414:	2b 8d 00 08 	lw r13,(sp+8)
 418:	37 9c 00 10 	addi sp,sp,16
 41c:	c3 a0 00 00 	ret
pwm_wr(W); pwm_rd(R);
 420:	34 01 00 01 	mvi r1,1
 424:	f8 00 00 7e 	calli 61c <pwm_wr>
 428:	34 01 00 00 	mvi r1,0
 42c:	f8 00 00 6f 	calli 5e8 <pwm_rd>
pwm_addr(at); pwm_din(dint);
 430:	34 01 00 04 	mvi r1,4
 434:	f8 00 00 74 	calli 604 <pwm_addr>
 438:	b9 a0 08 00 	mv r1,r13
 43c:	f8 00 00 7f 	calli 638 <pwm_din>
pwm_addr(ad); pwm_din(dind);
 440:	34 01 00 08 	mvi r1,8
 444:	f8 00 00 70 	calli 604 <pwm_addr>
 448:	b9 80 08 00 	mv r1,r12
 44c:	f8 00 00 7b 	calli 638 <pwm_din>
pwm_addr(ae); pwm_din(on);
 450:	34 01 00 00 	mvi r1,0
 454:	f8 00 00 6c 	calli 604 <pwm_addr>
 458:	34 01 00 01 	mvi r1,1
 45c:	f8 00 00 77 	calli 638 <pwm_din>
 460:	e3 ff ff b0 	bi 320 <pwm_sel+0x118>
if (sel==4){
 464:	34 01 00 04 	mvi r1,4
 468:	5d 61 ff ae 	bne r11,r1,320 <pwm_sel+0x118>
pwm_wr(W);pwm_rd(R);
 46c:	34 01 00 01 	mvi r1,1
 470:	f8 00 00 6b 	calli 61c <pwm_wr>
 474:	34 01 00 00 	mvi r1,0
 478:	f8 00 00 5c 	calli 5e8 <pwm_rd>
pwm_addr(at4);pwm_din(dint);
 47c:	34 01 00 34 	mvi r1,52
 480:	f8 00 00 61 	calli 604 <pwm_addr>
 484:	b9 a0 08 00 	mv r1,r13
 488:	f8 00 00 6c 	calli 638 <pwm_din>
pwm_addr(ad4);pwm_din(dind);
 48c:	34 01 00 38 	mvi r1,56
 490:	f8 00 00 5d 	calli 604 <pwm_addr>
 494:	b9 80 08 00 	mv r1,r12
 498:	f8 00 00 68 	calli 638 <pwm_din>
pwm_addr(ae4);pwm_din(on);
 49c:	34 01 00 30 	mvi r1,48
 4a0:	f8 00 00 59 	calli 604 <pwm_addr>
 4a4:	34 01 00 01 	mvi r1,1
 4a8:	f8 00 00 64 	calli 638 <pwm_din>
}
 4ac:	2b 9d 00 04 	lw ra,(sp+4)
 4b0:	2b 8b 00 10 	lw r11,(sp+16)
 4b4:	2b 8c 00 0c 	lw r12,(sp+12)
 4b8:	2b 8d 00 08 	lw r13,(sp+8)
 4bc:	37 9c 00 10 	addi sp,sp,16
 4c0:	c3 a0 00 00 	ret

000004c4 <main>:

int main(){
 4c4:	37 9c ff fc 	addi sp,sp,-4
 4c8:	5b 9d 00 04 	sw (sp+4),ra

pwm_sel(0, 1000000, 30000);
 4cc:	34 03 75 30 	mvi r3,30000
 4d0:	38 02 42 40 	mvu r2,0x4240
 4d4:	78 42 00 0f 	orhi r2,r2,0xf
 4d8:	34 01 00 00 	mvi r1,0
 4dc:	fb ff ff 4b 	calli 208 <pwm_sel>
nsleep(3);
 4e0:	34 01 00 03 	mvi r1,3
 4e4:	f8 00 00 ae 	calli 79c <nsleep>
pwm_sel(1, 50, 20);
 4e8:	34 03 00 14 	mvi r3,20
 4ec:	34 02 00 32 	mvi r2,50
 4f0:	34 01 00 01 	mvi r1,1
 4f4:	fb ff ff 45 	calli 208 <pwm_sel>
nsleep(3);
 4f8:	34 01 00 03 	mvi r1,3
 4fc:	f8 00 00 a8 	calli 79c <nsleep>
pwm_sel(2, 100, 30);
 500:	34 03 00 1e 	mvi r3,30
 504:	34 02 00 64 	mvi r2,100
 508:	34 01 00 02 	mvi r1,2
 50c:	fb ff ff 3f 	calli 208 <pwm_sel>
nsleep(3);
 510:	34 01 00 03 	mvi r1,3
 514:	f8 00 00 a2 	calli 79c <nsleep>
pwm_sel(3, 200, 30);
 518:	34 03 00 1e 	mvi r3,30
 51c:	34 02 00 c8 	mvi r2,200
 520:	34 01 00 03 	mvi r1,3
 524:	fb ff ff 39 	calli 208 <pwm_sel>
nsleep(3);
 528:	34 01 00 03 	mvi r1,3
 52c:	f8 00 00 9c 	calli 79c <nsleep>
pwm_sel(4, 50, 10);
 530:	34 03 00 0a 	mvi r3,10
 534:	34 02 00 32 	mvi r2,50
 538:	34 01 00 04 	mvi r1,4
 53c:	fb ff ff 33 	calli 208 <pwm_sel>
nsleep(3);
 540:	34 01 00 03 	mvi r1,3
 544:	f8 00 00 96 	calli 79c <nsleep>
pwm_sel(5, 30, 20);
 548:	34 03 00 14 	mvi r3,20
 54c:	34 02 00 1e 	mvi r2,30
 550:	34 01 00 05 	mvi r1,5
 554:	fb ff ff 2d 	calli 208 <pwm_sel>
nsleep(3);
 558:	34 01 00 03 	mvi r1,3
 55c:	f8 00 00 90 	calli 79c <nsleep>
pwm_sel(6, 40, 10);
 560:	34 03 00 0a 	mvi r3,10
 564:	34 02 00 28 	mvi r2,40
 568:	34 01 00 06 	mvi r1,6
 56c:	fb ff ff 27 	calli 208 <pwm_sel>
nsleep(3);
 570:	34 01 00 03 	mvi r1,3
 574:	f8 00 00 8a 	calli 79c <nsleep>
pwm_sel(7, 50, 10);
 578:	34 01 00 07 	mvi r1,7
 57c:	34 03 00 0a 	mvi r3,10
 580:	34 02 00 32 	mvi r2,50
 584:	fb ff ff 21 	calli 208 <pwm_sel>


 	
}
 588:	34 01 00 00 	mvi r1,0
 58c:	2b 9d 00 04 	lw ra,(sp+4)
 590:	37 9c 00 04 	addi sp,sp,4
 594:	c3 a0 00 00 	ret

00000598 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 598:	78 01 00 00 	mvhi r1,0x0
 59c:	38 21 09 5c 	ori r1,r1,0x95c
 5a0:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5a4:	78 04 00 00 	mvhi r4,0x0
 5a8:	38 84 09 60 	ori r4,r4,0x960
 5ac:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 5b0:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5b4:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 5b8:	34 21 00 01 	addi r1,r1,1
 5bc:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5c0:	34 01 00 0e 	mvi r1,14
 5c4:	58 61 00 00 	sw (r3+0),r1
}
 5c8:	c3 a0 00 00 	ret

000005cc <isr_null>:
 5cc:	c3 a0 00 00 	ret

000005d0 <pwm_read>:
	return pwm -> d_out;
 5d0:	78 02 00 00 	mvhi r2,0x0
 5d4:	38 42 09 64 	ori r2,r2,0x964
 5d8:	28 41 00 00 	lw r1,(r2+0)
 5dc:	28 21 00 00 	lw r1,(r1+0)
 5e0:	28 21 00 00 	lw r1,(r1+0)
}
 5e4:	c3 a0 00 00 	ret

000005e8 <pwm_rd>:
pwm -> rd = vrd;
 5e8:	78 03 00 00 	mvhi r3,0x0
 5ec:	38 63 09 68 	ori r3,r3,0x968
 5f0:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 5f4:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 5f8:	28 42 00 00 	lw r2,(r2+0)
 5fc:	30 41 00 04 	sb (r2+4),r1
}
 600:	c3 a0 00 00 	ret

00000604 <pwm_addr>:
pwm -> addr = vaddr;
 604:	78 03 00 00 	mvhi r3,0x0
 608:	38 63 09 6c 	ori r3,r3,0x96c
 60c:	28 62 00 00 	lw r2,(r3+0)
 610:	28 42 00 00 	lw r2,(r2+0)
 614:	58 41 00 08 	sw (r2+8),r1
}
 618:	c3 a0 00 00 	ret

0000061c <pwm_wr>:
pwm -> wr = vwr;
 61c:	78 03 00 00 	mvhi r3,0x0
 620:	38 63 09 70 	ori r3,r3,0x970
 624:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 628:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 62c:	28 42 00 00 	lw r2,(r2+0)
 630:	30 41 00 0c 	sb (r2+12),r1
}
 634:	c3 a0 00 00 	ret

00000638 <pwm_din>:
pwm -> d_in = vd_in;
 638:	78 03 00 00 	mvhi r3,0x0
 63c:	38 63 09 74 	ori r3,r3,0x974
 640:	28 62 00 00 	lw r2,(r3+0)
 644:	28 42 00 00 	lw r2,(r2+0)
 648:	58 41 00 10 	sw (r2+16),r1
}
 64c:	c3 a0 00 00 	ret

00000650 <gpio_config_dir>:
	gpio0 -> dir = vdir;
 650:	78 03 00 00 	mvhi r3,0x0
 654:	38 63 09 78 	ori r3,r3,0x978
 658:	28 62 00 00 	lw r2,(r3+0)
 65c:	28 42 00 00 	lw r2,(r2+0)
 660:	58 41 00 08 	sw (r2+8),r1
}
 664:	c3 a0 00 00 	ret

00000668 <gpio_write>:
	gpio0 -> wr = vpins;
 668:	78 03 00 00 	mvhi r3,0x0
 66c:	38 63 09 7c 	ori r3,r3,0x97c
 670:	28 62 00 00 	lw r2,(r3+0)
 674:	28 42 00 00 	lw r2,(r2+0)
 678:	58 41 00 04 	sw (r2+4),r1
}
 67c:	c3 a0 00 00 	ret

00000680 <gpio_read>:
	return gpio0 -> rd;
 680:	78 02 00 00 	mvhi r2,0x0
 684:	38 42 09 80 	ori r2,r2,0x980
 688:	28 41 00 00 	lw r1,(r2+0)
 68c:	28 21 00 00 	lw r1,(r1+0)
 690:	28 21 00 00 	lw r1,(r1+0)
}
 694:	c3 a0 00 00 	ret

00000698 <irq_handler>:
{
 698:	37 9c ff f0 	addi sp,sp,-16
 69c:	5b 8b 00 10 	sw (sp+16),r11
 6a0:	5b 8c 00 0c 	sw (sp+12),r12
 6a4:	5b 8d 00 08 	sw (sp+8),r13
 6a8:	5b 9d 00 04 	sw (sp+4),ra
 6ac:	78 02 00 00 	mvhi r2,0x0
 6b0:	38 42 09 84 	ori r2,r2,0x984
 6b4:	28 4b 00 00 	lw r11,(r2+0)
 6b8:	b8 20 60 00 	mv r12,r1
 6bc:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 6c0:	21 81 00 01 	andi r1,r12,0x1
 6c4:	44 20 00 03 	be r1,r0,6d0 <irq_handler+0x38>
 6c8:	29 61 00 00 	lw r1,(r11+0)
 6cc:	d8 20 00 00 	call r1
 6d0:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 6d4:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 6d8:	5d ab ff fa 	bne r13,r11,6c0 <irq_handler+0x28>
}
 6dc:	2b 9d 00 04 	lw ra,(sp+4)
 6e0:	2b 8b 00 10 	lw r11,(sp+16)
 6e4:	2b 8c 00 0c 	lw r12,(sp+12)
 6e8:	2b 8d 00 08 	lw r13,(sp+8)
 6ec:	37 9c 00 10 	addi sp,sp,16
 6f0:	c3 a0 00 00 	ret

000006f4 <isr_init>:
{
 6f4:	78 02 00 00 	mvhi r2,0x0
 6f8:	38 42 09 88 	ori r2,r2,0x988
 6fc:	28 41 00 00 	lw r1,(r2+0)
 700:	78 02 00 00 	mvhi r2,0x0
 704:	38 42 09 8c 	ori r2,r2,0x98c
 708:	28 43 00 00 	lw r3,(r2+0)
 70c:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 710:	58 23 00 00 	sw (r1+0),r3
 714:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 718:	5c 22 ff fe 	bne r1,r2,710 <isr_init+0x1c>
}
 71c:	c3 a0 00 00 	ret

00000720 <isr_register>:
	isr_table[irq] = isr;
 720:	78 04 00 00 	mvhi r4,0x0
 724:	38 84 09 90 	ori r4,r4,0x990
 728:	3c 23 00 02 	sli r3,r1,2
 72c:	28 81 00 00 	lw r1,(r4+0)
 730:	b4 23 08 00 	add r1,r1,r3
 734:	58 22 00 00 	sw (r1+0),r2
}
 738:	c3 a0 00 00 	ret

0000073c <isr_unregister>:
	isr_table[irq] = &isr_null;
 73c:	78 03 00 00 	mvhi r3,0x0
 740:	38 63 09 94 	ori r3,r3,0x994
 744:	3c 22 00 02 	sli r2,r1,2
 748:	28 61 00 00 	lw r1,(r3+0)
 74c:	78 03 00 00 	mvhi r3,0x0
 750:	38 63 09 98 	ori r3,r3,0x998
 754:	b4 22 08 00 	add r1,r1,r2
 758:	28 62 00 00 	lw r2,(r3+0)
 75c:	58 22 00 00 	sw (r1+0),r2
}
 760:	c3 a0 00 00 	ret

00000764 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 764:	78 03 00 00 	mvhi r3,0x0
 768:	38 02 c3 50 	mvu r2,0xc350
 76c:	38 63 09 9c 	ori r3,r3,0x99c
 770:	88 22 08 00 	mul r1,r1,r2
 774:	28 62 00 00 	lw r2,(r3+0)
 778:	28 42 00 00 	lw r2,(r2+0)
 77c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 780:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 784:	34 01 00 08 	mvi r1,8
 788:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 78c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 790:	20 21 00 01 	andi r1,r1,0x1
 794:	44 20 ff fe 	be r1,r0,78c <msleep+0x28>
}
 798:	c3 a0 00 00 	ret

0000079c <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 79c:	78 03 00 00 	mvhi r3,0x0
 7a0:	38 63 09 a0 	ori r3,r3,0x9a0
 7a4:	28 62 00 00 	lw r2,(r3+0)
 7a8:	08 21 00 32 	muli r1,r1,50
 7ac:	28 42 00 00 	lw r2,(r2+0)
 7b0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 7b4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7b8:	34 01 00 08 	mvi r1,8
 7bc:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 7c0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7c4:	20 21 00 01 	andi r1,r1,0x1
 7c8:	44 20 ff fe 	be r1,r0,7c0 <nsleep+0x24>
}
 7cc:	c3 a0 00 00 	ret

000007d0 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 7d0:	78 02 00 00 	mvhi r2,0x0
 7d4:	38 42 09 a4 	ori r2,r2,0x9a4
 7d8:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 7dc:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 7e0:	34 02 13 88 	mvi r2,5000
 7e4:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 7e8:	38 63 09 a8 	ori r3,r3,0x9a8
	timer0->compare0 = (FCPU/10000);
 7ec:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 7f0:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 7f4:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 7f8:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 7fc:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 800:	34 02 00 0e 	mvi r2,14
 804:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 808:	78 02 00 00 	mvhi r2,0x0
 80c:	38 42 09 ac 	ori r2,r2,0x9ac
 810:	38 63 09 b0 	ori r3,r3,0x9b0
 814:	28 41 00 00 	lw r1,(r2+0)
 818:	28 62 00 00 	lw r2,(r3+0)
 81c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 820:	c3 a0 00 00 	ret

00000824 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 824:	c3 a0 00 00 	ret

00000828 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 828:	78 02 00 00 	mvhi r2,0x0
 82c:	38 42 09 b4 	ori r2,r2,0x9b4
 830:	28 41 00 00 	lw r1,(r2+0)
 834:	28 22 00 00 	lw r2,(r1+0)
 838:	28 41 00 00 	lw r1,(r2+0)
 83c:	20 21 00 01 	andi r1,r1,0x1
 840:	44 20 ff fe 	be r1,r0,838 <uart_getchar+0x10>
	return uart0->rxtx;
 844:	28 41 00 04 	lw r1,(r2+4)
}
 848:	20 21 00 ff 	andi r1,r1,0xff
 84c:	c3 a0 00 00 	ret

00000850 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 850:	78 03 00 00 	mvhi r3,0x0
 854:	38 63 09 b8 	ori r3,r3,0x9b8
 858:	28 62 00 00 	lw r2,(r3+0)
{
 85c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 860:	28 43 00 00 	lw r3,(r2+0)
 864:	28 62 00 00 	lw r2,(r3+0)
 868:	20 42 00 10 	andi r2,r2,0x10
 86c:	5c 40 ff fe 	bne r2,r0,864 <uart_putchar+0x14>
	uart0->rxtx = c;
 870:	58 61 00 04 	sw (r3+4),r1
}
 874:	c3 a0 00 00 	ret

00000878 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 878:	40 24 00 00 	lbu r4,(r1+0)
 87c:	44 80 00 0c 	be r4,r0,8ac <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 880:	78 03 00 00 	mvhi r3,0x0
 884:	38 63 09 bc 	ori r3,r3,0x9bc
 888:	28 62 00 00 	lw r2,(r3+0)
 88c:	28 43 00 00 	lw r3,(r2+0)
 890:	28 62 00 00 	lw r2,(r3+0)
 894:	20 42 00 10 	andi r2,r2,0x10
 898:	5c 40 ff fe 	bne r2,r0,890 <uart_putstr+0x18>
	uart0->rxtx = c;
 89c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 8a0:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 8a4:	40 24 00 00 	lbu r4,(r1+0)
 8a8:	5c 80 ff fa 	bne r4,r0,890 <uart_putstr+0x18>
	}
}
 8ac:	c3 a0 00 00 	ret

000008b0 <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 8b0:	78 02 00 00 	mvhi r2,0x0
 8b4:	38 42 09 c0 	ori r2,r2,0x9c0
 8b8:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 8bc:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 8c0:	28 21 00 00 	lw r1,(r1+0)
 8c4:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 8c8:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 8cc:	34 02 ff 80 	mvi r2,-128
 8d0:	30 22 00 02 	sb (r1+2),r2


}
 8d4:	c3 a0 00 00 	ret

000008d8 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 8d8:	78 05 00 00 	mvhi r5,0x0
 8dc:	38 a5 09 c4 	ori r5,r5,0x9c4
 8e0:	28 a4 00 00 	lw r4,(r5+0)
 8e4:	3c 21 00 02 	sli r1,r1,2
{
 8e8:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 8ec:	28 84 00 00 	lw r4,(r4+0)
 8f0:	20 21 00 fc 	andi r1,r1,0xfc
{
 8f4:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 8f8:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 8fc:	34 01 ff 90 	mvi r1,-112
 900:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 904:	40 81 00 04 	lbu r1,(r4+4)
 908:	20 21 00 02 	andi r1,r1,0x2
 90c:	5c 20 ff fe 	bne r1,r0,904 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 910:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 914:	34 01 00 10 	mvi r1,16
 918:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 91c:	40 81 00 04 	lbu r1,(r4+4)
 920:	20 21 00 02 	andi r1,r1,0x2
 924:	5c 20 ff fe 	bne r1,r0,91c <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 928:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 92c:	34 01 00 10 	mvi r1,16
 930:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 934:	40 81 00 04 	lbu r1,(r4+4)
 938:	20 21 00 02 	andi r1,r1,0x2
 93c:	5c 20 ff fe 	bne r1,r0,934 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 940:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 944:	34 01 00 50 	mvi r1,80
 948:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 94c:	40 81 00 04 	lbu r1,(r4+4)
 950:	20 21 00 02 	andi r1,r1,0x2
 954:	5c 20 ff fe 	bne r1,r0,94c <i2c_write+0x74>
//7

}
 958:	c3 a0 00 00 	ret
