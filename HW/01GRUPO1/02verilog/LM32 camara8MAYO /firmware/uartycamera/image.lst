
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000080  000007d0  000007d0  00000824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000850  00000850  000008a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000868  00000868  000008bc  2**2
                  ALLOC
  4 .debug_frame  000002f4  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016e4  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092e  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000439  00000000  00000000  00002bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000c0  00000000  00000000  00002ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000030bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000007b9  00000000  00000000  000030e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005c4  00000000  00000000  0000389c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 33 	calli e0 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_scall_handler>:
  c0:	34 00 00 00 	nop
  c4:	34 00 00 00 	nop
  c8:	34 00 00 00 	nop
  cc:	34 00 00 00 	nop
  d0:	34 00 00 00 	nop
  d4:	34 00 00 00 	nop
  d8:	34 00 00 00 	nop
  dc:	34 00 00 00 	nop

000000e0 <_crt0>:
  e0:	78 1c 00 00 	mvhi sp,0x0
  e4:	3b 9c 0f fc 	ori sp,sp,0xffc
  e8:	78 1a 00 00 	mvhi gp,0x0
  ec:	3b 5a 08 70 	ori gp,gp,0x870
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 08 68 	ori r1,r1,0x868
  f8:	78 03 00 00 	mvhi r3,0x0
  fc:	38 63 08 ec 	ori r3,r3,0x8ec

00000100 <.clearBSS>:
 100:	44 23 00 04 	be r1,r3,110 <.callMain>
 104:	58 20 00 00 	sw (r1+0),r0
 108:	34 21 00 04 	addi r1,r1,4
 10c:	e3 ff ff fd 	bi 100 <.clearBSS>

00000110 <.callMain>:
 110:	34 01 00 00 	mvi r1,0
 114:	34 02 00 00 	mvi r2,0
 118:	34 03 00 00 	mvi r3,0
 11c:	f8 00 00 33 	calli 1e8 <main>

00000120 <irq_enable>:
 120:	34 01 00 01 	mvi r1,1
 124:	d0 01 00 00 	wcsr IE,r1
 128:	c3 a0 00 00 	ret

0000012c <irq_disable>:
 12c:	34 01 00 00 	mvi r1,0
 130:	d0 01 00 00 	wcsr IE,r1
 134:	c3 a0 00 00 	ret

00000138 <irq_set_mask>:
 138:	d0 21 00 00 	wcsr IM,r1
 13c:	c3 a0 00 00 	ret

00000140 <irq_get_mask>:
 140:	90 20 08 00 	rcsr r1,IM
 144:	c3 a0 00 00 	ret

00000148 <jump>:
 148:	c0 20 00 00 	b r1

0000014c <halt>:
 14c:	e0 00 00 00 	bi 14c <halt>

00000150 <_save_all>:
 150:	37 9c ff 80 	addi sp,sp,-128
 154:	5b 81 00 04 	sw (sp+4),r1
 158:	5b 82 00 08 	sw (sp+8),r2
 15c:	5b 83 00 0c 	sw (sp+12),r3
 160:	5b 84 00 10 	sw (sp+16),r4
 164:	5b 85 00 14 	sw (sp+20),r5
 168:	5b 86 00 18 	sw (sp+24),r6
 16c:	5b 87 00 1c 	sw (sp+28),r7
 170:	5b 88 00 20 	sw (sp+32),r8
 174:	5b 89 00 24 	sw (sp+36),r9
 178:	5b 8a 00 28 	sw (sp+40),r10
 17c:	5b 9e 00 78 	sw (sp+120),ea
 180:	5b 9f 00 7c 	sw (sp+124),ba
 184:	2b 81 00 80 	lw r1,(sp+128)
 188:	5b 81 00 74 	sw (sp+116),r1
 18c:	bb 80 08 00 	mv r1,sp
 190:	34 21 00 80 	addi r1,r1,128
 194:	5b 81 00 70 	sw (sp+112),r1
 198:	c3 a0 00 00 	ret

0000019c <_restore_all_and_eret>:
 19c:	2b 81 00 04 	lw r1,(sp+4)
 1a0:	2b 82 00 08 	lw r2,(sp+8)
 1a4:	2b 83 00 0c 	lw r3,(sp+12)
 1a8:	2b 84 00 10 	lw r4,(sp+16)
 1ac:	2b 85 00 14 	lw r5,(sp+20)
 1b0:	2b 86 00 18 	lw r6,(sp+24)
 1b4:	2b 87 00 1c 	lw r7,(sp+28)
 1b8:	2b 88 00 20 	lw r8,(sp+32)
 1bc:	2b 89 00 24 	lw r9,(sp+36)
 1c0:	2b 8a 00 28 	lw r10,(sp+40)
 1c4:	2b 9d 00 74 	lw ra,(sp+116)
 1c8:	2b 9e 00 78 	lw ea,(sp+120)
 1cc:	2b 9f 00 7c 	lw ba,(sp+124)
 1d0:	2b 9c 00 70 	lw sp,(sp+112)
 1d4:	c3 c0 00 00 	eret

000001d8 <get_sp>:
 1d8:	bb 80 08 00 	mv r1,sp
 1dc:	c3 a0 00 00 	ret

000001e0 <get_gp>:
 1e0:	bb 40 08 00 	mv r1,gp
 1e4:	c3 a0 00 00 	ret

000001e8 <main>:
#include "uart.h"
#include "camera.h"


int main()
{	
 1e8:	37 9c ff f0 	addi sp,sp,-16
 1ec:	5b 9d 00 04 	sw (sp+4),ra
	camera foto;

   while(1)
   {

		com=comando.uart_getchar();	
 1f0:	37 81 00 0c 	addi r1,sp,12
 1f4:	f8 00 01 40 	calli 6f4 <_ZN4uart12uart_getcharEv>
		comando.uart_putchar(com);
 1f8:	b8 20 10 00 	mv r2,r1
 1fc:	37 81 00 0c 	addi r1,sp,12
 200:	f8 00 01 47 	calli 71c <_ZN4uart12uart_putcharEc>
		foto.tomar();		
 204:	37 81 00 08 	addi r1,sp,8
 208:	f8 00 01 66 	calli 7a0 <_ZN6camera5tomarEv>
		comando.uart_putchar(foto.leer());
 20c:	37 81 00 08 	addi r1,sp,8
 210:	f8 00 01 6a 	calli 7b8 <_ZN6camera4leerEv>
 214:	20 22 00 ff 	andi r2,r1,0xff
 218:	37 81 00 0c 	addi r1,sp,12
 21c:	f8 00 01 40 	calli 71c <_ZN4uart12uart_putcharEc>
		comando.uart_putchar(0x1C);
 220:	34 02 00 1c 	mvi r2,28
 224:	37 81 00 0c 	addi r1,sp,12
 228:	f8 00 01 3d 	calli 71c <_ZN4uart12uart_putcharEc>
 22c:	e3 ff ff f1 	bi 1f0 <main+0x8>

00000230 <_Z7tic_isrv>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 230:	78 01 00 00 	mvhi r1,0x0
 234:	38 21 07 d0 	ori r1,r1,0x7d0
 238:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 23c:	78 04 00 00 	mvhi r4,0x0
 240:	38 84 07 d4 	ori r4,r4,0x7d4
 244:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 248:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 24c:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 250:	34 21 00 01 	addi r1,r1,1
 254:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 258:	34 01 00 0e 	mvi r1,14
 25c:	58 61 00 00 	sw (r3+0),r1
}
 260:	c3 a0 00 00 	ret

00000264 <_Z8isr_nullv>:
 264:	c3 a0 00 00 	ret

00000268 <_Z8pwm_readv>:
	return pwm -> d_out;
 268:	78 02 00 00 	mvhi r2,0x0
 26c:	38 42 07 d8 	ori r2,r2,0x7d8
 270:	28 41 00 00 	lw r1,(r2+0)
 274:	28 21 00 00 	lw r1,(r1+0)
 278:	28 21 00 00 	lw r1,(r1+0)
}
 27c:	c3 a0 00 00 	ret

00000280 <_Z6pwm_rdh>:
pwm -> rd = vrd;
 280:	78 03 00 00 	mvhi r3,0x0
 284:	38 63 07 dc 	ori r3,r3,0x7dc
 288:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 28c:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 290:	28 42 00 00 	lw r2,(r2+0)
 294:	30 41 00 04 	sb (r2+4),r1
}
 298:	c3 a0 00 00 	ret

0000029c <_Z8pwm_addrj>:
pwm -> addr = vaddr;
 29c:	78 03 00 00 	mvhi r3,0x0
 2a0:	38 63 07 e0 	ori r3,r3,0x7e0
 2a4:	28 62 00 00 	lw r2,(r3+0)
 2a8:	28 42 00 00 	lw r2,(r2+0)
 2ac:	58 41 00 08 	sw (r2+8),r1
}
 2b0:	c3 a0 00 00 	ret

000002b4 <_Z6pwm_wrh>:
pwm -> wr = vwr;
 2b4:	78 03 00 00 	mvhi r3,0x0
 2b8:	38 63 07 e4 	ori r3,r3,0x7e4
 2bc:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 2c0:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 2c4:	28 42 00 00 	lw r2,(r2+0)
 2c8:	30 41 00 0c 	sb (r2+12),r1
}
 2cc:	c3 a0 00 00 	ret

000002d0 <_Z7pwm_dinj>:
pwm -> d_in = vd_in;
 2d0:	78 03 00 00 	mvhi r3,0x0
 2d4:	38 63 07 e8 	ori r3,r3,0x7e8
 2d8:	28 62 00 00 	lw r2,(r3+0)
 2dc:	28 42 00 00 	lw r2,(r2+0)
 2e0:	58 41 00 10 	sw (r2+16),r1
}
 2e4:	c3 a0 00 00 	ret

000002e8 <_Z9tomarfotov>:
camera0->resetwr=1;
 2e8:	78 03 00 00 	mvhi r3,0x0
 2ec:	38 63 07 ec 	ori r3,r3,0x7ec
 2f0:	28 61 00 00 	lw r1,(r3+0)
 2f4:	34 02 00 01 	mvi r2,1
 2f8:	28 21 00 00 	lw r1,(r1+0)
 2fc:	30 22 00 06 	sb (r1+6),r2
camera0->takepicture=1;
 300:	30 22 00 04 	sb (r1+4),r2
}
 304:	c3 a0 00 00 	ret

00000308 <_Z8leerfotov>:
camera0->leer=1;
 308:	78 03 00 00 	mvhi r3,0x0
 30c:	38 63 07 f0 	ori r3,r3,0x7f0
 310:	28 61 00 00 	lw r1,(r3+0)
 314:	34 02 00 01 	mvi r2,1
 318:	28 21 00 00 	lw r1,(r1+0)
 31c:	30 22 00 05 	sb (r1+5),r2
camera0->resetrd=1;
 320:	30 22 00 07 	sb (r1+7),r2
return camera0->dout;
 324:	28 21 00 00 	lw r1,(r1+0)
}
 328:	c3 a0 00 00 	ret

0000032c <_Z15gpio_config_dirj>:
	gpio0 -> dir = vdir;
 32c:	78 03 00 00 	mvhi r3,0x0
 330:	38 63 07 f4 	ori r3,r3,0x7f4
 334:	28 62 00 00 	lw r2,(r3+0)
 338:	28 42 00 00 	lw r2,(r2+0)
 33c:	58 41 00 08 	sw (r2+8),r1
}
 340:	c3 a0 00 00 	ret

00000344 <_Z10gpio_writej>:
	gpio0 -> wr = vpins;
 344:	78 03 00 00 	mvhi r3,0x0
 348:	38 63 07 f8 	ori r3,r3,0x7f8
 34c:	28 62 00 00 	lw r2,(r3+0)
 350:	28 42 00 00 	lw r2,(r2+0)
 354:	58 41 00 04 	sw (r2+4),r1
}
 358:	c3 a0 00 00 	ret

0000035c <_Z9gpio_readv>:
	return gpio0 -> rd;
 35c:	78 02 00 00 	mvhi r2,0x0
 360:	38 42 07 fc 	ori r2,r2,0x7fc
 364:	28 41 00 00 	lw r1,(r2+0)
 368:	28 21 00 00 	lw r1,(r1+0)
 36c:	28 21 00 00 	lw r1,(r1+0)
}
 370:	c3 a0 00 00 	ret

00000374 <_Z11irq_handlerj>:
{
 374:	37 9c ff f0 	addi sp,sp,-16
 378:	5b 8b 00 10 	sw (sp+16),r11
 37c:	5b 8c 00 0c 	sw (sp+12),r12
 380:	5b 8d 00 08 	sw (sp+8),r13
 384:	5b 9d 00 04 	sw (sp+4),ra
 388:	78 02 00 00 	mvhi r2,0x0
 38c:	38 42 08 00 	ori r2,r2,0x800
 390:	28 4b 00 00 	lw r11,(r2+0)
 394:	b8 20 60 00 	mv r12,r1
 398:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 39c:	21 81 00 01 	andi r1,r12,0x1
 3a0:	44 20 00 03 	be r1,r0,3ac <_Z11irq_handlerj+0x38>
 3a4:	29 61 00 00 	lw r1,(r11+0)
 3a8:	d8 20 00 00 	call r1
 3ac:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 3b0:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 3b4:	5d ab ff fa 	bne r13,r11,39c <_Z11irq_handlerj+0x28>
}
 3b8:	2b 9d 00 04 	lw ra,(sp+4)
 3bc:	2b 8b 00 10 	lw r11,(sp+16)
 3c0:	2b 8c 00 0c 	lw r12,(sp+12)
 3c4:	2b 8d 00 08 	lw r13,(sp+8)
 3c8:	37 9c 00 10 	addi sp,sp,16
 3cc:	c3 a0 00 00 	ret

000003d0 <_Z8isr_initv>:
{
 3d0:	78 02 00 00 	mvhi r2,0x0
 3d4:	38 42 08 04 	ori r2,r2,0x804
 3d8:	28 41 00 00 	lw r1,(r2+0)
 3dc:	78 02 00 00 	mvhi r2,0x0
 3e0:	38 42 08 08 	ori r2,r2,0x808
 3e4:	28 43 00 00 	lw r3,(r2+0)
 3e8:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 3ec:	58 23 00 00 	sw (r1+0),r3
 3f0:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 3f4:	5c 22 ff fe 	bne r1,r2,3ec <_Z8isr_initv+0x1c>
}
 3f8:	c3 a0 00 00 	ret

000003fc <_Z12isr_registeriPFvvE>:
	isr_table[irq] = isr;
 3fc:	78 04 00 00 	mvhi r4,0x0
 400:	38 84 08 0c 	ori r4,r4,0x80c
 404:	3c 23 00 02 	sli r3,r1,2
 408:	28 81 00 00 	lw r1,(r4+0)
 40c:	b4 23 08 00 	add r1,r1,r3
 410:	58 22 00 00 	sw (r1+0),r2
}
 414:	c3 a0 00 00 	ret

00000418 <_Z14isr_unregisteri>:
	isr_table[irq] = &isr_null;
 418:	78 03 00 00 	mvhi r3,0x0
 41c:	38 63 08 10 	ori r3,r3,0x810
 420:	3c 22 00 02 	sli r2,r1,2
 424:	28 61 00 00 	lw r1,(r3+0)
 428:	78 03 00 00 	mvhi r3,0x0
 42c:	38 63 08 14 	ori r3,r3,0x814
 430:	b4 22 08 00 	add r1,r1,r2
 434:	28 62 00 00 	lw r2,(r3+0)
 438:	58 22 00 00 	sw (r1+0),r2
}
 43c:	c3 a0 00 00 	ret

00000440 <_Z6msleepj>:
	timer0->compare1 = (FCPU/1000)*msec;
 440:	78 03 00 00 	mvhi r3,0x0
 444:	38 02 c3 50 	mvu r2,0xc350
 448:	38 63 08 18 	ori r3,r3,0x818
 44c:	88 22 08 00 	mul r1,r1,r2
 450:	28 62 00 00 	lw r2,(r3+0)
 454:	28 42 00 00 	lw r2,(r2+0)
 458:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 45c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 460:	34 01 00 08 	mvi r1,8
 464:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 468:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 46c:	20 21 00 01 	andi r1,r1,0x1
 470:	44 20 ff fe 	be r1,r0,468 <_Z6msleepj+0x28>
}
 474:	c3 a0 00 00 	ret

00000478 <_Z6nsleepj>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 478:	78 03 00 00 	mvhi r3,0x0
 47c:	38 63 08 1c 	ori r3,r3,0x81c
 480:	28 62 00 00 	lw r2,(r3+0)
 484:	08 21 00 32 	muli r1,r1,50
 488:	28 42 00 00 	lw r2,(r2+0)
 48c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 490:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 494:	34 01 00 08 	mvi r1,8
 498:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 49c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4a0:	20 21 00 01 	andi r1,r1,0x1
 4a4:	44 20 ff fe 	be r1,r0,49c <_Z6nsleepj+0x24>
}
 4a8:	c3 a0 00 00 	ret

000004ac <_Z8tic_initv>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 4ac:	78 02 00 00 	mvhi r2,0x0
 4b0:	38 42 08 20 	ori r2,r2,0x820
 4b4:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 4b8:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 4bc:	34 02 13 88 	mvi r2,5000
 4c0:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 4c4:	38 63 08 24 	ori r3,r3,0x824
	timer0->compare0 = (FCPU/10000);
 4c8:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 4cc:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 4d0:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 4d4:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 4d8:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 4dc:	34 02 00 0e 	mvi r2,14
 4e0:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 4e4:	78 02 00 00 	mvhi r2,0x0
 4e8:	38 42 08 28 	ori r2,r2,0x828
 4ec:	38 63 08 2c 	ori r3,r3,0x82c
 4f0:	28 41 00 00 	lw r1,(r2+0)
 4f4:	28 62 00 00 	lw r2,(r3+0)
 4f8:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 4fc:	c3 a0 00 00 	ret

00000500 <_Z9uart_initv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 500:	c3 a0 00 00 	ret

00000504 <_Z12uart_getcharv>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 504:	78 02 00 00 	mvhi r2,0x0
 508:	38 42 08 30 	ori r2,r2,0x830
 50c:	28 41 00 00 	lw r1,(r2+0)
 510:	28 22 00 00 	lw r2,(r1+0)
 514:	28 41 00 00 	lw r1,(r2+0)
 518:	20 21 00 01 	andi r1,r1,0x1
 51c:	44 20 ff fe 	be r1,r0,514 <_Z12uart_getcharv+0x10>
	return uart0->rxtx;
 520:	28 41 00 04 	lw r1,(r2+4)
}
 524:	20 21 00 ff 	andi r1,r1,0xff
 528:	c3 a0 00 00 	ret

0000052c <_Z12uart_putcharc>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 52c:	78 03 00 00 	mvhi r3,0x0
 530:	38 63 08 34 	ori r3,r3,0x834
 534:	28 62 00 00 	lw r2,(r3+0)
{
 538:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 53c:	28 43 00 00 	lw r3,(r2+0)
 540:	28 62 00 00 	lw r2,(r3+0)
 544:	20 42 00 10 	andi r2,r2,0x10
 548:	5c 40 ff fe 	bne r2,r0,540 <_Z12uart_putcharc+0x14>
	uart0->rxtx = c;
 54c:	58 61 00 04 	sw (r3+4),r1
}
 550:	c3 a0 00 00 	ret

00000554 <_Z11uart_putstrPc>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 554:	40 24 00 00 	lbu r4,(r1+0)
 558:	44 80 00 0c 	be r4,r0,588 <_Z11uart_putstrPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 55c:	78 03 00 00 	mvhi r3,0x0
 560:	38 63 08 38 	ori r3,r3,0x838
 564:	28 62 00 00 	lw r2,(r3+0)
 568:	28 43 00 00 	lw r3,(r2+0)
 56c:	28 62 00 00 	lw r2,(r3+0)
 570:	20 42 00 10 	andi r2,r2,0x10
 574:	5c 40 ff fe 	bne r2,r0,56c <_Z11uart_putstrPc+0x18>
	uart0->rxtx = c;
 578:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 57c:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 580:	40 24 00 00 	lbu r4,(r1+0)
 584:	5c 80 ff fa 	bne r4,r0,56c <_Z11uart_putstrPc+0x18>
	}
}
 588:	c3 a0 00 00 	ret

0000058c <_ZN3pwm7pwm_selEicb>:
#include "pwm.h"
#include "soc-hw.h"

void pwm::pwm_sel(int b, char c, bool en){
 58c:	37 9c ff e8 	addi sp,sp,-24
 590:	5b 8b 00 18 	sw (sp+24),r11
 594:	5b 8c 00 14 	sw (sp+20),r12
 598:	5b 8d 00 10 	sw (sp+16),r13
 59c:	5b 8e 00 0c 	sw (sp+12),r14
 5a0:	5b 8f 00 08 	sw (sp+8),r15
 5a4:	5b 9d 00 04 	sw (sp+4),ra
uint8_t Rd=0;
uint8_t Wr=1;
uint32_t dint=1000000;
uint32_t dind;

uint32_t e=b*12;
 5a8:	08 4b 00 0c 	muli r11,r2,12
void pwm::pwm_sel(int b, char c, bool en){
 5ac:	20 63 00 ff 	andi r3,r3,0xff


if(c==0x11){
dind=0x36*1000;
}
if(c==0x12){
 5b0:	34 01 00 12 	mvi r1,18
void pwm::pwm_sel(int b, char c, bool en){
 5b4:	20 8f 00 ff 	andi r15,r4,0xff
uint32_t d=e+8;
 5b8:	35 6d 00 08 	addi r13,r11,8
uint32_t t=e+4;
 5bc:	35 6e 00 04 	addi r14,r11,4
if(c==0x12){
 5c0:	44 61 00 26 	be r3,r1,658 <_ZN3pwm7pwm_selEicb+0xcc>
dind=0x83*1000;
}
if(c==0x10){
 5c4:	34 01 00 10 	mvi r1,16
dind=0xda*1000;
 5c8:	38 0c 53 90 	mvu r12,0x5390
 5cc:	79 8c 00 03 	orhi r12,r12,0x3
if(c==0x10){
 5d0:	5c 61 00 1a 	bne r3,r1,638 <_ZN3pwm7pwm_selEicb+0xac>
e=e+48;
d=e+8;
t=e+4;
}

pwm_wr(Wr); pwm_rd(Rd);
 5d4:	34 01 00 01 	mvi r1,1
 5d8:	fb ff ff 37 	calli 2b4 <_Z6pwm_wrh>
 5dc:	34 01 00 00 	mvi r1,0
 5e0:	fb ff ff 28 	calli 280 <_Z6pwm_rdh>
pwm_addr(t); pwm_din(dint);
 5e4:	b9 c0 08 00 	mv r1,r14
 5e8:	fb ff ff 2d 	calli 29c <_Z8pwm_addrj>
 5ec:	38 01 42 40 	mvu r1,0x4240
 5f0:	78 21 00 0f 	orhi r1,r1,0xf
 5f4:	fb ff ff 37 	calli 2d0 <_Z7pwm_dinj>

pwm_addr(d); pwm_din(dind);
 5f8:	b9 a0 08 00 	mv r1,r13
 5fc:	fb ff ff 28 	calli 29c <_Z8pwm_addrj>
 600:	b9 80 08 00 	mv r1,r12
 604:	fb ff ff 33 	calli 2d0 <_Z7pwm_dinj>

pwm_addr(e); pwm_din(en);
 608:	b9 60 08 00 	mv r1,r11
 60c:	fb ff ff 24 	calli 29c <_Z8pwm_addrj>
 610:	b9 e0 08 00 	mv r1,r15
 614:	fb ff ff 2f 	calli 2d0 <_Z7pwm_dinj>


};
 618:	2b 9d 00 04 	lw ra,(sp+4)
 61c:	2b 8b 00 18 	lw r11,(sp+24)
 620:	2b 8c 00 14 	lw r12,(sp+20)
 624:	2b 8d 00 10 	lw r13,(sp+16)
 628:	2b 8e 00 0c 	lw r14,(sp+12)
 62c:	2b 8f 00 08 	lw r15,(sp+8)
 630:	37 9c 00 18 	addi sp,sp,24
 634:	c3 a0 00 00 	ret
if(c==0x13){
 638:	34 01 00 13 	mvi r1,19
 63c:	5c 61 00 0a 	bne r3,r1,664 <_ZN3pwm7pwm_selEicb+0xd8>
d=e+8;
 640:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 644:	35 6e 00 34 	addi r14,r11,52
dind=180000;
 648:	38 0c bf 20 	mvu r12,0xbf20
 64c:	79 8c 00 02 	orhi r12,r12,0x2
e=e+48;
 650:	35 6b 00 30 	addi r11,r11,48
 654:	e3 ff ff e0 	bi 5d4 <_ZN3pwm7pwm_selEicb+0x48>
dind=0x83*1000;
 658:	38 0c ff b8 	mvu r12,0xffb8
 65c:	79 8c 00 01 	orhi r12,r12,0x1
 660:	e3 ff ff dd 	bi 5d4 <_ZN3pwm7pwm_selEicb+0x48>
if(c==0x14){
 664:	34 01 00 14 	mvi r1,20
 668:	38 0c d2 f0 	mvu r12,0xd2f0
 66c:	5c 61 ff da 	bne r3,r1,5d4 <_ZN3pwm7pwm_selEicb+0x48>
d=e+8;
 670:	35 6d 00 38 	addi r13,r11,56
t=e+4;
 674:	35 6e 00 34 	addi r14,r11,52
dind=100000;
 678:	38 0c 86 a0 	mvu r12,0x86a0
 67c:	79 8c 00 01 	orhi r12,r12,0x1
e=e+48;
 680:	35 6b 00 30 	addi r11,r11,48
 684:	e3 ff ff d4 	bi 5d4 <_ZN3pwm7pwm_selEicb+0x48>

00000688 <_ZN3pwm5brazoEc>:

int pwm::brazo(char d){
 688:	20 42 00 ff 	andi r2,r2,0xff
int m;
if(d==0x01){m=0;}
if(d==0x02){m=1;}
 68c:	34 03 00 02 	mvi r3,2
 690:	34 01 00 01 	mvi r1,1
 694:	44 43 00 04 	be r2,r3,6a4 <_ZN3pwm5brazoEc+0x1c>
if(d==0x03){m=2;}
 698:	34 03 00 03 	mvi r3,3
 69c:	34 01 00 02 	mvi r1,2
 6a0:	5c 43 00 02 	bne r2,r3,6a8 <_ZN3pwm5brazoEc+0x20>
if(d==0x04){m=3;}
return m;
};
 6a4:	c3 a0 00 00 	ret
if(d==0x04){m=3;}
 6a8:	34 03 00 04 	mvi r3,4
 6ac:	34 01 00 00 	mvi r1,0
 6b0:	5c 43 ff fd 	bne r2,r3,6a4 <_ZN3pwm5brazoEc+0x1c>
 6b4:	34 01 00 03 	mvi r1,3
};
 6b8:	c3 a0 00 00 	ret

000006bc <_ZN5timer6nsleepEi>:
void timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 6bc:	78 03 00 00 	mvhi r3,0x0
 6c0:	38 63 08 3c 	ori r3,r3,0x83c
 6c4:	28 61 00 00 	lw r1,(r3+0)
 6c8:	08 42 00 32 	muli r2,r2,50
 6cc:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 6d0:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 6d4:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 6d8:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 6dc:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 6e0:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 6e4:	20 21 00 01 	andi r1,r1,0x1
 6e8:	44 20 ff fe 	be r1,r0,6e0 <_ZN5timer6nsleepEi+0x24>
};
 6ec:	c3 a0 00 00 	ret

000006f0 <_ZN4uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 6f0:	c3 a0 00 00 	ret

000006f4 <_ZN4uart12uart_getcharEv>:

char uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 6f4:	78 02 00 00 	mvhi r2,0x0
 6f8:	38 42 08 40 	ori r2,r2,0x840
 6fc:	28 41 00 00 	lw r1,(r2+0)
 700:	28 22 00 00 	lw r2,(r1+0)
 704:	28 41 00 00 	lw r1,(r2+0)
 708:	20 21 00 01 	andi r1,r1,0x1
 70c:	44 20 ff fe 	be r1,r0,704 <_ZN4uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 710:	28 41 00 04 	lw r1,(r2+4)
}
 714:	20 21 00 ff 	andi r1,r1,0xff
 718:	c3 a0 00 00 	ret

0000071c <_ZN4uart12uart_putcharEc>:

void uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 71c:	78 03 00 00 	mvhi r3,0x0
 720:	38 63 08 44 	ori r3,r3,0x844
 724:	28 61 00 00 	lw r1,(r3+0)
{
 728:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 72c:	28 23 00 00 	lw r3,(r1+0)
 730:	28 61 00 00 	lw r1,(r3+0)
 734:	20 21 00 10 	andi r1,r1,0x10
 738:	5c 20 ff fe 	bne r1,r0,730 <_ZN4uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 73c:	58 62 00 04 	sw (r3+4),r2
}
 740:	c3 a0 00 00 	ret

00000744 <_ZN4uart11uart_putstrEPc>:

void uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 744:	40 44 00 00 	lbu r4,(r2+0)
 748:	44 80 00 0c 	be r4,r0,778 <_ZN4uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 74c:	78 03 00 00 	mvhi r3,0x0
 750:	38 63 08 48 	ori r3,r3,0x848
 754:	28 61 00 00 	lw r1,(r3+0)
 758:	28 23 00 00 	lw r3,(r1+0)
 75c:	28 61 00 00 	lw r1,(r3+0)
 760:	20 21 00 10 	andi r1,r1,0x10
 764:	5c 20 ff fe 	bne r1,r0,75c <_ZN4uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 768:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 76c:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 770:	40 44 00 00 	lbu r4,(r2+0)
 774:	5c 80 ff fa 	bne r4,r0,75c <_ZN4uart11uart_putstrEPc+0x18>
	}
}
 778:	c3 a0 00 00 	ret

0000077c <_ZN4uart11uart_getintEv>:

int uart::uart_getint()
{   
	while (! (uart0->ucr & UART_DR)) ;
 77c:	78 02 00 00 	mvhi r2,0x0
 780:	38 42 08 4c 	ori r2,r2,0x84c
 784:	28 41 00 00 	lw r1,(r2+0)
 788:	28 22 00 00 	lw r2,(r1+0)
 78c:	28 41 00 00 	lw r1,(r2+0)
 790:	20 21 00 01 	andi r1,r1,0x1
 794:	44 20 ff fe 	be r1,r0,78c <_ZN4uart11uart_getintEv+0x10>
	return uart0->rxtx;
 798:	28 41 00 04 	lw r1,(r2+4)
}
 79c:	c3 a0 00 00 	ret

000007a0 <_ZN6camera5tomarEv>:
#include "camera.h"
#include "soc-hw.h"


void camera::tomar()
{
 7a0:	37 9c ff fc 	addi sp,sp,-4
 7a4:	5b 9d 00 04 	sw (sp+4),ra
tomarfoto();
 7a8:	fb ff fe d0 	calli 2e8 <_Z9tomarfotov>
};
 7ac:	2b 9d 00 04 	lw ra,(sp+4)
 7b0:	37 9c 00 04 	addi sp,sp,4
 7b4:	c3 a0 00 00 	ret

000007b8 <_ZN6camera4leerEv>:


char32_t camera::leer()
{
 7b8:	37 9c ff fc 	addi sp,sp,-4
 7bc:	5b 9d 00 04 	sw (sp+4),ra
leerfoto();
 7c0:	fb ff fe d2 	calli 308 <_Z8leerfotov>
}; 
 7c4:	2b 9d 00 04 	lw ra,(sp+4)
 7c8:	37 9c 00 04 	addi sp,sp,4
 7cc:	c3 a0 00 00 	ret
