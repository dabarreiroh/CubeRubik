
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000098  00000ed4  00000ed4  00000f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000f6c  00000f6c  00000fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000f84  00000f84  00000fd8  2**2
                  ALLOC
  4 .debug_frame  000002d4  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039ad  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000906  00000000  00000000  00004c59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00002965  00000000  00000000  0000555f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  00007ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00007f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f06  00000000  00000000  00007fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005b2  00000000  00000000  00008eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  0000947c  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 e0 	calli 44c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 1f fc 	ori sp,sp,0x1ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0f 90 	ori gp,gp,0xf90
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0f 84 	ori r1,r1,0xf84
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 10 08 	ori r3,r3,0x1008

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "clase_pwm.h"
#include "clase_timer.h"
#include "clase_uart.h"
//******************************comandos por UART**********************************

int main(){
 208:	37 9c ff d4 	addi sp,sp,-44
 20c:	5b 8b 00 1c 	sw (sp+28),r11
 210:	5b 8c 00 18 	sw (sp+24),r12
 214:	5b 8d 00 14 	sw (sp+20),r13
 218:	5b 8e 00 10 	sw (sp+16),r14
 21c:	5b 8f 00 0c 	sw (sp+12),r15
 220:	5b 90 00 08 	sw (sp+8),r16
 224:	5b 9d 00 04 	sw (sp+4),ra
 
    while (1){
        comando=uart.uart_getchar();
        uart.uart_putchar(comando);
           
        if (comando==0xFF){      //Home----DT
 228:	34 0c 00 ff 	mvi r12,255
                arm.setMov(0X02,0X12); //C 
                arm.setMov(0X03,0X12); //C
                arm.setMov(0X04,0X12); //C
            }
        }  
        else if (comando==0xFE){      //Init----AT
 22c:	34 0d 00 fe 	mvi r13,254
                arm.setMov(0X02,0X14); //A
                arm.setMov(0X03,0X14); //A
                arm.setMov(0X04,0X14); //A
            }
        }
        else if (comando==0XFD){
 230:	34 0e 00 fd 	mvi r14,253
            char b=uart.uart_getchar(); //brazo
                char c=uart.uart_getchar();  //movimiento
                    comando=uart.uart_getchar();          
                    if(comando==0xF0){ 
 234:	34 0f 00 f0 	mvi r15,240
        comando=uart.uart_getchar();
 238:	37 81 00 28 	addi r1,sp,40
 23c:	f8 00 03 04 	calli e4c <_ZN10clase_uart12uart_getcharEv>
 240:	b8 20 58 00 	mv r11,r1
        uart.uart_putchar(comando);
 244:	b8 20 10 00 	mv r2,r1
 248:	37 81 00 28 	addi r1,sp,40
 24c:	f8 00 03 0a 	calli e74 <_ZN10clase_uart12uart_putcharEc>
        if (comando==0xFF){      //Home----DT
 250:	45 6c 00 17 	be r11,r12,2ac <main+0xa4>
        else if (comando==0xFE){      //Init----AT
 254:	45 6d 00 3a 	be r11,r13,33c <main+0x134>
        else if (comando==0XFD){
 258:	5d 6e ff f8 	bne r11,r14,238 <main+0x30>
            char b=uart.uart_getchar(); //brazo
 25c:	37 81 00 28 	addi r1,sp,40
 260:	f8 00 02 fb 	calli e4c <_ZN10clase_uart12uart_getcharEv>
 264:	b8 20 58 00 	mv r11,r1
                char c=uart.uart_getchar();  //movimiento
 268:	37 81 00 28 	addi r1,sp,40
 26c:	f8 00 02 f8 	calli e4c <_ZN10clase_uart12uart_getcharEv>
 270:	b8 20 80 00 	mv r16,r1
                    comando=uart.uart_getchar();          
 274:	37 81 00 28 	addi r1,sp,40
 278:	f8 00 02 f5 	calli e4c <_ZN10clase_uart12uart_getcharEv>
                    if(comando==0xF0){ 
 27c:	5c 2f ff ef 	bne r1,r15,238 <main+0x30>
                        arm.setMov(b,c); // (brazo,movimiento)
 280:	b9 60 10 00 	mv r2,r11
 284:	ba 00 18 00 	mv r3,r16
 288:	37 81 00 20 	addi r1,sp,32
 28c:	f8 00 01 22 	calli 714 <_ZN9clase_pwm6setMovEcc>
        comando=uart.uart_getchar();
 290:	37 81 00 28 	addi r1,sp,40
 294:	f8 00 02 ee 	calli e4c <_ZN10clase_uart12uart_getcharEv>
 298:	b8 20 58 00 	mv r11,r1
        uart.uart_putchar(comando);
 29c:	b8 20 10 00 	mv r2,r1
 2a0:	37 81 00 28 	addi r1,sp,40
 2a4:	f8 00 02 f4 	calli e74 <_ZN10clase_uart12uart_putcharEc>
        if (comando==0xFF){      //Home----DT
 2a8:	5d 6c ff eb 	bne r11,r12,254 <main+0x4c>
            comando=uart.uart_getchar();
 2ac:	37 81 00 28 	addi r1,sp,40
 2b0:	f8 00 02 e7 	calli e4c <_ZN10clase_uart12uart_getcharEv>
            if(comando==0xF0){            
 2b4:	5c 2f ff e1 	bne r1,r15,238 <main+0x30>
                arm.setMov(0X01,0X13); //D
 2b8:	37 81 00 20 	addi r1,sp,32
 2bc:	34 03 00 13 	mvi r3,19
 2c0:	34 02 00 01 	mvi r2,1
 2c4:	f8 00 01 14 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X02,0X13); //D
 2c8:	37 81 00 20 	addi r1,sp,32
 2cc:	34 03 00 13 	mvi r3,19
 2d0:	34 02 00 02 	mvi r2,2
 2d4:	f8 00 01 10 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X03,0X13); //D
 2d8:	37 81 00 20 	addi r1,sp,32
 2dc:	34 03 00 13 	mvi r3,19
 2e0:	34 02 00 03 	mvi r2,3
 2e4:	f8 00 01 0c 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X04,0X13); //D
 2e8:	37 81 00 20 	addi r1,sp,32
 2ec:	34 03 00 13 	mvi r3,19
 2f0:	34 02 00 04 	mvi r2,4
 2f4:	f8 00 01 08 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X01,0X12); //C 
 2f8:	37 81 00 20 	addi r1,sp,32
 2fc:	34 03 00 12 	mvi r3,18
 300:	34 02 00 01 	mvi r2,1
 304:	f8 00 01 04 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X02,0X12); //C 
 308:	37 81 00 20 	addi r1,sp,32
 30c:	34 03 00 12 	mvi r3,18
 310:	34 02 00 02 	mvi r2,2
 314:	f8 00 01 00 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X03,0X12); //C
 318:	37 81 00 20 	addi r1,sp,32
 31c:	34 03 00 12 	mvi r3,18
 320:	34 02 00 03 	mvi r2,3
 324:	f8 00 00 fc 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X04,0X12); //C
 328:	34 03 00 12 	mvi r3,18
 32c:	34 02 00 04 	mvi r2,4
 330:	37 81 00 20 	addi r1,sp,32
 334:	f8 00 00 f8 	calli 714 <_ZN9clase_pwm6setMovEcc>
 338:	e3 ff ff c0 	bi 238 <main+0x30>
            comando=uart.uart_getchar();
 33c:	37 81 00 28 	addi r1,sp,40
 340:	f8 00 02 c3 	calli e4c <_ZN10clase_uart12uart_getcharEv>
            if(comando==0xF0){ 
 344:	5c 2f ff bd 	bne r1,r15,238 <main+0x30>
                arm.setMov(0X01,0X12); //C
 348:	37 81 00 20 	addi r1,sp,32
 34c:	34 03 00 12 	mvi r3,18
 350:	34 02 00 01 	mvi r2,1
 354:	f8 00 00 f0 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X02,0X12); //C  
 358:	37 81 00 20 	addi r1,sp,32
 35c:	34 03 00 12 	mvi r3,18
 360:	34 02 00 02 	mvi r2,2
 364:	f8 00 00 ec 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X03,0X12); //C
 368:	37 81 00 20 	addi r1,sp,32
 36c:	34 03 00 12 	mvi r3,18
 370:	34 02 00 03 	mvi r2,3
 374:	f8 00 00 e8 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X04,0X12); //C
 378:	37 81 00 20 	addi r1,sp,32
 37c:	34 03 00 12 	mvi r3,18
 380:	34 02 00 04 	mvi r2,4
 384:	f8 00 00 e4 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X01,0X14); //A
 388:	37 81 00 20 	addi r1,sp,32
 38c:	34 03 00 14 	mvi r3,20
 390:	34 02 00 01 	mvi r2,1
 394:	f8 00 00 e0 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X02,0X14); //A
 398:	37 81 00 20 	addi r1,sp,32
 39c:	34 03 00 14 	mvi r3,20
 3a0:	34 02 00 02 	mvi r2,2
 3a4:	f8 00 00 dc 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X03,0X14); //A
 3a8:	37 81 00 20 	addi r1,sp,32
 3ac:	34 03 00 14 	mvi r3,20
 3b0:	34 02 00 03 	mvi r2,3
 3b4:	f8 00 00 d8 	calli 714 <_ZN9clase_pwm6setMovEcc>
                arm.setMov(0X04,0X14); //A
 3b8:	34 03 00 14 	mvi r3,20
 3bc:	34 02 00 04 	mvi r2,4
 3c0:	37 81 00 20 	addi r1,sp,32
 3c4:	f8 00 00 d4 	calli 714 <_ZN9clase_pwm6setMovEcc>
 3c8:	e3 ff ff 9c 	bi 238 <main+0x30>

000003cc <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 3cc:	78 01 00 00 	mvhi r1,0x0
 3d0:	38 21 0e d4 	ori r1,r1,0xed4
 3d4:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3d8:	78 04 00 00 	mvhi r4,0x0
 3dc:	38 84 0e d8 	ori r4,r4,0xed8
 3e0:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 3e4:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3e8:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 3ec:	34 21 00 01 	addi r1,r1,1
 3f0:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3f4:	34 01 00 0e 	mvi r1,14
 3f8:	58 61 00 00 	sw (r3+0),r1
}
 3fc:	c3 a0 00 00 	ret

00000400 <isr_null>:
 400:	c3 a0 00 00 	ret

00000404 <gpio_config_dir>:
	gpio0 -> dir = vdir;
 404:	78 03 00 00 	mvhi r3,0x0
 408:	38 63 0e dc 	ori r3,r3,0xedc
 40c:	28 62 00 00 	lw r2,(r3+0)
 410:	28 42 00 00 	lw r2,(r2+0)
 414:	58 41 00 08 	sw (r2+8),r1
}
 418:	c3 a0 00 00 	ret

0000041c <gpio_write>:
	gpio0 -> wr = vpins;
 41c:	78 03 00 00 	mvhi r3,0x0
 420:	38 63 0e e0 	ori r3,r3,0xee0
 424:	28 62 00 00 	lw r2,(r3+0)
 428:	28 42 00 00 	lw r2,(r2+0)
 42c:	58 41 00 04 	sw (r2+4),r1
}
 430:	c3 a0 00 00 	ret

00000434 <gpio_read>:
	return gpio0 -> rd;
 434:	78 02 00 00 	mvhi r2,0x0
 438:	38 42 0e e4 	ori r2,r2,0xee4
 43c:	28 41 00 00 	lw r1,(r2+0)
 440:	28 21 00 00 	lw r1,(r1+0)
 444:	28 21 00 00 	lw r1,(r1+0)
}
 448:	c3 a0 00 00 	ret

0000044c <irq_handler>:
{
 44c:	37 9c ff f0 	addi sp,sp,-16
 450:	5b 8b 00 10 	sw (sp+16),r11
 454:	5b 8c 00 0c 	sw (sp+12),r12
 458:	5b 8d 00 08 	sw (sp+8),r13
 45c:	5b 9d 00 04 	sw (sp+4),ra
 460:	78 02 00 00 	mvhi r2,0x0
 464:	38 42 0e e8 	ori r2,r2,0xee8
 468:	28 4b 00 00 	lw r11,(r2+0)
 46c:	b8 20 60 00 	mv r12,r1
 470:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 474:	21 81 00 01 	andi r1,r12,0x1
 478:	44 20 00 03 	be r1,r0,484 <irq_handler+0x38>
 47c:	29 61 00 00 	lw r1,(r11+0)
 480:	d8 20 00 00 	call r1
 484:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 488:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 48c:	5d ab ff fa 	bne r13,r11,474 <irq_handler+0x28>
}
 490:	2b 9d 00 04 	lw ra,(sp+4)
 494:	2b 8b 00 10 	lw r11,(sp+16)
 498:	2b 8c 00 0c 	lw r12,(sp+12)
 49c:	2b 8d 00 08 	lw r13,(sp+8)
 4a0:	37 9c 00 10 	addi sp,sp,16
 4a4:	c3 a0 00 00 	ret

000004a8 <isr_init>:
{
 4a8:	78 02 00 00 	mvhi r2,0x0
 4ac:	38 42 0e ec 	ori r2,r2,0xeec
 4b0:	28 41 00 00 	lw r1,(r2+0)
 4b4:	78 02 00 00 	mvhi r2,0x0
 4b8:	38 42 0e f0 	ori r2,r2,0xef0
 4bc:	28 43 00 00 	lw r3,(r2+0)
 4c0:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 4c4:	58 23 00 00 	sw (r1+0),r3
 4c8:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 4cc:	5c 22 ff fe 	bne r1,r2,4c4 <isr_init+0x1c>
}
 4d0:	c3 a0 00 00 	ret

000004d4 <isr_register>:
	isr_table[irq] = isr;
 4d4:	78 04 00 00 	mvhi r4,0x0
 4d8:	38 84 0e f4 	ori r4,r4,0xef4
 4dc:	3c 23 00 02 	sli r3,r1,2
 4e0:	28 81 00 00 	lw r1,(r4+0)
 4e4:	b4 23 08 00 	add r1,r1,r3
 4e8:	58 22 00 00 	sw (r1+0),r2
}
 4ec:	c3 a0 00 00 	ret

000004f0 <isr_unregister>:
	isr_table[irq] = &isr_null;
 4f0:	78 03 00 00 	mvhi r3,0x0
 4f4:	38 63 0e f8 	ori r3,r3,0xef8
 4f8:	3c 22 00 02 	sli r2,r1,2
 4fc:	28 61 00 00 	lw r1,(r3+0)
 500:	78 03 00 00 	mvhi r3,0x0
 504:	38 63 0e fc 	ori r3,r3,0xefc
 508:	b4 22 08 00 	add r1,r1,r2
 50c:	28 62 00 00 	lw r2,(r3+0)
 510:	58 22 00 00 	sw (r1+0),r2
}
 514:	c3 a0 00 00 	ret

00000518 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 518:	78 03 00 00 	mvhi r3,0x0
 51c:	38 02 86 a0 	mvu r2,0x86a0
 520:	78 42 00 01 	orhi r2,r2,0x1
 524:	38 63 0f 00 	ori r3,r3,0xf00
 528:	88 22 08 00 	mul r1,r1,r2
 52c:	28 62 00 00 	lw r2,(r3+0)
 530:	28 42 00 00 	lw r2,(r2+0)
 534:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 538:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 53c:	34 01 00 08 	mvi r1,8
 540:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 544:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 548:	20 21 00 01 	andi r1,r1,0x1
 54c:	44 20 ff fe 	be r1,r0,544 <msleep+0x2c>
}
 550:	c3 a0 00 00 	ret

00000554 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 554:	78 03 00 00 	mvhi r3,0x0
 558:	38 63 0f 04 	ori r3,r3,0xf04
 55c:	28 62 00 00 	lw r2,(r3+0)
 560:	08 21 00 64 	muli r1,r1,100
 564:	28 42 00 00 	lw r2,(r2+0)
 568:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 56c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 570:	34 01 00 08 	mvi r1,8
 574:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 578:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 57c:	20 21 00 01 	andi r1,r1,0x1
 580:	44 20 ff fe 	be r1,r0,578 <nsleep+0x24>
}
 584:	c3 a0 00 00 	ret

00000588 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 588:	78 02 00 00 	mvhi r2,0x0
 58c:	38 42 0f 08 	ori r2,r2,0xf08
 590:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 594:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 598:	34 02 27 10 	mvi r2,10000
 59c:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 5a0:	38 63 0f 0c 	ori r3,r3,0xf0c
	timer0->compare0 = (FCPU/10000);
 5a4:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 5a8:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 5ac:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 5b0:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 5b4:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5b8:	34 02 00 0e 	mvi r2,14
 5bc:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 0f 10 	ori r2,r2,0xf10
 5c8:	38 63 0f 14 	ori r3,r3,0xf14
 5cc:	28 41 00 00 	lw r1,(r2+0)
 5d0:	28 62 00 00 	lw r2,(r3+0)
 5d4:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 5d8:	c3 a0 00 00 	ret

000005dc <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 5dc:	c3 a0 00 00 	ret

000005e0 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 5e0:	78 02 00 00 	mvhi r2,0x0
 5e4:	38 42 0f 18 	ori r2,r2,0xf18
 5e8:	28 41 00 00 	lw r1,(r2+0)
 5ec:	28 22 00 00 	lw r2,(r1+0)
 5f0:	28 41 00 00 	lw r1,(r2+0)
 5f4:	20 21 00 01 	andi r1,r1,0x1
 5f8:	44 20 ff fe 	be r1,r0,5f0 <uart_getchar+0x10>
	return uart0->rxtx;
 5fc:	28 41 00 04 	lw r1,(r2+4)
}
 600:	20 21 00 ff 	andi r1,r1,0xff
 604:	c3 a0 00 00 	ret

00000608 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 608:	78 03 00 00 	mvhi r3,0x0
 60c:	38 63 0f 1c 	ori r3,r3,0xf1c
 610:	28 62 00 00 	lw r2,(r3+0)
{
 614:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 618:	28 43 00 00 	lw r3,(r2+0)
 61c:	28 62 00 00 	lw r2,(r3+0)
 620:	20 42 00 10 	andi r2,r2,0x10
 624:	5c 40 ff fe 	bne r2,r0,61c <uart_putchar+0x14>
	uart0->rxtx = c;
 628:	58 61 00 04 	sw (r3+4),r1
}
 62c:	c3 a0 00 00 	ret

00000630 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 630:	40 24 00 00 	lbu r4,(r1+0)
 634:	44 80 00 0c 	be r4,r0,664 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 638:	78 03 00 00 	mvhi r3,0x0
 63c:	38 63 0f 20 	ori r3,r3,0xf20
 640:	28 62 00 00 	lw r2,(r3+0)
 644:	28 43 00 00 	lw r3,(r2+0)
 648:	28 62 00 00 	lw r2,(r3+0)
 64c:	20 42 00 10 	andi r2,r2,0x10
 650:	5c 40 ff fe 	bne r2,r0,648 <uart_putstr+0x18>
	uart0->rxtx = c;
 654:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 658:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 65c:	40 24 00 00 	lbu r4,(r1+0)
 660:	5c 80 ff fa 	bne r4,r0,648 <uart_putstr+0x18>
	}
}
 664:	c3 a0 00 00 	ret

00000668 <i2c_init>:
 * I2C Functions
*/
void i2c_init()
{

	i2c0->prerl =0x00;
 668:	78 02 00 00 	mvhi r2,0x0
 66c:	38 42 0f 24 	ori r2,r2,0xf24
 670:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 674:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 678:	28 21 00 00 	lw r1,(r1+0)
 67c:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 680:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 684:	34 02 ff 80 	mvi r2,-128
 688:	30 22 00 02 	sb (r1+2),r2


}
 68c:	c3 a0 00 00 	ret

00000690 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 690:	78 05 00 00 	mvhi r5,0x0
 694:	38 a5 0f 28 	ori r5,r5,0xf28
 698:	28 a4 00 00 	lw r4,(r5+0)
 69c:	3c 21 00 02 	sli r1,r1,2
{
 6a0:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 6a4:	28 84 00 00 	lw r4,(r4+0)
 6a8:	20 21 00 fc 	andi r1,r1,0xfc
{
 6ac:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 6b0:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 6b4:	34 01 ff 90 	mvi r1,-112
 6b8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6bc:	40 81 00 04 	lbu r1,(r4+4)
 6c0:	20 21 00 02 	andi r1,r1,0x2
 6c4:	5c 20 ff fe 	bne r1,r0,6bc <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 6c8:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 6cc:	34 01 00 10 	mvi r1,16
 6d0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6d4:	40 81 00 04 	lbu r1,(r4+4)
 6d8:	20 21 00 02 	andi r1,r1,0x2
 6dc:	5c 20 ff fe 	bne r1,r0,6d4 <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 6e0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 6e4:	34 01 00 10 	mvi r1,16
 6e8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6ec:	40 81 00 04 	lbu r1,(r4+4)
 6f0:	20 21 00 02 	andi r1,r1,0x2
 6f4:	5c 20 ff fe 	bne r1,r0,6ec <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 6f8:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 6fc:	34 01 00 50 	mvi r1,80
 700:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 704:	40 81 00 04 	lbu r1,(r4+4)
 708:	20 21 00 02 	andi r1,r1,0x2
 70c:	5c 20 ff fe 	bne r1,r0,704 <i2c_write+0x74>
//7

}
 710:	c3 a0 00 00 	ret

00000714 <_ZN9clase_pwm6setMovEcc>:
}
void clase_pwm:: pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
}
void clase_pwm:: pwm_wr(uint8_t vwr){
pwm -> wr = vwr;
 714:	78 04 00 00 	mvhi r4,0x0
 718:	38 84 0f 2c 	ori r4,r4,0xf2c
 71c:	28 81 00 00 	lw r1,(r4+0)
 720:	34 05 00 01 	mvi r5,1
void clase_pwm::setMov(char b, char com){
 724:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 728:	28 21 00 00 	lw r1,(r1+0)
    if (b == 0x01){        //Arm 1 -> Servo 0 (RLC) & 1(DA)
 72c:	34 04 00 01 	mvi r4,1
void clase_pwm::setMov(char b, char com){
 730:	20 63 00 ff 	andi r3,r3,0xff
pwm -> wr = vwr;
 734:	30 25 00 0c 	sb (r1+12),r5
pwm -> rd = vrd;
 738:	30 20 00 04 	sb (r1+4),r0
    if (b == 0x01){        //Arm 1 -> Servo 0 (RLC) & 1(DA)
 73c:	44 44 00 28 	be r2,r4,7dc <_ZN9clase_pwm6setMovEcc+0xc8>
    if (b == 0x02){        //Arm 2 -> Servo 2 (RLC) & 3(DA)
 740:	34 05 00 02 	mvi r5,2
 744:	5c 45 00 0c 	bne r2,r5,774 <_ZN9clase_pwm6setMovEcc+0x60>
        if (com==0x10){           //S2
 748:	34 02 00 10 	mvi r2,16
 74c:	44 62 00 60 	be r3,r2,8cc <_ZN9clase_pwm6setMovEcc+0x1b8>
        else if(com==0x11){       //S2
 750:	34 02 00 11 	mvi r2,17
 754:	44 62 00 51 	be r3,r2,898 <_ZN9clase_pwm6setMovEcc+0x184>
        else if(com==0x12){       //S2
 758:	34 02 00 12 	mvi r2,18
 75c:	44 62 00 85 	be r3,r2,970 <_ZN9clase_pwm6setMovEcc+0x25c>
        else if(com==0x13){       //S3
 760:	34 02 00 13 	mvi r2,19
 764:	44 62 00 ba 	be r3,r2,a4c <_ZN9clase_pwm6setMovEcc+0x338>
        else if(com==0x14){       //S3
 768:	34 02 00 14 	mvi r2,20
 76c:	44 62 00 aa 	be r3,r2,a14 <_ZN9clase_pwm6setMovEcc+0x300>
} //cierra setMov
 770:	c3 a0 00 00 	ret
    if (b == 0x03){        //Arm 3 -> Servo 4 (RLC) & 5(DA)
 774:	34 05 00 03 	mvi r5,3
 778:	5c 45 00 de 	bne r2,r5,af0 <_ZN9clase_pwm6setMovEcc+0x3dc>
        if (com==0x10){           //S4
 77c:	34 02 00 10 	mvi r2,16
 780:	44 62 00 6e 	be r3,r2,938 <_ZN9clase_pwm6setMovEcc+0x224>
        else if(com==0x11){       //S4
 784:	34 02 00 11 	mvi r2,17
 788:	44 62 00 37 	be r3,r2,864 <_ZN9clase_pwm6setMovEcc+0x150>
        else if(com==0x12){       //S4
 78c:	34 02 00 12 	mvi r2,18
 790:	44 62 00 93 	be r3,r2,9dc <_ZN9clase_pwm6setMovEcc+0x2c8>
        else if(com==0x13){       //S5
 794:	34 02 00 13 	mvi r2,19
 798:	44 62 00 bb 	be r3,r2,a84 <_ZN9clase_pwm6setMovEcc+0x370>
        else if(com==0x14){       //S5
 79c:	34 02 00 14 	mvi r2,20
 7a0:	5c 62 ff f4 	bne r3,r2,770 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 7a4:	34 02 00 44 	mvi r2,68
 7a8:	58 22 00 08 	sw (r1+8),r2
}
void clase_pwm:: pwm_din(uint32_t vd_in){
pwm -> d_in = vd_in;
 7ac:	38 02 84 80 	mvu r2,0x8480
 7b0:	78 42 00 1e 	orhi r2,r2,0x1e
 7b4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 7b8:	34 02 00 40 	mvi r2,64
 7bc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 7c0:	38 02 86 a0 	mvu r2,0x86a0
 7c4:	78 42 00 01 	orhi r2,r2,0x1
 7c8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 7cc:	34 02 00 3c 	mvi r2,60
 7d0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 7d4:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 7d8:	c3 a0 00 00 	ret
        if (com==0x10){           //S0
 7dc:	34 04 00 10 	mvi r4,16
 7e0:	44 64 00 49 	be r3,r4,904 <_ZN9clase_pwm6setMovEcc+0x1f0>
        else if(com==0x11){       //S0
 7e4:	34 05 00 11 	mvi r5,17
 7e8:	44 65 00 13 	be r3,r5,834 <_ZN9clase_pwm6setMovEcc+0x120>
        else if(com==0x12){       //S0
 7ec:	34 05 00 12 	mvi r5,18
 7f0:	44 65 00 6e 	be r3,r5,9a8 <_ZN9clase_pwm6setMovEcc+0x294>
        else if(com==0x13){       //S1
 7f4:	34 05 00 13 	mvi r5,19
 7f8:	44 65 00 b1 	be r3,r5,abc <_ZN9clase_pwm6setMovEcc+0x3a8>
        else if(com==0x14){       //S1
 7fc:	34 05 00 14 	mvi r5,20
 800:	5c 65 ff dc 	bne r3,r5,770 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 804:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 808:	38 03 84 80 	mvu r3,0x8480
 80c:	78 63 00 1e 	orhi r3,r3,0x1e
 810:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 814:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 818:	38 03 86 a0 	mvu r3,0x86a0
 81c:	78 63 00 01 	orhi r3,r3,0x1
 820:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 824:	34 03 00 0c 	mvi r3,12
 828:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 82c:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 830:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 834:	34 03 00 08 	mvi r3,8
 838:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 83c:	38 03 84 80 	mvu r3,0x8480
 840:	78 63 00 1e 	orhi r3,r3,0x1e
 844:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 848:	34 03 00 04 	mvi r3,4
 84c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 850:	38 03 ea 60 	mvu r3,0xea60
 854:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 858:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 85c:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 860:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 864:	34 02 00 38 	mvi r2,56
 868:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 86c:	38 02 84 80 	mvu r2,0x8480
 870:	78 42 00 1e 	orhi r2,r2,0x1e
 874:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 878:	34 02 00 34 	mvi r2,52
 87c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 880:	38 02 ea 60 	mvu r2,0xea60
 884:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 888:	34 02 00 30 	mvi r2,48
 88c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 890:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 894:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 898:	34 02 00 20 	mvi r2,32
 89c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8a0:	38 02 84 80 	mvu r2,0x8480
 8a4:	78 42 00 1e 	orhi r2,r2,0x1e
 8a8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8ac:	34 02 00 1c 	mvi r2,28
 8b0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8b4:	38 02 ea 60 	mvu r2,0xea60
 8b8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8bc:	34 02 00 18 	mvi r2,24
 8c0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8c4:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 8c8:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 8cc:	34 02 00 20 	mvi r2,32
 8d0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8d4:	38 02 84 80 	mvu r2,0x8480
 8d8:	78 42 00 1e 	orhi r2,r2,0x1e
 8dc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8e0:	34 02 00 1c 	mvi r2,28
 8e4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8e8:	38 02 6e e8 	mvu r2,0x6ee8
 8ec:	78 42 00 03 	orhi r2,r2,0x3
 8f0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8f4:	34 02 00 18 	mvi r2,24
 8f8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8fc:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 900:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 904:	34 03 00 08 	mvi r3,8
 908:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 90c:	38 03 84 80 	mvu r3,0x8480
 910:	78 63 00 1e 	orhi r3,r3,0x1e
 914:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 918:	34 03 00 04 	mvi r3,4
 91c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 920:	38 03 6e e8 	mvu r3,0x6ee8
 924:	78 63 00 03 	orhi r3,r3,0x3
 928:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 92c:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 930:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 934:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 938:	34 02 00 38 	mvi r2,56
 93c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 940:	38 02 84 80 	mvu r2,0x8480
 944:	78 42 00 1e 	orhi r2,r2,0x1e
 948:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 94c:	34 02 00 34 	mvi r2,52
 950:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 954:	38 02 6e e8 	mvu r2,0x6ee8
 958:	78 42 00 03 	orhi r2,r2,0x3
 95c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 960:	34 02 00 30 	mvi r2,48
 964:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 968:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 96c:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 970:	34 02 00 20 	mvi r2,32
 974:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 978:	38 02 84 80 	mvu r2,0x8480
 97c:	78 42 00 1e 	orhi r2,r2,0x1e
 980:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 984:	34 02 00 1c 	mvi r2,28
 988:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 98c:	38 02 fb d0 	mvu r2,0xfbd0
 990:	78 42 00 01 	orhi r2,r2,0x1
 994:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 998:	34 02 00 18 	mvi r2,24
 99c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9a0:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 9a4:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 9a8:	34 03 00 08 	mvi r3,8
 9ac:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 9b0:	38 03 84 80 	mvu r3,0x8480
 9b4:	78 63 00 1e 	orhi r3,r3,0x1e
 9b8:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 9bc:	34 03 00 04 	mvi r3,4
 9c0:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 9c4:	38 03 fb d0 	mvu r3,0xfbd0
 9c8:	78 63 00 01 	orhi r3,r3,0x1
 9cc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 9d0:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 9d4:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 9d8:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 9dc:	34 02 00 38 	mvi r2,56
 9e0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9e4:	38 02 84 80 	mvu r2,0x8480
 9e8:	78 42 00 1e 	orhi r2,r2,0x1e
 9ec:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9f0:	34 02 00 34 	mvi r2,52
 9f4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9f8:	38 02 fb d0 	mvu r2,0xfbd0
 9fc:	78 42 00 01 	orhi r2,r2,0x1
 a00:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a04:	34 02 00 30 	mvi r2,48
 a08:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a0c:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 a10:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 a14:	34 02 00 2c 	mvi r2,44
 a18:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a1c:	38 02 84 80 	mvu r2,0x8480
 a20:	78 42 00 1e 	orhi r2,r2,0x1e
 a24:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a28:	34 02 00 28 	mvi r2,40
 a2c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a30:	38 02 86 a0 	mvu r2,0x86a0
 a34:	78 42 00 01 	orhi r2,r2,0x1
 a38:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a3c:	34 02 00 24 	mvi r2,36
 a40:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a44:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 a48:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 a4c:	34 02 00 2c 	mvi r2,44
 a50:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a54:	38 02 84 80 	mvu r2,0x8480
 a58:	78 42 00 1e 	orhi r2,r2,0x1e
 a5c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a60:	34 02 00 28 	mvi r2,40
 a64:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a68:	38 02 a9 80 	mvu r2,0xa980
 a6c:	78 42 00 03 	orhi r2,r2,0x3
 a70:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a74:	34 02 00 24 	mvi r2,36
 a78:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a7c:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 a80:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 a84:	34 02 00 44 	mvi r2,68
 a88:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a8c:	38 02 84 80 	mvu r2,0x8480
 a90:	78 42 00 1e 	orhi r2,r2,0x1e
 a94:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a98:	34 02 00 40 	mvi r2,64
 a9c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 aa0:	38 02 a9 80 	mvu r2,0xa980
 aa4:	78 42 00 03 	orhi r2,r2,0x3
 aa8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 aac:	34 02 00 3c 	mvi r2,60
 ab0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ab4:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 ab8:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 abc:	34 03 00 14 	mvi r3,20
 ac0:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 ac4:	38 03 84 80 	mvu r3,0x8480
 ac8:	78 63 00 1e 	orhi r3,r3,0x1e
 acc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 ad0:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 ad4:	38 03 a9 80 	mvu r3,0xa980
 ad8:	78 63 00 03 	orhi r3,r3,0x3
 adc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 ae0:	34 03 00 0c 	mvi r3,12
 ae4:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 ae8:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 aec:	c3 a0 00 00 	ret
    if (b == 0x04){        //Arm 4 -> Servo 6 (RLC) & 7(DA)
 af0:	34 05 00 04 	mvi r5,4
 af4:	5c 45 ff 1f 	bne r2,r5,770 <_ZN9clase_pwm6setMovEcc+0x5c>
        if (com==0x10){           //S6
 af8:	34 02 00 10 	mvi r2,16
 afc:	44 62 00 17 	be r3,r2,b58 <_ZN9clase_pwm6setMovEcc+0x444>
        else if(com==0x11){       //S6
 b00:	34 02 00 11 	mvi r2,17
 b04:	44 62 00 23 	be r3,r2,b90 <_ZN9clase_pwm6setMovEcc+0x47c>
        else if(com==0x12){       //S6
 b08:	34 02 00 12 	mvi r2,18
 b0c:	44 62 00 2e 	be r3,r2,bc4 <_ZN9clase_pwm6setMovEcc+0x4b0>
        else if(com==0x13){       //S7
 b10:	34 02 00 13 	mvi r2,19
 b14:	44 62 00 3a 	be r3,r2,bfc <_ZN9clase_pwm6setMovEcc+0x4e8>
        else if(com==0x14){       //S7
 b18:	34 02 00 14 	mvi r2,20
 b1c:	5c 62 ff 15 	bne r3,r2,770 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 b20:	34 02 00 5c 	mvi r2,92
 b24:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b28:	38 02 84 80 	mvu r2,0x8480
 b2c:	78 42 00 1e 	orhi r2,r2,0x1e
 b30:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b34:	34 02 00 58 	mvi r2,88
 b38:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b3c:	38 02 86 a0 	mvu r2,0x86a0
 b40:	78 42 00 01 	orhi r2,r2,0x1
 b44:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b48:	34 02 00 54 	mvi r2,84
 b4c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b50:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 b54:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 b58:	34 02 00 50 	mvi r2,80
 b5c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b60:	38 02 84 80 	mvu r2,0x8480
 b64:	78 42 00 1e 	orhi r2,r2,0x1e
 b68:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b6c:	34 02 00 4c 	mvi r2,76
 b70:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b74:	38 02 6e e8 	mvu r2,0x6ee8
 b78:	78 42 00 03 	orhi r2,r2,0x3
 b7c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b80:	34 02 00 48 	mvi r2,72
 b84:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b88:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 b8c:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 b90:	34 02 00 50 	mvi r2,80
 b94:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b98:	38 02 84 80 	mvu r2,0x8480
 b9c:	78 42 00 1e 	orhi r2,r2,0x1e
 ba0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 ba4:	34 02 00 4c 	mvi r2,76
 ba8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bac:	38 02 ea 60 	mvu r2,0xea60
 bb0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bb4:	34 02 00 48 	mvi r2,72
 bb8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bbc:	58 24 00 10 	sw (r1+16),r4
 bc0:	e3 ff fe ec 	bi 770 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 bc4:	34 02 00 50 	mvi r2,80
 bc8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bcc:	38 02 84 80 	mvu r2,0x8480
 bd0:	78 42 00 1e 	orhi r2,r2,0x1e
 bd4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bd8:	34 02 00 4c 	mvi r2,76
 bdc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 be0:	38 02 fb d0 	mvu r2,0xfbd0
 be4:	78 42 00 01 	orhi r2,r2,0x1
 be8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bec:	34 02 00 48 	mvi r2,72
 bf0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bf4:	58 24 00 10 	sw (r1+16),r4
 bf8:	e3 ff fe de 	bi 770 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 bfc:	34 02 00 5c 	mvi r2,92
 c00:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 c04:	38 02 84 80 	mvu r2,0x8480
 c08:	78 42 00 1e 	orhi r2,r2,0x1e
 c0c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c10:	34 02 00 58 	mvi r2,88
 c14:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 c18:	38 02 a9 80 	mvu r2,0xa980
 c1c:	78 42 00 03 	orhi r2,r2,0x3
 c20:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c24:	34 02 00 54 	mvi r2,84
 c28:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 c2c:	58 24 00 10 	sw (r1+16),r4
 c30:	e3 ff fe d0 	bi 770 <_ZN9clase_pwm6setMovEcc+0x5c>

00000c34 <_ZN9clase_pwm4LeftEiii>:
pwm -> addr = vaddr;
 c34:	78 05 00 00 	mvhi r5,0x0
 c38:	38 a5 0f 30 	ori r5,r5,0xf30
 c3c:	28 a1 00 00 	lw r1,(r5+0)
 c40:	28 21 00 00 	lw r1,(r1+0)
 c44:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 c48:	38 02 84 80 	mvu r2,0x8480
 c4c:	78 42 00 1e 	orhi r2,r2,0x1e
 c50:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c54:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c58:	38 02 ea 60 	mvu r2,0xea60
 c5c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c60:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 c64:	34 02 00 01 	mvi r2,1
 c68:	58 22 00 10 	sw (r1+16),r2
}
 c6c:	c3 a0 00 00 	ret

00000c70 <_ZN9clase_pwm6CenterEiii>:
pwm -> addr = vaddr;
 c70:	78 05 00 00 	mvhi r5,0x0
 c74:	38 a5 0f 34 	ori r5,r5,0xf34
 c78:	28 a1 00 00 	lw r1,(r5+0)
 c7c:	28 21 00 00 	lw r1,(r1+0)
 c80:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 c84:	38 02 84 80 	mvu r2,0x8480
 c88:	78 42 00 1e 	orhi r2,r2,0x1e
 c8c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c90:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c94:	38 02 fb d0 	mvu r2,0xfbd0
 c98:	78 42 00 01 	orhi r2,r2,0x1
 c9c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 ca0:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 ca4:	34 02 00 01 	mvi r2,1
 ca8:	58 22 00 10 	sw (r1+16),r2
}
 cac:	c3 a0 00 00 	ret

00000cb0 <_ZN9clase_pwm5RightEiii>:
pwm -> addr = vaddr;
 cb0:	78 05 00 00 	mvhi r5,0x0
 cb4:	38 a5 0f 38 	ori r5,r5,0xf38
 cb8:	28 a1 00 00 	lw r1,(r5+0)
 cbc:	28 21 00 00 	lw r1,(r1+0)
 cc0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 cc4:	38 02 84 80 	mvu r2,0x8480
 cc8:	78 42 00 1e 	orhi r2,r2,0x1e
 ccc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 cd0:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 cd4:	38 02 6e e8 	mvu r2,0x6ee8
 cd8:	78 42 00 03 	orhi r2,r2,0x3
 cdc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 ce0:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 ce4:	34 02 00 01 	mvi r2,1
 ce8:	58 22 00 10 	sw (r1+16),r2
}
 cec:	c3 a0 00 00 	ret

00000cf0 <_ZN9clase_pwm5LeaveEiii>:
pwm -> addr = vaddr;
 cf0:	78 05 00 00 	mvhi r5,0x0
 cf4:	38 a5 0f 3c 	ori r5,r5,0xf3c
 cf8:	28 a1 00 00 	lw r1,(r5+0)
 cfc:	28 21 00 00 	lw r1,(r1+0)
 d00:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 d04:	38 02 84 80 	mvu r2,0x8480
 d08:	78 42 00 1e 	orhi r2,r2,0x1e
 d0c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 d10:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 d14:	38 02 a9 80 	mvu r2,0xa980
 d18:	78 42 00 03 	orhi r2,r2,0x3
 d1c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 d20:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 d24:	34 02 00 01 	mvi r2,1
 d28:	58 22 00 10 	sw (r1+16),r2
}
 d2c:	c3 a0 00 00 	ret

00000d30 <_ZN9clase_pwm4TakeEiii>:
pwm -> addr = vaddr;
 d30:	78 05 00 00 	mvhi r5,0x0
 d34:	38 a5 0f 40 	ori r5,r5,0xf40
 d38:	28 a1 00 00 	lw r1,(r5+0)
 d3c:	28 21 00 00 	lw r1,(r1+0)
 d40:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 d44:	38 02 84 80 	mvu r2,0x8480
 d48:	78 42 00 1e 	orhi r2,r2,0x1e
 d4c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 d50:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 d54:	38 02 86 a0 	mvu r2,0x86a0
 d58:	78 42 00 01 	orhi r2,r2,0x1
 d5c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 d60:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 d64:	34 02 00 01 	mvi r2,1
 d68:	58 22 00 10 	sw (r1+16),r2
}
 d6c:	c3 a0 00 00 	ret

00000d70 <_ZN9clase_pwm8pwm_readEv>:
	return pwm -> d_out;
 d70:	78 02 00 00 	mvhi r2,0x0
 d74:	38 42 0f 44 	ori r2,r2,0xf44
 d78:	28 41 00 00 	lw r1,(r2+0)
 d7c:	28 21 00 00 	lw r1,(r1+0)
 d80:	28 21 00 00 	lw r1,(r1+0)
}
 d84:	c3 a0 00 00 	ret

00000d88 <_ZN9clase_pwm6pwm_rdEh>:
pwm -> rd = vrd;
 d88:	78 03 00 00 	mvhi r3,0x0
 d8c:	38 63 0f 48 	ori r3,r3,0xf48
 d90:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_rd(uint8_t vrd){
 d94:	20 42 00 ff 	andi r2,r2,0xff
pwm -> rd = vrd;
 d98:	28 21 00 00 	lw r1,(r1+0)
 d9c:	30 22 00 04 	sb (r1+4),r2
}
 da0:	c3 a0 00 00 	ret

00000da4 <_ZN9clase_pwm8pwm_addrEj>:
pwm -> addr = vaddr;
 da4:	78 03 00 00 	mvhi r3,0x0
 da8:	38 63 0f 4c 	ori r3,r3,0xf4c
 dac:	28 61 00 00 	lw r1,(r3+0)
 db0:	28 21 00 00 	lw r1,(r1+0)
 db4:	58 22 00 08 	sw (r1+8),r2
}
 db8:	c3 a0 00 00 	ret

00000dbc <_ZN9clase_pwm6pwm_wrEh>:
pwm -> wr = vwr;
 dbc:	78 03 00 00 	mvhi r3,0x0
 dc0:	38 63 0f 50 	ori r3,r3,0xf50
 dc4:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_wr(uint8_t vwr){
 dc8:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 dcc:	28 21 00 00 	lw r1,(r1+0)
 dd0:	30 22 00 0c 	sb (r1+12),r2
}
 dd4:	c3 a0 00 00 	ret

00000dd8 <_ZN9clase_pwm7pwm_dinEj>:
pwm -> d_in = vd_in;
 dd8:	78 03 00 00 	mvhi r3,0x0
 ddc:	38 63 0f 54 	ori r3,r3,0xf54
 de0:	28 61 00 00 	lw r1,(r3+0)
 de4:	28 21 00 00 	lw r1,(r1+0)
 de8:	58 22 00 10 	sw (r1+16),r2
}
 dec:	c3 a0 00 00 	ret

00000df0 <_ZN11clase_timer6nsleepEi>:
void clase_timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 df0:	78 03 00 00 	mvhi r3,0x0
 df4:	38 63 0f 58 	ori r3,r3,0xf58
 df8:	28 61 00 00 	lw r1,(r3+0)
 dfc:	08 42 00 64 	muli r2,r2,100
 e00:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 e04:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 e08:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 e0c:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 e10:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 e14:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 e18:	20 21 00 01 	andi r1,r1,0x1
 e1c:	44 20 ff fe 	be r1,r0,e14 <_ZN11clase_timer6nsleepEi+0x24>
};
 e20:	c3 a0 00 00 	ret

00000e24 <_ZN10clase_uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 e24:	c3 a0 00 00 	ret

00000e28 <_ZN10clase_uart11uart_getintEv>:

int clase_uart::uart_getint()
{
    while   (!(uart0->ucr & UART_DR));
 e28:	78 02 00 00 	mvhi r2,0x0
 e2c:	38 42 0f 5c 	ori r2,r2,0xf5c
 e30:	28 41 00 00 	lw r1,(r2+0)
 e34:	28 22 00 00 	lw r2,(r1+0)
 e38:	28 41 00 00 	lw r1,(r2+0)
 e3c:	20 21 00 01 	andi r1,r1,0x1
 e40:	44 20 ff fe 	be r1,r0,e38 <_ZN10clase_uart11uart_getintEv+0x10>
    return uart0->rxtx;
 e44:	28 41 00 04 	lw r1,(r2+4)
    }
 e48:	c3 a0 00 00 	ret

00000e4c <_ZN10clase_uart12uart_getcharEv>:
char clase_uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 e4c:	78 02 00 00 	mvhi r2,0x0
 e50:	38 42 0f 60 	ori r2,r2,0xf60
 e54:	28 41 00 00 	lw r1,(r2+0)
 e58:	28 22 00 00 	lw r2,(r1+0)
 e5c:	28 41 00 00 	lw r1,(r2+0)
 e60:	20 21 00 01 	andi r1,r1,0x1
 e64:	44 20 ff fe 	be r1,r0,e5c <_ZN10clase_uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 e68:	28 41 00 04 	lw r1,(r2+4)
}
 e6c:	20 21 00 ff 	andi r1,r1,0xff
 e70:	c3 a0 00 00 	ret

00000e74 <_ZN10clase_uart12uart_putcharEc>:

void clase_uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 e74:	78 03 00 00 	mvhi r3,0x0
 e78:	38 63 0f 64 	ori r3,r3,0xf64
 e7c:	28 61 00 00 	lw r1,(r3+0)
{
 e80:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 e84:	28 23 00 00 	lw r3,(r1+0)
 e88:	28 61 00 00 	lw r1,(r3+0)
 e8c:	20 21 00 10 	andi r1,r1,0x10
 e90:	5c 20 ff fe 	bne r1,r0,e88 <_ZN10clase_uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 e94:	58 62 00 04 	sw (r3+4),r2
}
 e98:	c3 a0 00 00 	ret

00000e9c <_ZN10clase_uart11uart_putstrEPc>:

void clase_uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 e9c:	40 44 00 00 	lbu r4,(r2+0)
 ea0:	44 80 00 0c 	be r4,r0,ed0 <_ZN10clase_uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 ea4:	78 03 00 00 	mvhi r3,0x0
 ea8:	38 63 0f 68 	ori r3,r3,0xf68
 eac:	28 61 00 00 	lw r1,(r3+0)
 eb0:	28 23 00 00 	lw r3,(r1+0)
 eb4:	28 61 00 00 	lw r1,(r3+0)
 eb8:	20 21 00 10 	andi r1,r1,0x10
 ebc:	5c 20 ff fe 	bne r1,r0,eb4 <_ZN10clase_uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 ec0:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 ec4:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 ec8:	40 44 00 00 	lbu r4,(r2+0)
 ecc:	5c 80 ff fa 	bne r4,r0,eb4 <_ZN10clase_uart11uart_putstrEPc+0x18>
	}
}
 ed0:	c3 a0 00 00 	ret
