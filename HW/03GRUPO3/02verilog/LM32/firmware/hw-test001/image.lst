
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d80  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000080  00000d80  00000d80  00000dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000e00  00000e00  00000e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000e18  00000e18  00000e6c  2**2
                  ALLOC
  4 .debug_frame  00000268  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b77  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000897  00000000  00000000  00003c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000210d  00000000  00000000  000044e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  000065ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000310  00000000  00000000  0000668f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000df8  00000000  00000000  0000699f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004f9  00000000  00000000  00007797  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00007c90  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 7a 	calli 2b4 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0e 20 	ori gp,gp,0xe20
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0e 18 	ori r1,r1,0xe18
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0e 9c 	ori r3,r3,0xe9c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "clase_timer.h"
#include "clase_uart.h"



int main(){
 208:	37 9c ff f4 	addi sp,sp,-12
 20c:	5b 9d 00 04 	sw (sp+4),ra
char a;
clase_uart caption;
a=caption.uart_getchar();
 210:	37 81 00 08 	addi r1,sp,8
 214:	f8 00 02 b9 	calli cf8 <_ZN10clase_uart12uart_getcharEv>
caption.uart_putchar(a);
 218:	b8 20 10 00 	mv r2,r1
 21c:	37 81 00 08 	addi r1,sp,8
 220:	f8 00 02 c0 	calli d20 <_ZN10clase_uart12uart_putcharEc>
}
 224:	34 01 00 00 	mvi r1,0
 228:	2b 9d 00 04 	lw ra,(sp+4)
 22c:	37 9c 00 0c 	addi sp,sp,12
 230:	c3 a0 00 00 	ret

00000234 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 234:	78 01 00 00 	mvhi r1,0x0
 238:	38 21 0d 80 	ori r1,r1,0xd80
 23c:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 240:	78 04 00 00 	mvhi r4,0x0
 244:	38 84 0d 84 	ori r4,r4,0xd84
 248:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 24c:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 250:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 254:	34 21 00 01 	addi r1,r1,1
 258:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 25c:	34 01 00 0e 	mvi r1,14
 260:	58 61 00 00 	sw (r3+0),r1
}
 264:	c3 a0 00 00 	ret

00000268 <isr_null>:
 268:	c3 a0 00 00 	ret

0000026c <gpio_config_dir>:
	gpio0 -> dir = vdir;
 26c:	78 03 00 00 	mvhi r3,0x0
 270:	38 63 0d 88 	ori r3,r3,0xd88
 274:	28 62 00 00 	lw r2,(r3+0)
 278:	28 42 00 00 	lw r2,(r2+0)
 27c:	58 41 00 08 	sw (r2+8),r1
}
 280:	c3 a0 00 00 	ret

00000284 <gpio_write>:
	gpio0 -> wr = vpins;
 284:	78 03 00 00 	mvhi r3,0x0
 288:	38 63 0d 8c 	ori r3,r3,0xd8c
 28c:	28 62 00 00 	lw r2,(r3+0)
 290:	28 42 00 00 	lw r2,(r2+0)
 294:	58 41 00 04 	sw (r2+4),r1
}
 298:	c3 a0 00 00 	ret

0000029c <gpio_read>:
	return gpio0 -> rd;
 29c:	78 02 00 00 	mvhi r2,0x0
 2a0:	38 42 0d 90 	ori r2,r2,0xd90
 2a4:	28 41 00 00 	lw r1,(r2+0)
 2a8:	28 21 00 00 	lw r1,(r1+0)
 2ac:	28 21 00 00 	lw r1,(r1+0)
}
 2b0:	c3 a0 00 00 	ret

000002b4 <irq_handler>:
{
 2b4:	37 9c ff f0 	addi sp,sp,-16
 2b8:	5b 8b 00 10 	sw (sp+16),r11
 2bc:	5b 8c 00 0c 	sw (sp+12),r12
 2c0:	5b 8d 00 08 	sw (sp+8),r13
 2c4:	5b 9d 00 04 	sw (sp+4),ra
 2c8:	78 02 00 00 	mvhi r2,0x0
 2cc:	38 42 0d 94 	ori r2,r2,0xd94
 2d0:	28 4b 00 00 	lw r11,(r2+0)
 2d4:	b8 20 60 00 	mv r12,r1
 2d8:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 2dc:	21 81 00 01 	andi r1,r12,0x1
 2e0:	44 20 00 03 	be r1,r0,2ec <irq_handler+0x38>
 2e4:	29 61 00 00 	lw r1,(r11+0)
 2e8:	d8 20 00 00 	call r1
 2ec:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 2f0:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 2f4:	5d ab ff fa 	bne r13,r11,2dc <irq_handler+0x28>
}
 2f8:	2b 9d 00 04 	lw ra,(sp+4)
 2fc:	2b 8b 00 10 	lw r11,(sp+16)
 300:	2b 8c 00 0c 	lw r12,(sp+12)
 304:	2b 8d 00 08 	lw r13,(sp+8)
 308:	37 9c 00 10 	addi sp,sp,16
 30c:	c3 a0 00 00 	ret

00000310 <isr_init>:
{
 310:	78 02 00 00 	mvhi r2,0x0
 314:	38 42 0d 98 	ori r2,r2,0xd98
 318:	28 41 00 00 	lw r1,(r2+0)
 31c:	78 02 00 00 	mvhi r2,0x0
 320:	38 42 0d 9c 	ori r2,r2,0xd9c
 324:	28 43 00 00 	lw r3,(r2+0)
 328:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 32c:	58 23 00 00 	sw (r1+0),r3
 330:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 334:	5c 22 ff fe 	bne r1,r2,32c <isr_init+0x1c>
}
 338:	c3 a0 00 00 	ret

0000033c <isr_register>:
	isr_table[irq] = isr;
 33c:	78 04 00 00 	mvhi r4,0x0
 340:	38 84 0d a0 	ori r4,r4,0xda0
 344:	3c 23 00 02 	sli r3,r1,2
 348:	28 81 00 00 	lw r1,(r4+0)
 34c:	b4 23 08 00 	add r1,r1,r3
 350:	58 22 00 00 	sw (r1+0),r2
}
 354:	c3 a0 00 00 	ret

00000358 <isr_unregister>:
	isr_table[irq] = &isr_null;
 358:	78 03 00 00 	mvhi r3,0x0
 35c:	38 63 0d a4 	ori r3,r3,0xda4
 360:	3c 22 00 02 	sli r2,r1,2
 364:	28 61 00 00 	lw r1,(r3+0)
 368:	78 03 00 00 	mvhi r3,0x0
 36c:	38 63 0d a8 	ori r3,r3,0xda8
 370:	b4 22 08 00 	add r1,r1,r2
 374:	28 62 00 00 	lw r2,(r3+0)
 378:	58 22 00 00 	sw (r1+0),r2
}
 37c:	c3 a0 00 00 	ret

00000380 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 380:	78 03 00 00 	mvhi r3,0x0
 384:	38 02 86 a0 	mvu r2,0x86a0
 388:	78 42 00 01 	orhi r2,r2,0x1
 38c:	38 63 0d ac 	ori r3,r3,0xdac
 390:	88 22 08 00 	mul r1,r1,r2
 394:	28 62 00 00 	lw r2,(r3+0)
 398:	28 42 00 00 	lw r2,(r2+0)
 39c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3a0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3a4:	34 01 00 08 	mvi r1,8
 3a8:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 3ac:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3b0:	20 21 00 01 	andi r1,r1,0x1
 3b4:	44 20 ff fe 	be r1,r0,3ac <msleep+0x2c>
}
 3b8:	c3 a0 00 00 	ret

000003bc <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 3bc:	78 03 00 00 	mvhi r3,0x0
 3c0:	38 63 0d b0 	ori r3,r3,0xdb0
 3c4:	28 62 00 00 	lw r2,(r3+0)
 3c8:	08 21 00 64 	muli r1,r1,100
 3cc:	28 42 00 00 	lw r2,(r2+0)
 3d0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3d4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3d8:	34 01 00 08 	mvi r1,8
 3dc:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 3e0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3e4:	20 21 00 01 	andi r1,r1,0x1
 3e8:	44 20 ff fe 	be r1,r0,3e0 <nsleep+0x24>
}
 3ec:	c3 a0 00 00 	ret

000003f0 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3f0:	78 02 00 00 	mvhi r2,0x0
 3f4:	38 42 0d b4 	ori r2,r2,0xdb4
 3f8:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 3fc:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 400:	34 02 27 10 	mvi r2,10000
 404:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 408:	38 63 0d b8 	ori r3,r3,0xdb8
	timer0->compare0 = (FCPU/10000);
 40c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 410:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 414:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 418:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 41c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 420:	34 02 00 0e 	mvi r2,14
 424:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 428:	78 02 00 00 	mvhi r2,0x0
 42c:	38 42 0d bc 	ori r2,r2,0xdbc
 430:	38 63 0d c0 	ori r3,r3,0xdc0
 434:	28 41 00 00 	lw r1,(r2+0)
 438:	28 62 00 00 	lw r2,(r3+0)
 43c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 440:	c3 a0 00 00 	ret

00000444 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 444:	c3 a0 00 00 	ret

00000448 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 448:	78 02 00 00 	mvhi r2,0x0
 44c:	38 42 0d c4 	ori r2,r2,0xdc4
 450:	28 41 00 00 	lw r1,(r2+0)
 454:	28 22 00 00 	lw r2,(r1+0)
 458:	28 41 00 00 	lw r1,(r2+0)
 45c:	20 21 00 01 	andi r1,r1,0x1
 460:	44 20 ff fe 	be r1,r0,458 <uart_getchar+0x10>
	return uart0->rxtx;
 464:	28 41 00 04 	lw r1,(r2+4)
}
 468:	20 21 00 ff 	andi r1,r1,0xff
 46c:	c3 a0 00 00 	ret

00000470 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 470:	78 03 00 00 	mvhi r3,0x0
 474:	38 63 0d c8 	ori r3,r3,0xdc8
 478:	28 62 00 00 	lw r2,(r3+0)
{
 47c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 480:	28 43 00 00 	lw r3,(r2+0)
 484:	28 62 00 00 	lw r2,(r3+0)
 488:	20 42 00 10 	andi r2,r2,0x10
 48c:	5c 40 ff fe 	bne r2,r0,484 <uart_putchar+0x14>
	uart0->rxtx = c;
 490:	58 61 00 04 	sw (r3+4),r1
}
 494:	c3 a0 00 00 	ret

00000498 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 498:	40 24 00 00 	lbu r4,(r1+0)
 49c:	44 80 00 0c 	be r4,r0,4cc <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 4a0:	78 03 00 00 	mvhi r3,0x0
 4a4:	38 63 0d cc 	ori r3,r3,0xdcc
 4a8:	28 62 00 00 	lw r2,(r3+0)
 4ac:	28 43 00 00 	lw r3,(r2+0)
 4b0:	28 62 00 00 	lw r2,(r3+0)
 4b4:	20 42 00 10 	andi r2,r2,0x10
 4b8:	5c 40 ff fe 	bne r2,r0,4b0 <uart_putstr+0x18>
	uart0->rxtx = c;
 4bc:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 4c0:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 4c4:	40 24 00 00 	lbu r4,(r1+0)
 4c8:	5c 80 ff fa 	bne r4,r0,4b0 <uart_putstr+0x18>
	}
}
 4cc:	c3 a0 00 00 	ret

000004d0 <i2c_init>:
 * I2C Functions
*/
void i2c_init()
{

	i2c0->prerl =0x00;
 4d0:	78 02 00 00 	mvhi r2,0x0
 4d4:	38 42 0d d0 	ori r2,r2,0xdd0
 4d8:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 4dc:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 4e0:	28 21 00 00 	lw r1,(r1+0)
 4e4:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 4e8:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 4ec:	34 02 ff 80 	mvi r2,-128
 4f0:	30 22 00 02 	sb (r1+2),r2


}
 4f4:	c3 a0 00 00 	ret

000004f8 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 4f8:	78 05 00 00 	mvhi r5,0x0
 4fc:	38 a5 0d d4 	ori r5,r5,0xdd4
 500:	28 a4 00 00 	lw r4,(r5+0)
 504:	3c 21 00 02 	sli r1,r1,2
{
 508:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 50c:	28 84 00 00 	lw r4,(r4+0)
 510:	20 21 00 fc 	andi r1,r1,0xfc
{
 514:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 518:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 51c:	34 01 ff 90 	mvi r1,-112
 520:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 524:	40 81 00 04 	lbu r1,(r4+4)
 528:	20 21 00 02 	andi r1,r1,0x2
 52c:	5c 20 ff fe 	bne r1,r0,524 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 530:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 534:	34 01 00 10 	mvi r1,16
 538:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 53c:	40 81 00 04 	lbu r1,(r4+4)
 540:	20 21 00 02 	andi r1,r1,0x2
 544:	5c 20 ff fe 	bne r1,r0,53c <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 548:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 54c:	34 01 00 10 	mvi r1,16
 550:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 554:	40 81 00 04 	lbu r1,(r4+4)
 558:	20 21 00 02 	andi r1,r1,0x2
 55c:	5c 20 ff fe 	bne r1,r0,554 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 560:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 564:	34 01 00 50 	mvi r1,80
 568:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 56c:	40 81 00 04 	lbu r1,(r4+4)
 570:	20 21 00 02 	andi r1,r1,0x2
 574:	5c 20 ff fe 	bne r1,r0,56c <i2c_write+0x74>
//7

}
 578:	c3 a0 00 00 	ret

0000057c <_ZN9clase_pwm6setMovEii>:
uint32_t ae7=84;    uint32_t ad7=88;    uint32_t at7=92;

//Arm Selection


if (b == 1){      //Arm 1 -> Servos 0 (RLC) & 1(DA)
 57c:	34 01 00 01 	mvi r1,1
 580:	44 41 00 35 	be r2,r1,654 <_ZN9clase_pwm6setMovEii+0xd8>

}



if (b == 2){      //Arm 2 -> Servos 2 (RLC) & 3(DA)
 584:	34 04 00 02 	mvi r4,2
 588:	5c 44 00 19 	bne r2,r4,5ec <_ZN9clase_pwm6setMovEii+0x70>
    
    if (com == 10){ //L
 58c:	34 02 00 0a 	mvi r2,10
 590:	44 62 00 c7 	be r3,r2,8ac <_ZN9clase_pwm6setMovEii+0x330>
        pwm_din(dind);
        pwm_addr(ae2);
        pwm_din(on);
    }

    if (com == 11){ //C
 594:	34 02 00 0b 	mvi r2,11
 598:	5c 62 00 9f 	bne r3,r2,814 <_ZN9clase_pwm6setMovEii+0x298>
}
void clase_pwm:: pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
}
void clase_pwm:: pwm_wr(uint8_t vwr){
pwm -> wr = vwr;
 59c:	78 03 00 00 	mvhi r3,0x0
 5a0:	38 63 0d d8 	ori r3,r3,0xdd8
 5a4:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 5a8:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 5ac:	28 42 00 00 	lw r2,(r2+0)
 5b0:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 5b4:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 5b8:	58 43 00 08 	sw (r2+8),r3
}
void clase_pwm:: pwm_din(uint32_t vd_in){
pwm -> d_in = vd_in;
 5bc:	38 03 84 80 	mvu r3,0x8480
 5c0:	78 63 00 1e 	orhi r3,r3,0x1e
 5c4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 5c8:	34 03 00 1c 	mvi r3,28
 5cc:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 5d0:	38 03 e8 48 	mvu r3,0xe848
 5d4:	78 63 00 01 	orhi r3,r3,0x1
 5d8:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 5dc:	34 03 00 18 	mvi r3,24
 5e0:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 5e4:	58 41 00 10 	sw (r2+16),r1
};
 5e8:	c3 a0 00 00 	ret
if (b == 3){      //Arm 3 -> Servos 4 (RLC) & 5(DA)
 5ec:	34 04 00 03 	mvi r4,3
 5f0:	5c 44 00 2f 	bne r2,r4,6ac <_ZN9clase_pwm6setMovEii+0x130>
    if (com == 10){ //L
 5f4:	34 02 00 0a 	mvi r2,10
 5f8:	44 62 00 c0 	be r3,r2,8f8 <_ZN9clase_pwm6setMovEii+0x37c>
    if (com == 11){ //C
 5fc:	34 02 00 0b 	mvi r2,11
 600:	5c 62 00 5a 	bne r3,r2,768 <_ZN9clase_pwm6setMovEii+0x1ec>
pwm -> wr = vwr;
 604:	78 04 00 00 	mvhi r4,0x0
 608:	38 84 0d d8 	ori r4,r4,0xdd8
 60c:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 610:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 614:	28 42 00 00 	lw r2,(r2+0)
 618:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 61c:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 620:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 624:	38 03 84 80 	mvu r3,0x8480
 628:	78 63 00 1e 	orhi r3,r3,0x1e
 62c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 630:	34 03 00 34 	mvi r3,52
 634:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 638:	38 03 e8 48 	mvu r3,0xe848
 63c:	78 63 00 01 	orhi r3,r3,0x1
 640:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 644:	34 03 00 30 	mvi r3,48
 648:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 64c:	58 41 00 10 	sw (r2+16),r1
};
 650:	c3 a0 00 00 	ret
    if (com == 10){  //L servo 0
 654:	34 01 00 0a 	mvi r1,10
 658:	44 61 00 bb 	be r3,r1,944 <_ZN9clase_pwm6setMovEii+0x3c8>
    if (com == 11){ //C servo 0
 65c:	34 01 00 0b 	mvi r1,11
 660:	5c 61 00 58 	bne r3,r1,7c0 <_ZN9clase_pwm6setMovEii+0x244>
pwm -> wr = vwr;
 664:	78 04 00 00 	mvhi r4,0x0
 668:	38 84 0d d8 	ori r4,r4,0xdd8
 66c:	28 81 00 00 	lw r1,(r4+0)
pwm -> addr = vaddr;
 670:	34 04 00 08 	mvi r4,8
pwm -> wr = vwr;
 674:	28 21 00 00 	lw r1,(r1+0)
 678:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 67c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 680:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 684:	38 04 84 80 	mvu r4,0x8480
 688:	78 84 00 1e 	orhi r4,r4,0x1e
 68c:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 690:	34 04 00 04 	mvi r4,4
 694:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 698:	38 04 e8 48 	mvu r4,0xe848
 69c:	78 84 00 01 	orhi r4,r4,0x1
 6a0:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 6a4:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 6a8:	58 22 00 10 	sw (r1+16),r2
if (b == 4){      //Arm 4 -> Servos 6 (RLC) & 7(DA)
 6ac:	34 01 00 04 	mvi r1,4
 6b0:	5c 41 ff ce 	bne r2,r1,5e8 <_ZN9clase_pwm6setMovEii+0x6c>
    if (com == 10){ //L
 6b4:	34 01 00 0a 	mvi r1,10
 6b8:	44 61 00 6d 	be r3,r1,86c <_ZN9clase_pwm6setMovEii+0x2f0>
    if (com == 11){ //C
 6bc:	34 01 00 0b 	mvi r1,11
 6c0:	5c 61 00 17 	bne r3,r1,71c <_ZN9clase_pwm6setMovEii+0x1a0>
pwm -> wr = vwr;
 6c4:	78 02 00 00 	mvhi r2,0x0
 6c8:	38 42 0d d8 	ori r2,r2,0xdd8
 6cc:	28 41 00 00 	lw r1,(r2+0)
 6d0:	34 02 00 01 	mvi r2,1
 6d4:	28 21 00 00 	lw r1,(r1+0)
 6d8:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 6dc:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 6e0:	34 02 00 50 	mvi r2,80
 6e4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 6e8:	38 02 84 80 	mvu r2,0x8480
 6ec:	78 42 00 1e 	orhi r2,r2,0x1e
 6f0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 6f4:	34 02 00 4c 	mvi r2,76
 6f8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 6fc:	38 02 e8 48 	mvu r2,0xe848
 700:	78 42 00 01 	orhi r2,r2,0x1
 704:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 708:	34 02 00 48 	mvi r2,72
 70c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 710:	34 02 00 01 	mvi r2,1
 714:	58 22 00 10 	sw (r1+16),r2
};
 718:	c3 a0 00 00 	ret
    if (com == 12){ //R
 71c:	34 01 00 0c 	mvi r1,12
 720:	5c 61 00 9b 	bne r3,r1,98c <_ZN9clase_pwm6setMovEii+0x410>
pwm -> wr = vwr;
 724:	78 03 00 00 	mvhi r3,0x0
 728:	38 63 0d d8 	ori r3,r3,0xdd8
 72c:	28 61 00 00 	lw r1,(r3+0)
 730:	34 02 00 01 	mvi r2,1
 734:	28 21 00 00 	lw r1,(r1+0)
 738:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 73c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 740:	34 02 00 50 	mvi r2,80
 744:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 748:	38 02 84 80 	mvu r2,0x8480
 74c:	78 42 00 1e 	orhi r2,r2,0x1e
 750:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 754:	34 02 00 4c 	mvi r2,76
 758:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 75c:	38 02 47 d8 	mvu r2,0x47d8
 760:	78 42 00 03 	orhi r2,r2,0x3
 764:	e3 ff ff e8 	bi 704 <_ZN9clase_pwm6setMovEii+0x188>
    if (com == 12){ //R
 768:	34 02 00 0c 	mvi r2,12
 76c:	5c 62 00 f4 	bne r3,r2,b3c <_ZN9clase_pwm6setMovEii+0x5c0>
pwm -> wr = vwr;
 770:	78 03 00 00 	mvhi r3,0x0
 774:	38 63 0d d8 	ori r3,r3,0xdd8
 778:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 77c:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 780:	28 42 00 00 	lw r2,(r2+0)
 784:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 788:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 78c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 790:	38 03 84 80 	mvu r3,0x8480
 794:	78 63 00 1e 	orhi r3,r3,0x1e
 798:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 79c:	34 03 00 34 	mvi r3,52
 7a0:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 7a4:	38 03 47 d8 	mvu r3,0x47d8
 7a8:	78 63 00 03 	orhi r3,r3,0x3
 7ac:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 7b0:	34 03 00 30 	mvi r3,48
 7b4:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 7b8:	58 41 00 10 	sw (r2+16),r1
};
 7bc:	c3 a0 00 00 	ret
    if (com == 12){ //R servo 0 
 7c0:	34 04 00 0c 	mvi r4,12
 7c4:	5c 64 00 c9 	bne r3,r4,ae8 <_ZN9clase_pwm6setMovEii+0x56c>
pwm -> wr = vwr;
 7c8:	78 04 00 00 	mvhi r4,0x0
 7cc:	38 84 0d d8 	ori r4,r4,0xdd8
 7d0:	28 81 00 00 	lw r1,(r4+0)
pwm -> addr = vaddr;
 7d4:	34 04 00 08 	mvi r4,8
pwm -> wr = vwr;
 7d8:	28 21 00 00 	lw r1,(r1+0)
 7dc:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 7e0:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 7e4:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 7e8:	38 04 84 80 	mvu r4,0x8480
 7ec:	78 84 00 1e 	orhi r4,r4,0x1e
 7f0:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 7f4:	34 04 00 04 	mvi r4,4
 7f8:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 7fc:	38 04 47 d8 	mvu r4,0x47d8
 800:	78 84 00 03 	orhi r4,r4,0x3
 804:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 808:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 80c:	58 22 00 10 	sw (r1+16),r2
 810:	e3 ff ff a7 	bi 6ac <_ZN9clase_pwm6setMovEii+0x130>
    if (com == 12){ //R
 814:	34 02 00 0c 	mvi r2,12
 818:	5c 62 00 75 	bne r3,r2,9ec <_ZN9clase_pwm6setMovEii+0x470>
pwm -> wr = vwr;
 81c:	78 04 00 00 	mvhi r4,0x0
 820:	38 84 0d d8 	ori r4,r4,0xdd8
 824:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 828:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 82c:	28 42 00 00 	lw r2,(r2+0)
 830:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 834:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 838:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 83c:	38 03 84 80 	mvu r3,0x8480
 840:	78 63 00 1e 	orhi r3,r3,0x1e
 844:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 848:	34 03 00 1c 	mvi r3,28
 84c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 850:	38 03 47 d8 	mvu r3,0x47d8
 854:	78 63 00 03 	orhi r3,r3,0x3
 858:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 85c:	34 03 00 18 	mvi r3,24
 860:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 864:	58 41 00 10 	sw (r2+16),r1
};
 868:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 86c:	78 04 00 00 	mvhi r4,0x0
 870:	38 84 0d d8 	ori r4,r4,0xdd8
 874:	28 81 00 00 	lw r1,(r4+0)
 878:	34 02 00 01 	mvi r2,1
 87c:	28 21 00 00 	lw r1,(r1+0)
 880:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 884:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 888:	34 02 00 50 	mvi r2,80
 88c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 890:	38 02 84 80 	mvu r2,0x8480
 894:	78 42 00 1e 	orhi r2,r2,0x1e
 898:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 89c:	34 02 00 4c 	mvi r2,76
 8a0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8a4:	38 02 c3 50 	mvu r2,0xc350
 8a8:	e3 ff ff 97 	bi 704 <_ZN9clase_pwm6setMovEii+0x188>
pwm -> wr = vwr;
 8ac:	78 04 00 00 	mvhi r4,0x0
 8b0:	38 84 0d d8 	ori r4,r4,0xdd8
 8b4:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 8b8:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 8bc:	28 42 00 00 	lw r2,(r2+0)
 8c0:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 8c4:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 8c8:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 8cc:	38 03 84 80 	mvu r3,0x8480
 8d0:	78 63 00 1e 	orhi r3,r3,0x1e
 8d4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 8d8:	34 03 00 1c 	mvi r3,28
 8dc:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 8e0:	38 03 c3 50 	mvu r3,0xc350
 8e4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 8e8:	34 03 00 18 	mvi r3,24
 8ec:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 8f0:	58 41 00 10 	sw (r2+16),r1
};
 8f4:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 8f8:	78 03 00 00 	mvhi r3,0x0
 8fc:	38 63 0d d8 	ori r3,r3,0xdd8
 900:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 904:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 908:	28 42 00 00 	lw r2,(r2+0)
 90c:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 910:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 914:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 918:	38 03 84 80 	mvu r3,0x8480
 91c:	78 63 00 1e 	orhi r3,r3,0x1e
 920:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 924:	34 03 00 34 	mvi r3,52
 928:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 92c:	38 03 c3 50 	mvu r3,0xc350
 930:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 934:	34 03 00 30 	mvi r3,48
 938:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 93c:	58 41 00 10 	sw (r2+16),r1
};
 940:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 944:	78 03 00 00 	mvhi r3,0x0
 948:	38 63 0d d8 	ori r3,r3,0xdd8
 94c:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 950:	34 03 00 08 	mvi r3,8
pwm -> wr = vwr;
 954:	28 21 00 00 	lw r1,(r1+0)
 958:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 95c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 960:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 964:	38 03 84 80 	mvu r3,0x8480
 968:	78 63 00 1e 	orhi r3,r3,0x1e
 96c:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 970:	34 03 00 04 	mvi r3,4
 974:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 978:	38 03 c3 50 	mvu r3,0xc350
 97c:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 980:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 984:	58 22 00 10 	sw (r1+16),r2
};
 988:	c3 a0 00 00 	ret
    if (com == 13){ //A
 98c:	34 01 00 0d 	mvi r1,13
 990:	5c 61 00 2d 	bne r3,r1,a44 <_ZN9clase_pwm6setMovEii+0x4c8>
pwm -> wr = vwr;
 994:	78 04 00 00 	mvhi r4,0x0
 998:	38 84 0d d8 	ori r4,r4,0xdd8
 99c:	28 81 00 00 	lw r1,(r4+0)
 9a0:	34 02 00 01 	mvi r2,1
 9a4:	28 21 00 00 	lw r1,(r1+0)
 9a8:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 9ac:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 9b0:	34 02 00 5c 	mvi r2,92
 9b4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9b8:	38 02 84 80 	mvu r2,0x8480
 9bc:	78 42 00 1e 	orhi r2,r2,0x1e
 9c0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9c4:	34 02 00 58 	mvi r2,88
 9c8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9cc:	38 02 bf 20 	mvu r2,0xbf20
 9d0:	78 42 00 02 	orhi r2,r2,0x2
 9d4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9d8:	34 02 00 54 	mvi r2,84
 9dc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9e0:	34 02 00 01 	mvi r2,1
 9e4:	58 22 00 10 	sw (r1+16),r2
};
 9e8:	e3 ff ff 00 	bi 5e8 <_ZN9clase_pwm6setMovEii+0x6c>
    if (com == 13){ //A
 9ec:	34 02 00 0d 	mvi r2,13
 9f0:	5c 62 00 28 	bne r3,r2,a90 <_ZN9clase_pwm6setMovEii+0x514>
pwm -> wr = vwr;
 9f4:	78 03 00 00 	mvhi r3,0x0
 9f8:	38 63 0d d8 	ori r3,r3,0xdd8
 9fc:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 a00:	34 03 00 2c 	mvi r3,44
pwm -> wr = vwr;
 a04:	28 42 00 00 	lw r2,(r2+0)
 a08:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 a0c:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 a10:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a14:	38 03 84 80 	mvu r3,0x8480
 a18:	78 63 00 1e 	orhi r3,r3,0x1e
 a1c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a20:	34 03 00 28 	mvi r3,40
 a24:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a28:	38 03 bf 20 	mvu r3,0xbf20
 a2c:	78 63 00 02 	orhi r3,r3,0x2
 a30:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a34:	34 03 00 24 	mvi r3,36
 a38:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a3c:	58 41 00 10 	sw (r2+16),r1
 a40:	e3 ff fe ea 	bi 5e8 <_ZN9clase_pwm6setMovEii+0x6c>
    if (com == 14){ //D
 a44:	34 01 00 0e 	mvi r1,14
 a48:	5c 61 fe e8 	bne r3,r1,5e8 <_ZN9clase_pwm6setMovEii+0x6c>
pwm -> wr = vwr;
 a4c:	78 02 00 00 	mvhi r2,0x0
 a50:	38 42 0d d8 	ori r2,r2,0xdd8
 a54:	28 41 00 00 	lw r1,(r2+0)
 a58:	34 02 00 01 	mvi r2,1
 a5c:	28 21 00 00 	lw r1,(r1+0)
 a60:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 a64:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 a68:	34 02 00 5c 	mvi r2,92
 a6c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a70:	38 02 84 80 	mvu r2,0x8480
 a74:	78 42 00 1e 	orhi r2,r2,0x1e
 a78:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a7c:	34 02 00 58 	mvi r2,88
 a80:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a84:	38 02 86 a0 	mvu r2,0x86a0
 a88:	78 42 00 01 	orhi r2,r2,0x1
 a8c:	e3 ff ff d2 	bi 9d4 <_ZN9clase_pwm6setMovEii+0x458>
    if (com == 14){ //D
 a90:	34 02 00 0e 	mvi r2,14
 a94:	5c 62 fe d5 	bne r3,r2,5e8 <_ZN9clase_pwm6setMovEii+0x6c>
pwm -> wr = vwr;
 a98:	78 04 00 00 	mvhi r4,0x0
 a9c:	38 84 0d d8 	ori r4,r4,0xdd8
 aa0:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 aa4:	34 03 00 2c 	mvi r3,44
pwm -> wr = vwr;
 aa8:	28 42 00 00 	lw r2,(r2+0)
 aac:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 ab0:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 ab4:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 ab8:	38 03 84 80 	mvu r3,0x8480
 abc:	78 63 00 1e 	orhi r3,r3,0x1e
 ac0:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 ac4:	34 03 00 28 	mvi r3,40
 ac8:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 acc:	38 03 86 a0 	mvu r3,0x86a0
 ad0:	78 63 00 01 	orhi r3,r3,0x1
 ad4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 ad8:	34 03 00 24 	mvi r3,36
 adc:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 ae0:	58 41 00 10 	sw (r2+16),r1
 ae4:	e3 ff fe c1 	bi 5e8 <_ZN9clase_pwm6setMovEii+0x6c>
    if (com == 13){ //D servo1
 ae8:	34 01 00 0d 	mvi r1,13
 aec:	5c 61 00 2a 	bne r3,r1,b94 <_ZN9clase_pwm6setMovEii+0x618>
pwm -> wr = vwr;
 af0:	78 03 00 00 	mvhi r3,0x0
 af4:	38 63 0d d8 	ori r3,r3,0xdd8
 af8:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 afc:	34 03 00 14 	mvi r3,20
pwm -> wr = vwr;
 b00:	28 21 00 00 	lw r1,(r1+0)
 b04:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 b08:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 b0c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 b10:	38 03 84 80 	mvu r3,0x8480
 b14:	78 63 00 1e 	orhi r3,r3,0x1e
 b18:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 b1c:	34 03 00 10 	mvi r3,16
 b20:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 b24:	38 03 bf 20 	mvu r3,0xbf20
 b28:	78 63 00 02 	orhi r3,r3,0x2
 b2c:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 b30:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 b34:	58 22 00 10 	sw (r1+16),r2
 b38:	e3 ff fe ac 	bi 5e8 <_ZN9clase_pwm6setMovEii+0x6c>
    if (com == 13){ //A
 b3c:	34 02 00 0d 	mvi r2,13
 b40:	5c 62 00 2a 	bne r3,r2,be8 <_ZN9clase_pwm6setMovEii+0x66c>
pwm -> wr = vwr;
 b44:	78 04 00 00 	mvhi r4,0x0
 b48:	38 84 0d d8 	ori r4,r4,0xdd8
 b4c:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 b50:	34 03 00 44 	mvi r3,68
pwm -> wr = vwr;
 b54:	28 42 00 00 	lw r2,(r2+0)
 b58:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 b5c:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 b60:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b64:	38 03 84 80 	mvu r3,0x8480
 b68:	78 63 00 1e 	orhi r3,r3,0x1e
 b6c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 b70:	34 03 00 40 	mvi r3,64
 b74:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b78:	38 03 bf 20 	mvu r3,0xbf20
 b7c:	78 63 00 02 	orhi r3,r3,0x2
 b80:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 b84:	34 03 00 3c 	mvi r3,60
 b88:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b8c:	58 41 00 10 	sw (r2+16),r1
 b90:	e3 ff fe 96 	bi 5e8 <_ZN9clase_pwm6setMovEii+0x6c>
    if (com == 14){ //A servo 1
 b94:	34 01 00 0e 	mvi r1,14
 b98:	5c 61 fe 94 	bne r3,r1,5e8 <_ZN9clase_pwm6setMovEii+0x6c>
pwm -> wr = vwr;
 b9c:	78 03 00 00 	mvhi r3,0x0
 ba0:	38 63 0d d8 	ori r3,r3,0xdd8
 ba4:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 ba8:	34 03 00 14 	mvi r3,20
pwm -> wr = vwr;
 bac:	28 21 00 00 	lw r1,(r1+0)
 bb0:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 bb4:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 bb8:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 bbc:	38 03 84 80 	mvu r3,0x8480
 bc0:	78 63 00 1e 	orhi r3,r3,0x1e
 bc4:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 bc8:	34 03 00 10 	mvi r3,16
 bcc:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 bd0:	38 03 86 a0 	mvu r3,0x86a0
 bd4:	78 63 00 01 	orhi r3,r3,0x1
 bd8:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 bdc:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 be0:	58 22 00 10 	sw (r1+16),r2
 be4:	e3 ff fe 81 	bi 5e8 <_ZN9clase_pwm6setMovEii+0x6c>
    if (com == 14){ //D
 be8:	34 02 00 0e 	mvi r2,14
 bec:	5c 62 fe 7f 	bne r3,r2,5e8 <_ZN9clase_pwm6setMovEii+0x6c>
pwm -> wr = vwr;
 bf0:	78 03 00 00 	mvhi r3,0x0
 bf4:	38 63 0d d8 	ori r3,r3,0xdd8
 bf8:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 bfc:	34 03 00 44 	mvi r3,68
pwm -> wr = vwr;
 c00:	28 42 00 00 	lw r2,(r2+0)
 c04:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 c08:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 c0c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c10:	38 03 84 80 	mvu r3,0x8480
 c14:	78 63 00 1e 	orhi r3,r3,0x1e
 c18:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 c1c:	34 03 00 40 	mvi r3,64
 c20:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c24:	38 03 86 a0 	mvu r3,0x86a0
 c28:	78 63 00 01 	orhi r3,r3,0x1
 c2c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 c30:	34 03 00 3c 	mvi r3,60
 c34:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c38:	58 41 00 10 	sw (r2+16),r1
 c3c:	e3 ff fe 6b 	bi 5e8 <_ZN9clase_pwm6setMovEii+0x6c>

00000c40 <_ZN9clase_pwm8pwm_readEv>:
	return pwm -> d_out;
 c40:	78 02 00 00 	mvhi r2,0x0
 c44:	38 42 0d dc 	ori r2,r2,0xddc
 c48:	28 41 00 00 	lw r1,(r2+0)
 c4c:	28 21 00 00 	lw r1,(r1+0)
 c50:	28 21 00 00 	lw r1,(r1+0)
}
 c54:	c3 a0 00 00 	ret

00000c58 <_ZN9clase_pwm6pwm_rdEh>:
pwm -> rd = vrd;
 c58:	78 03 00 00 	mvhi r3,0x0
 c5c:	38 63 0d e0 	ori r3,r3,0xde0
 c60:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_rd(uint8_t vrd){
 c64:	20 42 00 ff 	andi r2,r2,0xff
pwm -> rd = vrd;
 c68:	28 21 00 00 	lw r1,(r1+0)
 c6c:	30 22 00 04 	sb (r1+4),r2
}
 c70:	c3 a0 00 00 	ret

00000c74 <_ZN9clase_pwm8pwm_addrEj>:
pwm -> addr = vaddr;
 c74:	78 03 00 00 	mvhi r3,0x0
 c78:	38 63 0d e4 	ori r3,r3,0xde4
 c7c:	28 61 00 00 	lw r1,(r3+0)
 c80:	28 21 00 00 	lw r1,(r1+0)
 c84:	58 22 00 08 	sw (r1+8),r2
}
 c88:	c3 a0 00 00 	ret

00000c8c <_ZN9clase_pwm6pwm_wrEh>:
pwm -> wr = vwr;
 c8c:	78 03 00 00 	mvhi r3,0x0
 c90:	38 63 0d e8 	ori r3,r3,0xde8
 c94:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_wr(uint8_t vwr){
 c98:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 c9c:	28 21 00 00 	lw r1,(r1+0)
 ca0:	30 22 00 0c 	sb (r1+12),r2
}
 ca4:	c3 a0 00 00 	ret

00000ca8 <_ZN9clase_pwm7pwm_dinEj>:
pwm -> d_in = vd_in;
 ca8:	78 03 00 00 	mvhi r3,0x0
 cac:	38 63 0d ec 	ori r3,r3,0xdec
 cb0:	28 61 00 00 	lw r1,(r3+0)
 cb4:	28 21 00 00 	lw r1,(r1+0)
 cb8:	58 22 00 10 	sw (r1+16),r2
}
 cbc:	c3 a0 00 00 	ret

00000cc0 <_ZN11clase_timer6nsleepEi>:
void clase_timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 cc0:	78 03 00 00 	mvhi r3,0x0
 cc4:	38 63 0d f0 	ori r3,r3,0xdf0
 cc8:	28 61 00 00 	lw r1,(r3+0)
 ccc:	08 42 00 64 	muli r2,r2,100
 cd0:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 cd4:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 cd8:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 cdc:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 ce0:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 ce4:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 ce8:	20 21 00 01 	andi r1,r1,0x1
 cec:	44 20 ff fe 	be r1,r0,ce4 <_ZN11clase_timer6nsleepEi+0x24>
};
 cf0:	c3 a0 00 00 	ret

00000cf4 <_ZN10clase_uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 cf4:	c3 a0 00 00 	ret

00000cf8 <_ZN10clase_uart12uart_getcharEv>:

char clase_uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 cf8:	78 02 00 00 	mvhi r2,0x0
 cfc:	38 42 0d f4 	ori r2,r2,0xdf4
 d00:	28 41 00 00 	lw r1,(r2+0)
 d04:	28 22 00 00 	lw r2,(r1+0)
 d08:	28 41 00 00 	lw r1,(r2+0)
 d0c:	20 21 00 01 	andi r1,r1,0x1
 d10:	44 20 ff fe 	be r1,r0,d08 <_ZN10clase_uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 d14:	28 41 00 04 	lw r1,(r2+4)
}
 d18:	20 21 00 ff 	andi r1,r1,0xff
 d1c:	c3 a0 00 00 	ret

00000d20 <_ZN10clase_uart12uart_putcharEc>:

void clase_uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 d20:	78 03 00 00 	mvhi r3,0x0
 d24:	38 63 0d f8 	ori r3,r3,0xdf8
 d28:	28 61 00 00 	lw r1,(r3+0)
{
 d2c:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 d30:	28 23 00 00 	lw r3,(r1+0)
 d34:	28 61 00 00 	lw r1,(r3+0)
 d38:	20 21 00 10 	andi r1,r1,0x10
 d3c:	5c 20 ff fe 	bne r1,r0,d34 <_ZN10clase_uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 d40:	58 62 00 04 	sw (r3+4),r2
}
 d44:	c3 a0 00 00 	ret

00000d48 <_ZN10clase_uart11uart_putstrEPc>:

void clase_uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 d48:	40 44 00 00 	lbu r4,(r2+0)
 d4c:	44 80 00 0c 	be r4,r0,d7c <_ZN10clase_uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 d50:	78 03 00 00 	mvhi r3,0x0
 d54:	38 63 0d fc 	ori r3,r3,0xdfc
 d58:	28 61 00 00 	lw r1,(r3+0)
 d5c:	28 23 00 00 	lw r3,(r1+0)
 d60:	28 61 00 00 	lw r1,(r3+0)
 d64:	20 21 00 10 	andi r1,r1,0x10
 d68:	5c 20 ff fe 	bne r1,r0,d60 <_ZN10clase_uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 d6c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 d70:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 d74:	40 44 00 00 	lbu r4,(r2+0)
 d78:	5c 80 ff fa 	bne r4,r0,d60 <_ZN10clase_uart11uart_putstrEPc+0x18>
	}
}
 d7c:	c3 a0 00 00 	ret
