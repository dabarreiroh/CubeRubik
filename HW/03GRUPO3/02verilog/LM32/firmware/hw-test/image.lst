
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000005c0  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000004  000005c0  000005c0  00000614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000005c4  000005c4  00000618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000005dc  000005dc  00000630  2**2
                  ALLOC
  4 .debug_abbrev 0000021c  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000790  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a9  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001a0  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001c6  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 0000008b  00000000  00000000  000017ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001879  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000267  00000000  00000000  000018b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000010f  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 98 	calli 32c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 e0 	ori gp,gp,0x5e0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 dc 	ori r1,r1,0x5dc
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 60 	ori r3,r3,0x660

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:

#include "soc-hw.h"


int main(){
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra

		pwm_wr(1);
 210:	34 01 00 01 	mvi r1,1
 214:	f8 00 00 2c 	calli 2c4 <pwm_wr>
        pwm_addr(04);
 218:	34 01 00 04 	mvi r1,4
 21c:	f8 00 00 25 	calli 2b0 <pwm_addr>
        pwm_din(2);
 220:	34 01 00 02 	mvi r1,2
 224:	f8 00 00 2e 	calli 2dc <pwm_din>
        pwm_addr(8);
 228:	34 01 00 08 	mvi r1,8
 22c:	f8 00 00 21 	calli 2b0 <pwm_addr>
        pwm_din(4);
 230:	34 01 00 04 	mvi r1,4
 234:	f8 00 00 2a 	calli 2dc <pwm_din>
	    pwm_addr(00);
 238:	34 01 00 00 	mvi r1,0
 23c:	f8 00 00 1d 	calli 2b0 <pwm_addr>
        pwm_din(1);
 240:	34 01 00 01 	mvi r1,1
 244:	f8 00 00 26 	calli 2dc <pwm_din>

}
 248:	2b 9d 00 04 	lw ra,(sp+4)
 24c:	37 9c 00 04 	addi sp,sp,4
 250:	c3 a0 00 00 	ret

00000254 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 254:	c3 a0 00 00 	ret

00000258 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 258:	78 01 00 00 	mvhi r1,0x0
 25c:	38 21 06 5c 	ori r1,r1,0x65c
 260:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 264:	78 02 00 00 	mvhi r2,0x0
 268:	38 42 05 c8 	ori r2,r2,0x5c8
 26c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 270:	34 63 00 01 	addi r3,r3,1
 274:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 278:	34 01 00 0e 	mvi r1,14
 27c:	58 41 00 00 	sw (r2+0),r1
}
 280:	c3 a0 00 00 	ret

00000284 <pwm_read>:
void tic_isr();
/**************************************************************************
 *PWM
 */
uint32_t pwm_read(){	//escribe en el pin
	return pwm -> d_out;
 284:	78 01 00 00 	mvhi r1,0x0
 288:	38 21 05 d8 	ori r1,r1,0x5d8
 28c:	28 21 00 00 	lw r1,(r1+0)
 290:	28 21 00 00 	lw r1,(r1+0)
}
 294:	c3 a0 00 00 	ret

00000298 <pwm_rd>:
void pwm_rd(uint8_t vrd){
pwm -> rd = vrd;
 298:	78 02 00 00 	mvhi r2,0x0
 29c:	38 42 05 d8 	ori r2,r2,0x5d8
 2a0:	28 42 00 00 	lw r2,(r2+0)
 *PWM
 */
uint32_t pwm_read(){	//escribe en el pin
	return pwm -> d_out;
}
void pwm_rd(uint8_t vrd){
 2a4:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 2a8:	30 41 00 04 	sb (r2+4),r1
}
 2ac:	c3 a0 00 00 	ret

000002b0 <pwm_addr>:
void pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
 2b0:	78 02 00 00 	mvhi r2,0x0
 2b4:	38 42 05 d8 	ori r2,r2,0x5d8
 2b8:	28 42 00 00 	lw r2,(r2+0)
 2bc:	58 41 00 08 	sw (r2+8),r1
}
 2c0:	c3 a0 00 00 	ret

000002c4 <pwm_wr>:
void pwm_wr(uint8_t vwr){
pwm -> wr = vwr;
 2c4:	78 02 00 00 	mvhi r2,0x0
 2c8:	38 42 05 d8 	ori r2,r2,0x5d8
 2cc:	28 42 00 00 	lw r2,(r2+0)
pwm -> rd = vrd;
}
void pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
}
void pwm_wr(uint8_t vwr){
 2d0:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 2d4:	30 41 00 0c 	sb (r2+12),r1
}
 2d8:	c3 a0 00 00 	ret

000002dc <pwm_din>:
void pwm_din(uint32_t vd_in){
pwm -> d_in = vd_in;
 2dc:	78 02 00 00 	mvhi r2,0x0
 2e0:	38 42 05 d8 	ori r2,r2,0x5d8
 2e4:	28 42 00 00 	lw r2,(r2+0)
 2e8:	58 41 00 10 	sw (r2+16),r1
}
 2ec:	c3 a0 00 00 	ret

000002f0 <gpio_config_dir>:
/***************************************************************************
 * GPIO
 */

void gpio_config_dir(uint32_t vdir){	//configira la direccion del pin
	gpio0 -> dir = vdir;
 2f0:	78 02 00 00 	mvhi r2,0x0
 2f4:	38 42 05 cc 	ori r2,r2,0x5cc
 2f8:	28 42 00 00 	lw r2,(r2+0)
 2fc:	58 41 00 08 	sw (r2+8),r1
}
 300:	c3 a0 00 00 	ret

00000304 <gpio_write>:

void gpio_write(uint32_t vpins){	//escribe en el pin
	gpio0 -> wr = vpins;
 304:	78 02 00 00 	mvhi r2,0x0
 308:	38 42 05 cc 	ori r2,r2,0x5cc
 30c:	28 42 00 00 	lw r2,(r2+0)
 310:	58 41 00 04 	sw (r2+4),r1
}
 314:	c3 a0 00 00 	ret

00000318 <gpio_read>:


uint32_t gpio_read(){	// en el pin
	return gpio0 -> rd;
 318:	78 01 00 00 	mvhi r1,0x0
 31c:	38 21 05 cc 	ori r1,r1,0x5cc
 320:	28 21 00 00 	lw r1,(r1+0)
 324:	28 21 00 00 	lw r1,(r1+0)
}
 328:	c3 a0 00 00 	ret

0000032c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 32c:	37 9c ff f0 	addi sp,sp,-16
 330:	5b 8b 00 10 	sw (sp+16),r11
 334:	5b 8c 00 0c 	sw (sp+12),r12
 338:	5b 8d 00 08 	sw (sp+8),r13
 33c:	5b 9d 00 04 	sw (sp+4),ra
 340:	78 0b 00 00 	mvhi r11,0x0
 344:	39 6b 05 dc 	ori r11,r11,0x5dc
 348:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 34c:	35 6d 00 80 	addi r13,r11,128
 350:	e0 00 00 04 	bi 360 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 354:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 358:	45 6d 00 08 	be r11,r13,378 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 35c:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 360:	21 81 00 01 	andi r1,r12,0x1
 364:	44 20 ff fc 	be r1,r0,354 <irq_handler+0x28>
 368:	29 61 00 00 	lw r1,(r11+0)
 36c:	35 6b 00 04 	addi r11,r11,4
 370:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 374:	5d 6d ff fa 	bne r11,r13,35c <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 378:	2b 9d 00 04 	lw ra,(sp+4)
 37c:	2b 8b 00 10 	lw r11,(sp+16)
 380:	2b 8c 00 0c 	lw r12,(sp+12)
 384:	2b 8d 00 08 	lw r13,(sp+8)
 388:	37 9c 00 10 	addi sp,sp,16
 38c:	c3 a0 00 00 	ret

00000390 <isr_init>:

void isr_init()
{
 390:	78 01 00 00 	mvhi r1,0x0
 394:	78 02 00 00 	mvhi r2,0x0
 398:	38 21 05 dc 	ori r1,r1,0x5dc
 39c:	38 42 02 54 	ori r2,r2,0x254
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 3a0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 3a4:	58 22 00 00 	sw (r1+0),r2
 3a8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 3ac:	5c 23 ff fe 	bne r1,r3,3a4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 3b0:	c3 a0 00 00 	ret

000003b4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3b4:	78 03 00 00 	mvhi r3,0x0
 3b8:	3c 21 00 02 	sli r1,r1,2
 3bc:	38 63 05 dc 	ori r3,r3,0x5dc
 3c0:	b4 61 18 00 	add r3,r3,r1
 3c4:	58 62 00 00 	sw (r3+0),r2
}
 3c8:	c3 a0 00 00 	ret

000003cc <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 3cc:	78 03 00 00 	mvhi r3,0x0
 3d0:	3c 21 00 02 	sli r1,r1,2
 3d4:	38 63 05 dc 	ori r3,r3,0x5dc
 3d8:	78 02 00 00 	mvhi r2,0x0
 3dc:	b4 61 18 00 	add r3,r3,r1
 3e0:	38 42 02 54 	ori r2,r2,0x254
 3e4:	58 62 00 00 	sw (r3+0),r2
}
 3e8:	c3 a0 00 00 	ret

000003ec <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3ec:	78 04 00 00 	mvhi r4,0x0
 3f0:	38 84 05 c0 	ori r4,r4,0x5c0
 3f4:	28 83 00 00 	lw r3,(r4+0)
 3f8:	78 02 00 00 	mvhi r2,0x0
 3fc:	38 42 05 c8 	ori r2,r2,0x5c8
 400:	28 42 00 00 	lw r2,(r2+0)
 404:	88 23 08 00 	mul r1,r1,r3
 408:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 40c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 410:	34 01 00 08 	mvi r1,8
 414:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 418:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 41c:	20 21 00 01 	andi r1,r1,0x1
 420:	44 20 ff fe 	be r1,r0,418 <msleep+0x2c>
}
 424:	c3 a0 00 00 	ret

00000428 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 428:	78 02 00 00 	mvhi r2,0x0
 42c:	38 42 05 c8 	ori r2,r2,0x5c8
 430:	28 42 00 00 	lw r2,(r2+0)
 434:	08 21 00 64 	muli r1,r1,100
 438:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 43c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 440:	34 01 00 08 	mvi r1,8
 444:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 448:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 44c:	20 21 00 01 	andi r1,r1,0x1
 450:	44 20 ff fe 	be r1,r0,448 <nsleep+0x20>
}
 454:	c3 a0 00 00 	ret

00000458 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 458:	78 01 00 00 	mvhi r1,0x0
 45c:	38 21 05 c8 	ori r1,r1,0x5c8
 460:	28 23 00 00 	lw r3,(r1+0)
 464:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 468:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 46c:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 470:	38 21 06 5c 	ori r1,r1,0x65c

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 474:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 478:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 47c:	78 02 00 00 	mvhi r2,0x0
 480:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 484:	34 04 00 0e 	mvi r4,14
 488:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 48c:	38 21 05 dc 	ori r1,r1,0x5dc
 490:	38 42 02 58 	ori r2,r2,0x258
 494:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 498:	c3 a0 00 00 	ret

0000049c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 49c:	c3 a0 00 00 	ret

000004a0 <uart_getchar>:

char uart_getchar()
{   
 4a0:	78 01 00 00 	mvhi r1,0x0
 4a4:	38 21 05 c4 	ori r1,r1,0x5c4
 4a8:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 4ac:	28 41 00 00 	lw r1,(r2+0)
 4b0:	20 21 00 01 	andi r1,r1,0x1
 4b4:	44 20 ff fe 	be r1,r0,4ac <uart_getchar+0xc>
	return uart0->rxtx;
 4b8:	28 41 00 04 	lw r1,(r2+4)
}
 4bc:	20 21 00 ff 	andi r1,r1,0xff
 4c0:	c3 a0 00 00 	ret

000004c4 <uart_putchar>:

void uart_putchar(char c)
{
 4c4:	78 02 00 00 	mvhi r2,0x0
 4c8:	38 42 05 c4 	ori r2,r2,0x5c4
 4cc:	28 43 00 00 	lw r3,(r2+0)
 4d0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4d4:	28 62 00 00 	lw r2,(r3+0)
 4d8:	20 42 00 10 	andi r2,r2,0x10
 4dc:	5c 40 ff fe 	bne r2,r0,4d4 <uart_putchar+0x10>
	uart0->rxtx = c;
 4e0:	58 61 00 04 	sw (r3+4),r1
}
 4e4:	c3 a0 00 00 	ret

000004e8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4e8:	40 24 00 00 	lbu r4,(r1+0)
 4ec:	44 80 00 0b 	be r4,r0,518 <uart_putstr+0x30>
 4f0:	78 02 00 00 	mvhi r2,0x0
 4f4:	38 42 05 c4 	ori r2,r2,0x5c4
 4f8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4fc:	28 62 00 00 	lw r2,(r3+0)
 500:	20 42 00 10 	andi r2,r2,0x10
 504:	5c 40 ff fe 	bne r2,r0,4fc <uart_putstr+0x14>
	uart0->rxtx = c;
 508:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 50c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 510:	40 24 00 00 	lbu r4,(r1+0)
 514:	5c 82 ff fa 	bne r4,r2,4fc <uart_putstr+0x14>
 518:	c3 a0 00 00 	ret

0000051c <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 51c:	78 01 00 00 	mvhi r1,0x0
 520:	38 21 05 d4 	ori r1,r1,0x5d4
 524:	28 21 00 00 	lw r1,(r1+0)
	i2c0->prerh =0x50;
 528:	34 02 00 50 	mvi r2,80
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 52c:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 530:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 534:	34 02 ff 80 	mvi r2,-128
 538:	30 22 00 02 	sb (r1+2),r2


}
 53c:	c3 a0 00 00 	ret

00000540 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 540:	78 04 00 00 	mvhi r4,0x0
 544:	38 84 05 d4 	ori r4,r4,0x5d4
 548:	28 84 00 00 	lw r4,(r4+0)
 54c:	3c 21 00 02 	sli r1,r1,2


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 550:	20 42 00 ff 	andi r2,r2,0xff

   i2c0->TxRx=(addrDev<<1 +1);
 554:	20 21 00 fc 	andi r1,r1,0xfc
 558:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 55c:	34 01 ff 90 	mvi r1,-112


}

void i2c_write(char addrDev, char addrReg, char dat)
{
 560:	20 63 00 ff 	andi r3,r3,0xff

   i2c0->TxRx=(addrDev<<1 +1);
   i2c0->crsr =0x90;
 564:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 568:	40 81 00 04 	lbu r1,(r4+4)
 56c:	20 21 00 02 	andi r1,r1,0x2
 570:	5c 20 ff fe 	bne r1,r0,568 <i2c_write+0x28>
   i2c0->TxRx=addrReg;
 574:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 578:	34 01 00 10 	mvi r1,16
 57c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 580:	40 81 00 04 	lbu r1,(r4+4)
 584:	20 21 00 02 	andi r1,r1,0x2
 588:	5c 20 ff fe 	bne r1,r0,580 <i2c_write+0x40>
   
   i2c0->TxRx=dat;
 58c:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 590:	34 01 00 10 	mvi r1,16
 594:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 598:	40 81 00 04 	lbu r1,(r4+4)
 59c:	20 21 00 02 	andi r1,r1,0x2
 5a0:	5c 20 ff fe 	bne r1,r0,598 <i2c_write+0x58>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 5a4:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 5a8:	34 01 00 50 	mvi r1,80
 5ac:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 5b0:	40 81 00 04 	lbu r1,(r4+4)
 5b4:	20 21 00 02 	andi r1,r1,0x2
 5b8:	5c 20 ff fe 	bne r1,r0,5b0 <i2c_write+0x70>
//7

}
 5bc:	c3 a0 00 00 	ret
