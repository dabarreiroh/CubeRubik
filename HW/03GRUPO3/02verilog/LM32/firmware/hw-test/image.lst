
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e4c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000098  00000e4c  00000e4c  00000ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000ee4  00000ee4  00000f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000efc  00000efc  00000f50  2**2
                  ALLOC
  4 .debug_frame  000002d0  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038b9  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ee  00000000  00000000  00004ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000291e  00000000  00000000  000053c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000a0  00000000  00000000  00007ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00007d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000eae  00000000  00000000  00007dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005ae  00000000  00000000  00008c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00009229  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 be 	calli 3c4 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0f 00 	ori gp,gp,0xf00
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0e fc 	ori r1,r1,0xefc
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0f 80 	ori r3,r3,0xf80

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "clase_pwm.h"
#include "clase_timer.h"
#include "clase_uart.h"
//******************************comandos por UART**********************************

int main(){
 208:	37 9c ff dc 	addi sp,sp,-36
 20c:	5b 8b 00 14 	sw (sp+20),r11
 210:	5b 8c 00 10 	sw (sp+16),r12
 214:	5b 8d 00 0c 	sw (sp+12),r13
 218:	5b 8e 00 08 	sw (sp+8),r14
 21c:	5b 9d 00 04 	sw (sp+4),ra
 
    while (1){
        comando=uart.uart_getchar();
        uart.uart_putchar(comando);
           
        if (comando==0xFF){      //Home----DT
 220:	34 0c 00 ff 	mvi r12,255
                arm.setMov(2,13); //D
                arm.setMov(3,13); //D
                arm.setMov(4,13); //D
            }
        }  
        else if (comando==0xFE){      //Init----AT
 224:	34 0d 00 fe 	mvi r13,254
            comando=uart.uart_getchar();
            if(comando==0xF0){ 
 228:	34 0e 00 f0 	mvi r14,240
        comando=uart.uart_getchar();
 22c:	37 81 00 20 	addi r1,sp,32
 230:	f8 00 02 e5 	calli dc4 <_ZN10clase_uart12uart_getcharEv>
 234:	b8 20 58 00 	mv r11,r1
        uart.uart_putchar(comando);
 238:	b8 20 10 00 	mv r2,r1
 23c:	37 81 00 20 	addi r1,sp,32
 240:	f8 00 02 eb 	calli dec <_ZN10clase_uart12uart_putcharEc>
        if (comando==0xFF){      //Home----DT
 244:	45 6c 00 2c 	be r11,r12,2f4 <main+0xec>
        else if (comando==0xFE){      //Init----AT
 248:	5d 6d ff f9 	bne r11,r13,22c <main+0x24>
            comando=uart.uart_getchar();
 24c:	37 81 00 20 	addi r1,sp,32
 250:	f8 00 02 dd 	calli dc4 <_ZN10clase_uart12uart_getcharEv>
            if(comando==0xF0){ 
 254:	5c 2e ff f6 	bne r1,r14,22c <main+0x24>
                arm.setMov(1,10); //R
 258:	37 81 00 18 	addi r1,sp,24
 25c:	34 03 00 0a 	mvi r3,10
 260:	34 02 00 01 	mvi r2,1
 264:	f8 00 01 0a 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(2,12); //C  
 268:	37 81 00 18 	addi r1,sp,24
 26c:	34 03 00 0c 	mvi r3,12
 270:	34 02 00 02 	mvi r2,2
 274:	f8 00 01 06 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(3,11); //L
 278:	37 81 00 18 	addi r1,sp,24
 27c:	34 03 00 0b 	mvi r3,11
 280:	34 02 00 03 	mvi r2,3
 284:	f8 00 01 02 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(4,12); //C
 288:	37 81 00 18 	addi r1,sp,24
 28c:	34 03 00 0c 	mvi r3,12
 290:	34 02 00 04 	mvi r2,4
 294:	f8 00 00 fe 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(1,14); //A
 298:	37 81 00 18 	addi r1,sp,24
 29c:	34 03 00 0e 	mvi r3,14
 2a0:	34 02 00 01 	mvi r2,1
 2a4:	f8 00 00 fa 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(2,14); //A
 2a8:	37 81 00 18 	addi r1,sp,24
 2ac:	34 03 00 0e 	mvi r3,14
 2b0:	34 02 00 02 	mvi r2,2
 2b4:	f8 00 00 f6 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(3,14); //A
 2b8:	37 81 00 18 	addi r1,sp,24
 2bc:	34 03 00 0e 	mvi r3,14
 2c0:	34 02 00 03 	mvi r2,3
 2c4:	f8 00 00 f2 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(4,14); //A
 2c8:	34 02 00 04 	mvi r2,4
 2cc:	34 03 00 0e 	mvi r3,14
 2d0:	37 81 00 18 	addi r1,sp,24
 2d4:	f8 00 00 ee 	calli 68c <_ZN9clase_pwm6setMovEcc>
        comando=uart.uart_getchar();
 2d8:	37 81 00 20 	addi r1,sp,32
 2dc:	f8 00 02 ba 	calli dc4 <_ZN10clase_uart12uart_getcharEv>
 2e0:	b8 20 58 00 	mv r11,r1
        uart.uart_putchar(comando);
 2e4:	b8 20 10 00 	mv r2,r1
 2e8:	37 81 00 20 	addi r1,sp,32
 2ec:	f8 00 02 c0 	calli dec <_ZN10clase_uart12uart_putcharEc>
        if (comando==0xFF){      //Home----DT
 2f0:	5d 6c ff d6 	bne r11,r12,248 <main+0x40>
            comando=uart.uart_getchar();
 2f4:	37 81 00 20 	addi r1,sp,32
 2f8:	f8 00 02 b3 	calli dc4 <_ZN10clase_uart12uart_getcharEv>
            if(comando==0xF0){            
 2fc:	5c 2e ff cc 	bne r1,r14,22c <main+0x24>
                arm.setMov(1,13); //D
 300:	37 81 00 18 	addi r1,sp,24
 304:	34 03 00 0d 	mvi r3,13
 308:	34 02 00 01 	mvi r2,1
 30c:	f8 00 00 e0 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(2,13); //D
 310:	37 81 00 18 	addi r1,sp,24
 314:	34 03 00 0d 	mvi r3,13
 318:	34 02 00 02 	mvi r2,2
 31c:	f8 00 00 dc 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(3,13); //D
 320:	37 81 00 18 	addi r1,sp,24
 324:	34 03 00 0d 	mvi r3,13
 328:	34 02 00 03 	mvi r2,3
 32c:	f8 00 00 d8 	calli 68c <_ZN9clase_pwm6setMovEcc>
                arm.setMov(4,13); //D
 330:	34 03 00 0d 	mvi r3,13
 334:	34 02 00 04 	mvi r2,4
 338:	37 81 00 18 	addi r1,sp,24
 33c:	f8 00 00 d4 	calli 68c <_ZN9clase_pwm6setMovEcc>
 340:	e3 ff ff bb 	bi 22c <main+0x24>

00000344 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 344:	78 01 00 00 	mvhi r1,0x0
 348:	38 21 0e 4c 	ori r1,r1,0xe4c
 34c:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 350:	78 04 00 00 	mvhi r4,0x0
 354:	38 84 0e 50 	ori r4,r4,0xe50
 358:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 35c:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 360:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 364:	34 21 00 01 	addi r1,r1,1
 368:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 36c:	34 01 00 0e 	mvi r1,14
 370:	58 61 00 00 	sw (r3+0),r1
}
 374:	c3 a0 00 00 	ret

00000378 <isr_null>:
 378:	c3 a0 00 00 	ret

0000037c <gpio_config_dir>:
	gpio0 -> dir = vdir;
 37c:	78 03 00 00 	mvhi r3,0x0
 380:	38 63 0e 54 	ori r3,r3,0xe54
 384:	28 62 00 00 	lw r2,(r3+0)
 388:	28 42 00 00 	lw r2,(r2+0)
 38c:	58 41 00 08 	sw (r2+8),r1
}
 390:	c3 a0 00 00 	ret

00000394 <gpio_write>:
	gpio0 -> wr = vpins;
 394:	78 03 00 00 	mvhi r3,0x0
 398:	38 63 0e 58 	ori r3,r3,0xe58
 39c:	28 62 00 00 	lw r2,(r3+0)
 3a0:	28 42 00 00 	lw r2,(r2+0)
 3a4:	58 41 00 04 	sw (r2+4),r1
}
 3a8:	c3 a0 00 00 	ret

000003ac <gpio_read>:
	return gpio0 -> rd;
 3ac:	78 02 00 00 	mvhi r2,0x0
 3b0:	38 42 0e 5c 	ori r2,r2,0xe5c
 3b4:	28 41 00 00 	lw r1,(r2+0)
 3b8:	28 21 00 00 	lw r1,(r1+0)
 3bc:	28 21 00 00 	lw r1,(r1+0)
}
 3c0:	c3 a0 00 00 	ret

000003c4 <irq_handler>:
{
 3c4:	37 9c ff f0 	addi sp,sp,-16
 3c8:	5b 8b 00 10 	sw (sp+16),r11
 3cc:	5b 8c 00 0c 	sw (sp+12),r12
 3d0:	5b 8d 00 08 	sw (sp+8),r13
 3d4:	5b 9d 00 04 	sw (sp+4),ra
 3d8:	78 02 00 00 	mvhi r2,0x0
 3dc:	38 42 0e 60 	ori r2,r2,0xe60
 3e0:	28 4b 00 00 	lw r11,(r2+0)
 3e4:	b8 20 60 00 	mv r12,r1
 3e8:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 3ec:	21 81 00 01 	andi r1,r12,0x1
 3f0:	44 20 00 03 	be r1,r0,3fc <irq_handler+0x38>
 3f4:	29 61 00 00 	lw r1,(r11+0)
 3f8:	d8 20 00 00 	call r1
 3fc:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 400:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 404:	5d ab ff fa 	bne r13,r11,3ec <irq_handler+0x28>
}
 408:	2b 9d 00 04 	lw ra,(sp+4)
 40c:	2b 8b 00 10 	lw r11,(sp+16)
 410:	2b 8c 00 0c 	lw r12,(sp+12)
 414:	2b 8d 00 08 	lw r13,(sp+8)
 418:	37 9c 00 10 	addi sp,sp,16
 41c:	c3 a0 00 00 	ret

00000420 <isr_init>:
{
 420:	78 02 00 00 	mvhi r2,0x0
 424:	38 42 0e 64 	ori r2,r2,0xe64
 428:	28 41 00 00 	lw r1,(r2+0)
 42c:	78 02 00 00 	mvhi r2,0x0
 430:	38 42 0e 68 	ori r2,r2,0xe68
 434:	28 43 00 00 	lw r3,(r2+0)
 438:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 43c:	58 23 00 00 	sw (r1+0),r3
 440:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 444:	5c 22 ff fe 	bne r1,r2,43c <isr_init+0x1c>
}
 448:	c3 a0 00 00 	ret

0000044c <isr_register>:
	isr_table[irq] = isr;
 44c:	78 04 00 00 	mvhi r4,0x0
 450:	38 84 0e 6c 	ori r4,r4,0xe6c
 454:	3c 23 00 02 	sli r3,r1,2
 458:	28 81 00 00 	lw r1,(r4+0)
 45c:	b4 23 08 00 	add r1,r1,r3
 460:	58 22 00 00 	sw (r1+0),r2
}
 464:	c3 a0 00 00 	ret

00000468 <isr_unregister>:
	isr_table[irq] = &isr_null;
 468:	78 03 00 00 	mvhi r3,0x0
 46c:	38 63 0e 70 	ori r3,r3,0xe70
 470:	3c 22 00 02 	sli r2,r1,2
 474:	28 61 00 00 	lw r1,(r3+0)
 478:	78 03 00 00 	mvhi r3,0x0
 47c:	38 63 0e 74 	ori r3,r3,0xe74
 480:	b4 22 08 00 	add r1,r1,r2
 484:	28 62 00 00 	lw r2,(r3+0)
 488:	58 22 00 00 	sw (r1+0),r2
}
 48c:	c3 a0 00 00 	ret

00000490 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 490:	78 03 00 00 	mvhi r3,0x0
 494:	38 02 86 a0 	mvu r2,0x86a0
 498:	78 42 00 01 	orhi r2,r2,0x1
 49c:	38 63 0e 78 	ori r3,r3,0xe78
 4a0:	88 22 08 00 	mul r1,r1,r2
 4a4:	28 62 00 00 	lw r2,(r3+0)
 4a8:	28 42 00 00 	lw r2,(r2+0)
 4ac:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4b0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4b4:	34 01 00 08 	mvi r1,8
 4b8:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 4bc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4c0:	20 21 00 01 	andi r1,r1,0x1
 4c4:	44 20 ff fe 	be r1,r0,4bc <msleep+0x2c>
}
 4c8:	c3 a0 00 00 	ret

000004cc <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 4cc:	78 03 00 00 	mvhi r3,0x0
 4d0:	38 63 0e 7c 	ori r3,r3,0xe7c
 4d4:	28 62 00 00 	lw r2,(r3+0)
 4d8:	08 21 00 64 	muli r1,r1,100
 4dc:	28 42 00 00 	lw r2,(r2+0)
 4e0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4e4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4e8:	34 01 00 08 	mvi r1,8
 4ec:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 4f0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4f4:	20 21 00 01 	andi r1,r1,0x1
 4f8:	44 20 ff fe 	be r1,r0,4f0 <nsleep+0x24>
}
 4fc:	c3 a0 00 00 	ret

00000500 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 500:	78 02 00 00 	mvhi r2,0x0
 504:	38 42 0e 80 	ori r2,r2,0xe80
 508:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 50c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 510:	34 02 27 10 	mvi r2,10000
 514:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 518:	38 63 0e 84 	ori r3,r3,0xe84
	timer0->compare0 = (FCPU/10000);
 51c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 520:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 524:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 528:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 52c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 530:	34 02 00 0e 	mvi r2,14
 534:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 538:	78 02 00 00 	mvhi r2,0x0
 53c:	38 42 0e 88 	ori r2,r2,0xe88
 540:	38 63 0e 8c 	ori r3,r3,0xe8c
 544:	28 41 00 00 	lw r1,(r2+0)
 548:	28 62 00 00 	lw r2,(r3+0)
 54c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 550:	c3 a0 00 00 	ret

00000554 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 554:	c3 a0 00 00 	ret

00000558 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 558:	78 02 00 00 	mvhi r2,0x0
 55c:	38 42 0e 90 	ori r2,r2,0xe90
 560:	28 41 00 00 	lw r1,(r2+0)
 564:	28 22 00 00 	lw r2,(r1+0)
 568:	28 41 00 00 	lw r1,(r2+0)
 56c:	20 21 00 01 	andi r1,r1,0x1
 570:	44 20 ff fe 	be r1,r0,568 <uart_getchar+0x10>
	return uart0->rxtx;
 574:	28 41 00 04 	lw r1,(r2+4)
}
 578:	20 21 00 ff 	andi r1,r1,0xff
 57c:	c3 a0 00 00 	ret

00000580 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 580:	78 03 00 00 	mvhi r3,0x0
 584:	38 63 0e 94 	ori r3,r3,0xe94
 588:	28 62 00 00 	lw r2,(r3+0)
{
 58c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 590:	28 43 00 00 	lw r3,(r2+0)
 594:	28 62 00 00 	lw r2,(r3+0)
 598:	20 42 00 10 	andi r2,r2,0x10
 59c:	5c 40 ff fe 	bne r2,r0,594 <uart_putchar+0x14>
	uart0->rxtx = c;
 5a0:	58 61 00 04 	sw (r3+4),r1
}
 5a4:	c3 a0 00 00 	ret

000005a8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5a8:	40 24 00 00 	lbu r4,(r1+0)
 5ac:	44 80 00 0c 	be r4,r0,5dc <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 5b0:	78 03 00 00 	mvhi r3,0x0
 5b4:	38 63 0e 98 	ori r3,r3,0xe98
 5b8:	28 62 00 00 	lw r2,(r3+0)
 5bc:	28 43 00 00 	lw r3,(r2+0)
 5c0:	28 62 00 00 	lw r2,(r3+0)
 5c4:	20 42 00 10 	andi r2,r2,0x10
 5c8:	5c 40 ff fe 	bne r2,r0,5c0 <uart_putstr+0x18>
	uart0->rxtx = c;
 5cc:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 5d0:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 5d4:	40 24 00 00 	lbu r4,(r1+0)
 5d8:	5c 80 ff fa 	bne r4,r0,5c0 <uart_putstr+0x18>
	}
}
 5dc:	c3 a0 00 00 	ret

000005e0 <i2c_init>:
 * I2C Functions
*/
void i2c_init()
{

	i2c0->prerl =0x00;
 5e0:	78 02 00 00 	mvhi r2,0x0
 5e4:	38 42 0e 9c 	ori r2,r2,0xe9c
 5e8:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 5ec:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 5f0:	28 21 00 00 	lw r1,(r1+0)
 5f4:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 5f8:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 5fc:	34 02 ff 80 	mvi r2,-128
 600:	30 22 00 02 	sb (r1+2),r2


}
 604:	c3 a0 00 00 	ret

00000608 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 608:	78 05 00 00 	mvhi r5,0x0
 60c:	38 a5 0e a0 	ori r5,r5,0xea0
 610:	28 a4 00 00 	lw r4,(r5+0)
 614:	3c 21 00 02 	sli r1,r1,2
{
 618:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 61c:	28 84 00 00 	lw r4,(r4+0)
 620:	20 21 00 fc 	andi r1,r1,0xfc
{
 624:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 628:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 62c:	34 01 ff 90 	mvi r1,-112
 630:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 634:	40 81 00 04 	lbu r1,(r4+4)
 638:	20 21 00 02 	andi r1,r1,0x2
 63c:	5c 20 ff fe 	bne r1,r0,634 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 640:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 644:	34 01 00 10 	mvi r1,16
 648:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 64c:	40 81 00 04 	lbu r1,(r4+4)
 650:	20 21 00 02 	andi r1,r1,0x2
 654:	5c 20 ff fe 	bne r1,r0,64c <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 658:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 65c:	34 01 00 10 	mvi r1,16
 660:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 664:	40 81 00 04 	lbu r1,(r4+4)
 668:	20 21 00 02 	andi r1,r1,0x2
 66c:	5c 20 ff fe 	bne r1,r0,664 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 670:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 674:	34 01 00 50 	mvi r1,80
 678:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 67c:	40 81 00 04 	lbu r1,(r4+4)
 680:	20 21 00 02 	andi r1,r1,0x2
 684:	5c 20 ff fe 	bne r1,r0,67c <i2c_write+0x74>
//7

}
 688:	c3 a0 00 00 	ret

0000068c <_ZN9clase_pwm6setMovEcc>:
}
void clase_pwm:: pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
}
void clase_pwm:: pwm_wr(uint8_t vwr){
pwm -> wr = vwr;
 68c:	78 04 00 00 	mvhi r4,0x0
 690:	38 84 0e a4 	ori r4,r4,0xea4
 694:	28 81 00 00 	lw r1,(r4+0)
 698:	34 05 00 01 	mvi r5,1
void clase_pwm::setMov(char b, char com){
 69c:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 6a0:	28 21 00 00 	lw r1,(r1+0)
    if (b == 0x01){        //Arm 1 -> Servo 0 (RLC) & 1(DA)
 6a4:	34 04 00 01 	mvi r4,1
void clase_pwm::setMov(char b, char com){
 6a8:	20 63 00 ff 	andi r3,r3,0xff
pwm -> wr = vwr;
 6ac:	30 25 00 0c 	sb (r1+12),r5
pwm -> rd = vrd;
 6b0:	30 20 00 04 	sb (r1+4),r0
    if (b == 0x01){        //Arm 1 -> Servo 0 (RLC) & 1(DA)
 6b4:	44 44 00 28 	be r2,r4,754 <_ZN9clase_pwm6setMovEcc+0xc8>
    if (b == 0x02){        //Arm 2 -> Servo 2 (RLC) & 3(DA)
 6b8:	34 05 00 02 	mvi r5,2
 6bc:	5c 45 00 0c 	bne r2,r5,6ec <_ZN9clase_pwm6setMovEcc+0x60>
        if (com==0x10){           //S2
 6c0:	34 02 00 10 	mvi r2,16
 6c4:	44 62 00 60 	be r3,r2,844 <_ZN9clase_pwm6setMovEcc+0x1b8>
        else if(com==0x11){       //S2
 6c8:	34 02 00 11 	mvi r2,17
 6cc:	44 62 00 51 	be r3,r2,810 <_ZN9clase_pwm6setMovEcc+0x184>
        else if(com==0x12){       //S2
 6d0:	34 02 00 12 	mvi r2,18
 6d4:	44 62 00 85 	be r3,r2,8e8 <_ZN9clase_pwm6setMovEcc+0x25c>
        else if(com==0x13){       //S3
 6d8:	34 02 00 13 	mvi r2,19
 6dc:	44 62 00 ba 	be r3,r2,9c4 <_ZN9clase_pwm6setMovEcc+0x338>
        else if(com==0x14){       //S3
 6e0:	34 02 00 14 	mvi r2,20
 6e4:	44 62 00 aa 	be r3,r2,98c <_ZN9clase_pwm6setMovEcc+0x300>
} //cierra setMov
 6e8:	c3 a0 00 00 	ret
    if (b == 0x03){        //Arm 3 -> Servo 4 (RLC) & 5(DA)
 6ec:	34 05 00 03 	mvi r5,3
 6f0:	5c 45 00 de 	bne r2,r5,a68 <_ZN9clase_pwm6setMovEcc+0x3dc>
        if (com==0x10){           //S4
 6f4:	34 02 00 10 	mvi r2,16
 6f8:	44 62 00 6e 	be r3,r2,8b0 <_ZN9clase_pwm6setMovEcc+0x224>
        else if(com==0x11){       //S4
 6fc:	34 02 00 11 	mvi r2,17
 700:	44 62 00 37 	be r3,r2,7dc <_ZN9clase_pwm6setMovEcc+0x150>
        else if(com==0x12){       //S4
 704:	34 02 00 12 	mvi r2,18
 708:	44 62 00 93 	be r3,r2,954 <_ZN9clase_pwm6setMovEcc+0x2c8>
        else if(com==0x13){       //S5
 70c:	34 02 00 13 	mvi r2,19
 710:	44 62 00 bb 	be r3,r2,9fc <_ZN9clase_pwm6setMovEcc+0x370>
        else if(com==0x14){       //S5
 714:	34 02 00 14 	mvi r2,20
 718:	5c 62 ff f4 	bne r3,r2,6e8 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 71c:	34 02 00 44 	mvi r2,68
 720:	58 22 00 08 	sw (r1+8),r2
}
void clase_pwm:: pwm_din(uint32_t vd_in){
pwm -> d_in = vd_in;
 724:	38 02 84 80 	mvu r2,0x8480
 728:	78 42 00 1e 	orhi r2,r2,0x1e
 72c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 730:	34 02 00 40 	mvi r2,64
 734:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 738:	38 02 86 a0 	mvu r2,0x86a0
 73c:	78 42 00 01 	orhi r2,r2,0x1
 740:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 744:	34 02 00 3c 	mvi r2,60
 748:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 74c:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 750:	c3 a0 00 00 	ret
        if (com==0x10){           //S0
 754:	34 04 00 10 	mvi r4,16
 758:	44 64 00 49 	be r3,r4,87c <_ZN9clase_pwm6setMovEcc+0x1f0>
        else if(com==0x11){       //S0
 75c:	34 05 00 11 	mvi r5,17
 760:	44 65 00 13 	be r3,r5,7ac <_ZN9clase_pwm6setMovEcc+0x120>
        else if(com==0x12){       //S0
 764:	34 05 00 12 	mvi r5,18
 768:	44 65 00 6e 	be r3,r5,920 <_ZN9clase_pwm6setMovEcc+0x294>
        else if(com==0x13){       //S1
 76c:	34 05 00 13 	mvi r5,19
 770:	44 65 00 b1 	be r3,r5,a34 <_ZN9clase_pwm6setMovEcc+0x3a8>
        else if(com==0x14){       //S1
 774:	34 05 00 14 	mvi r5,20
 778:	5c 65 ff dc 	bne r3,r5,6e8 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 77c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 780:	38 03 84 80 	mvu r3,0x8480
 784:	78 63 00 1e 	orhi r3,r3,0x1e
 788:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 78c:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 790:	38 03 86 a0 	mvu r3,0x86a0
 794:	78 63 00 01 	orhi r3,r3,0x1
 798:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 79c:	34 03 00 0c 	mvi r3,12
 7a0:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 7a4:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 7a8:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 7ac:	34 03 00 08 	mvi r3,8
 7b0:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 7b4:	38 03 84 80 	mvu r3,0x8480
 7b8:	78 63 00 1e 	orhi r3,r3,0x1e
 7bc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 7c0:	34 03 00 04 	mvi r3,4
 7c4:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 7c8:	38 03 c3 50 	mvu r3,0xc350
 7cc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 7d0:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 7d4:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 7d8:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 7dc:	34 02 00 38 	mvi r2,56
 7e0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 7e4:	38 02 84 80 	mvu r2,0x8480
 7e8:	78 42 00 1e 	orhi r2,r2,0x1e
 7ec:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 7f0:	34 02 00 34 	mvi r2,52
 7f4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 7f8:	38 02 c3 50 	mvu r2,0xc350
 7fc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 800:	34 02 00 30 	mvi r2,48
 804:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 808:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 80c:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 810:	34 02 00 20 	mvi r2,32
 814:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 818:	38 02 84 80 	mvu r2,0x8480
 81c:	78 42 00 1e 	orhi r2,r2,0x1e
 820:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 824:	34 02 00 1c 	mvi r2,28
 828:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 82c:	38 02 c3 50 	mvu r2,0xc350
 830:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 834:	34 02 00 18 	mvi r2,24
 838:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 83c:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 840:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 844:	34 02 00 20 	mvi r2,32
 848:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 84c:	38 02 84 80 	mvu r2,0x8480
 850:	78 42 00 1e 	orhi r2,r2,0x1e
 854:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 858:	34 02 00 1c 	mvi r2,28
 85c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 860:	38 02 47 d8 	mvu r2,0x47d8
 864:	78 42 00 03 	orhi r2,r2,0x3
 868:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 86c:	34 02 00 18 	mvi r2,24
 870:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 874:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 878:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 87c:	34 03 00 08 	mvi r3,8
 880:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 884:	38 03 84 80 	mvu r3,0x8480
 888:	78 63 00 1e 	orhi r3,r3,0x1e
 88c:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 890:	34 03 00 04 	mvi r3,4
 894:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 898:	38 03 47 d8 	mvu r3,0x47d8
 89c:	78 63 00 03 	orhi r3,r3,0x3
 8a0:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 8a4:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 8a8:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 8ac:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 8b0:	34 02 00 38 	mvi r2,56
 8b4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8b8:	38 02 84 80 	mvu r2,0x8480
 8bc:	78 42 00 1e 	orhi r2,r2,0x1e
 8c0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8c4:	34 02 00 34 	mvi r2,52
 8c8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8cc:	38 02 47 d8 	mvu r2,0x47d8
 8d0:	78 42 00 03 	orhi r2,r2,0x3
 8d4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8d8:	34 02 00 30 	mvi r2,48
 8dc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8e0:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 8e4:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 8e8:	34 02 00 20 	mvi r2,32
 8ec:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8f0:	38 02 84 80 	mvu r2,0x8480
 8f4:	78 42 00 1e 	orhi r2,r2,0x1e
 8f8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8fc:	34 02 00 1c 	mvi r2,28
 900:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 904:	38 02 e8 48 	mvu r2,0xe848
 908:	78 42 00 01 	orhi r2,r2,0x1
 90c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 910:	34 02 00 18 	mvi r2,24
 914:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 918:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 91c:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 920:	34 03 00 08 	mvi r3,8
 924:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 928:	38 03 84 80 	mvu r3,0x8480
 92c:	78 63 00 1e 	orhi r3,r3,0x1e
 930:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 934:	34 03 00 04 	mvi r3,4
 938:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 93c:	38 03 e8 48 	mvu r3,0xe848
 940:	78 63 00 01 	orhi r3,r3,0x1
 944:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 948:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 94c:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 950:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 954:	34 02 00 38 	mvi r2,56
 958:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 95c:	38 02 84 80 	mvu r2,0x8480
 960:	78 42 00 1e 	orhi r2,r2,0x1e
 964:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 968:	34 02 00 34 	mvi r2,52
 96c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 970:	38 02 e8 48 	mvu r2,0xe848
 974:	78 42 00 01 	orhi r2,r2,0x1
 978:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 97c:	34 02 00 30 	mvi r2,48
 980:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 984:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 988:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 98c:	34 02 00 2c 	mvi r2,44
 990:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 994:	38 02 84 80 	mvu r2,0x8480
 998:	78 42 00 1e 	orhi r2,r2,0x1e
 99c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9a0:	34 02 00 28 	mvi r2,40
 9a4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9a8:	38 02 86 a0 	mvu r2,0x86a0
 9ac:	78 42 00 01 	orhi r2,r2,0x1
 9b0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9b4:	34 02 00 24 	mvi r2,36
 9b8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9bc:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 9c0:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 9c4:	34 02 00 2c 	mvi r2,44
 9c8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9cc:	38 02 84 80 	mvu r2,0x8480
 9d0:	78 42 00 1e 	orhi r2,r2,0x1e
 9d4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9d8:	34 02 00 28 	mvi r2,40
 9dc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9e0:	38 02 bf 20 	mvu r2,0xbf20
 9e4:	78 42 00 02 	orhi r2,r2,0x2
 9e8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9ec:	34 02 00 24 	mvi r2,36
 9f0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9f4:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 9f8:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 9fc:	34 02 00 44 	mvi r2,68
 a00:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a04:	38 02 84 80 	mvu r2,0x8480
 a08:	78 42 00 1e 	orhi r2,r2,0x1e
 a0c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a10:	34 02 00 40 	mvi r2,64
 a14:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a18:	38 02 bf 20 	mvu r2,0xbf20
 a1c:	78 42 00 02 	orhi r2,r2,0x2
 a20:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a24:	34 02 00 3c 	mvi r2,60
 a28:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a2c:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 a30:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 a34:	34 03 00 14 	mvi r3,20
 a38:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 a3c:	38 03 84 80 	mvu r3,0x8480
 a40:	78 63 00 1e 	orhi r3,r3,0x1e
 a44:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 a48:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 a4c:	38 03 bf 20 	mvu r3,0xbf20
 a50:	78 63 00 02 	orhi r3,r3,0x2
 a54:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 a58:	34 03 00 0c 	mvi r3,12
 a5c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 a60:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 a64:	c3 a0 00 00 	ret
    if (b == 0x04){        //Arm 4 -> Servo 6 (RLC) & 7(DA)
 a68:	34 05 00 04 	mvi r5,4
 a6c:	5c 45 ff 1f 	bne r2,r5,6e8 <_ZN9clase_pwm6setMovEcc+0x5c>
        if (com==0x10){           //S6
 a70:	34 02 00 10 	mvi r2,16
 a74:	44 62 00 17 	be r3,r2,ad0 <_ZN9clase_pwm6setMovEcc+0x444>
        else if(com==0x11){       //S6
 a78:	34 02 00 11 	mvi r2,17
 a7c:	44 62 00 23 	be r3,r2,b08 <_ZN9clase_pwm6setMovEcc+0x47c>
        else if(com==0x12){       //S6
 a80:	34 02 00 12 	mvi r2,18
 a84:	44 62 00 2e 	be r3,r2,b3c <_ZN9clase_pwm6setMovEcc+0x4b0>
        else if(com==0x13){       //S7
 a88:	34 02 00 13 	mvi r2,19
 a8c:	44 62 00 3a 	be r3,r2,b74 <_ZN9clase_pwm6setMovEcc+0x4e8>
        else if(com==0x14){       //S7
 a90:	34 02 00 14 	mvi r2,20
 a94:	5c 62 ff 15 	bne r3,r2,6e8 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 a98:	34 02 00 5c 	mvi r2,92
 a9c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 aa0:	38 02 84 80 	mvu r2,0x8480
 aa4:	78 42 00 1e 	orhi r2,r2,0x1e
 aa8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 aac:	34 02 00 58 	mvi r2,88
 ab0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ab4:	38 02 86 a0 	mvu r2,0x86a0
 ab8:	78 42 00 01 	orhi r2,r2,0x1
 abc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 ac0:	34 02 00 54 	mvi r2,84
 ac4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ac8:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 acc:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 ad0:	34 02 00 50 	mvi r2,80
 ad4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ad8:	38 02 84 80 	mvu r2,0x8480
 adc:	78 42 00 1e 	orhi r2,r2,0x1e
 ae0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 ae4:	34 02 00 4c 	mvi r2,76
 ae8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 aec:	38 02 47 d8 	mvu r2,0x47d8
 af0:	78 42 00 03 	orhi r2,r2,0x3
 af4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 af8:	34 02 00 48 	mvi r2,72
 afc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b00:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 b04:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 b08:	34 02 00 50 	mvi r2,80
 b0c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b10:	38 02 84 80 	mvu r2,0x8480
 b14:	78 42 00 1e 	orhi r2,r2,0x1e
 b18:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b1c:	34 02 00 4c 	mvi r2,76
 b20:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b24:	38 02 c3 50 	mvu r2,0xc350
 b28:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b2c:	34 02 00 48 	mvi r2,72
 b30:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b34:	58 24 00 10 	sw (r1+16),r4
 b38:	e3 ff fe ec 	bi 6e8 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 b3c:	34 02 00 50 	mvi r2,80
 b40:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b44:	38 02 84 80 	mvu r2,0x8480
 b48:	78 42 00 1e 	orhi r2,r2,0x1e
 b4c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b50:	34 02 00 4c 	mvi r2,76
 b54:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b58:	38 02 e8 48 	mvu r2,0xe848
 b5c:	78 42 00 01 	orhi r2,r2,0x1
 b60:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b64:	34 02 00 48 	mvi r2,72
 b68:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b6c:	58 24 00 10 	sw (r1+16),r4
 b70:	e3 ff fe de 	bi 6e8 <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 b74:	34 02 00 5c 	mvi r2,92
 b78:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b7c:	38 02 84 80 	mvu r2,0x8480
 b80:	78 42 00 1e 	orhi r2,r2,0x1e
 b84:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b88:	34 02 00 58 	mvi r2,88
 b8c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b90:	38 02 bf 20 	mvu r2,0xbf20
 b94:	78 42 00 02 	orhi r2,r2,0x2
 b98:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b9c:	34 02 00 54 	mvi r2,84
 ba0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ba4:	58 24 00 10 	sw (r1+16),r4
 ba8:	e3 ff fe d0 	bi 6e8 <_ZN9clase_pwm6setMovEcc+0x5c>

00000bac <_ZN9clase_pwm4LeftEiii>:
pwm -> addr = vaddr;
 bac:	78 05 00 00 	mvhi r5,0x0
 bb0:	38 a5 0e a8 	ori r5,r5,0xea8
 bb4:	28 a1 00 00 	lw r1,(r5+0)
 bb8:	28 21 00 00 	lw r1,(r1+0)
 bbc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bc0:	38 02 84 80 	mvu r2,0x8480
 bc4:	78 42 00 1e 	orhi r2,r2,0x1e
 bc8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bcc:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 bd0:	38 02 c3 50 	mvu r2,0xc350
 bd4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bd8:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 bdc:	34 02 00 01 	mvi r2,1
 be0:	58 22 00 10 	sw (r1+16),r2
}
 be4:	c3 a0 00 00 	ret

00000be8 <_ZN9clase_pwm6CenterEiii>:
pwm -> addr = vaddr;
 be8:	78 05 00 00 	mvhi r5,0x0
 bec:	38 a5 0e ac 	ori r5,r5,0xeac
 bf0:	28 a1 00 00 	lw r1,(r5+0)
 bf4:	28 21 00 00 	lw r1,(r1+0)
 bf8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bfc:	38 02 84 80 	mvu r2,0x8480
 c00:	78 42 00 1e 	orhi r2,r2,0x1e
 c04:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c08:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c0c:	38 02 e8 48 	mvu r2,0xe848
 c10:	78 42 00 01 	orhi r2,r2,0x1
 c14:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c18:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 c1c:	34 02 00 01 	mvi r2,1
 c20:	58 22 00 10 	sw (r1+16),r2
}
 c24:	c3 a0 00 00 	ret

00000c28 <_ZN9clase_pwm5RightEiii>:
pwm -> addr = vaddr;
 c28:	78 05 00 00 	mvhi r5,0x0
 c2c:	38 a5 0e b0 	ori r5,r5,0xeb0
 c30:	28 a1 00 00 	lw r1,(r5+0)
 c34:	28 21 00 00 	lw r1,(r1+0)
 c38:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 c3c:	38 02 84 80 	mvu r2,0x8480
 c40:	78 42 00 1e 	orhi r2,r2,0x1e
 c44:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c48:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c4c:	38 02 47 d8 	mvu r2,0x47d8
 c50:	78 42 00 03 	orhi r2,r2,0x3
 c54:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c58:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 c5c:	34 02 00 01 	mvi r2,1
 c60:	58 22 00 10 	sw (r1+16),r2
}
 c64:	c3 a0 00 00 	ret

00000c68 <_ZN9clase_pwm5LeaveEiii>:
pwm -> addr = vaddr;
 c68:	78 05 00 00 	mvhi r5,0x0
 c6c:	38 a5 0e b4 	ori r5,r5,0xeb4
 c70:	28 a1 00 00 	lw r1,(r5+0)
 c74:	28 21 00 00 	lw r1,(r1+0)
 c78:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 c7c:	38 02 84 80 	mvu r2,0x8480
 c80:	78 42 00 1e 	orhi r2,r2,0x1e
 c84:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c88:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c8c:	38 02 bf 20 	mvu r2,0xbf20
 c90:	78 42 00 02 	orhi r2,r2,0x2
 c94:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c98:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 c9c:	34 02 00 01 	mvi r2,1
 ca0:	58 22 00 10 	sw (r1+16),r2
}
 ca4:	c3 a0 00 00 	ret

00000ca8 <_ZN9clase_pwm4TakeEiii>:
pwm -> addr = vaddr;
 ca8:	78 05 00 00 	mvhi r5,0x0
 cac:	38 a5 0e b8 	ori r5,r5,0xeb8
 cb0:	28 a1 00 00 	lw r1,(r5+0)
 cb4:	28 21 00 00 	lw r1,(r1+0)
 cb8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 cbc:	38 02 84 80 	mvu r2,0x8480
 cc0:	78 42 00 1e 	orhi r2,r2,0x1e
 cc4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 cc8:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 ccc:	38 02 86 a0 	mvu r2,0x86a0
 cd0:	78 42 00 01 	orhi r2,r2,0x1
 cd4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 cd8:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 cdc:	34 02 00 01 	mvi r2,1
 ce0:	58 22 00 10 	sw (r1+16),r2
}
 ce4:	c3 a0 00 00 	ret

00000ce8 <_ZN9clase_pwm8pwm_readEv>:
	return pwm -> d_out;
 ce8:	78 02 00 00 	mvhi r2,0x0
 cec:	38 42 0e bc 	ori r2,r2,0xebc
 cf0:	28 41 00 00 	lw r1,(r2+0)
 cf4:	28 21 00 00 	lw r1,(r1+0)
 cf8:	28 21 00 00 	lw r1,(r1+0)
}
 cfc:	c3 a0 00 00 	ret

00000d00 <_ZN9clase_pwm6pwm_rdEh>:
pwm -> rd = vrd;
 d00:	78 03 00 00 	mvhi r3,0x0
 d04:	38 63 0e c0 	ori r3,r3,0xec0
 d08:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_rd(uint8_t vrd){
 d0c:	20 42 00 ff 	andi r2,r2,0xff
pwm -> rd = vrd;
 d10:	28 21 00 00 	lw r1,(r1+0)
 d14:	30 22 00 04 	sb (r1+4),r2
}
 d18:	c3 a0 00 00 	ret

00000d1c <_ZN9clase_pwm8pwm_addrEj>:
pwm -> addr = vaddr;
 d1c:	78 03 00 00 	mvhi r3,0x0
 d20:	38 63 0e c4 	ori r3,r3,0xec4
 d24:	28 61 00 00 	lw r1,(r3+0)
 d28:	28 21 00 00 	lw r1,(r1+0)
 d2c:	58 22 00 08 	sw (r1+8),r2
}
 d30:	c3 a0 00 00 	ret

00000d34 <_ZN9clase_pwm6pwm_wrEh>:
pwm -> wr = vwr;
 d34:	78 03 00 00 	mvhi r3,0x0
 d38:	38 63 0e c8 	ori r3,r3,0xec8
 d3c:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_wr(uint8_t vwr){
 d40:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 d44:	28 21 00 00 	lw r1,(r1+0)
 d48:	30 22 00 0c 	sb (r1+12),r2
}
 d4c:	c3 a0 00 00 	ret

00000d50 <_ZN9clase_pwm7pwm_dinEj>:
pwm -> d_in = vd_in;
 d50:	78 03 00 00 	mvhi r3,0x0
 d54:	38 63 0e cc 	ori r3,r3,0xecc
 d58:	28 61 00 00 	lw r1,(r3+0)
 d5c:	28 21 00 00 	lw r1,(r1+0)
 d60:	58 22 00 10 	sw (r1+16),r2
}
 d64:	c3 a0 00 00 	ret

00000d68 <_ZN11clase_timer6nsleepEi>:
void clase_timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 d68:	78 03 00 00 	mvhi r3,0x0
 d6c:	38 63 0e d0 	ori r3,r3,0xed0
 d70:	28 61 00 00 	lw r1,(r3+0)
 d74:	08 42 00 64 	muli r2,r2,100
 d78:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 d7c:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 d80:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 d84:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 d88:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 d8c:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 d90:	20 21 00 01 	andi r1,r1,0x1
 d94:	44 20 ff fe 	be r1,r0,d8c <_ZN11clase_timer6nsleepEi+0x24>
};
 d98:	c3 a0 00 00 	ret

00000d9c <_ZN10clase_uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 d9c:	c3 a0 00 00 	ret

00000da0 <_ZN10clase_uart11uart_getintEv>:

int clase_uart::uart_getint()
{
    while   (!(uart0->ucr & UART_DR));
 da0:	78 02 00 00 	mvhi r2,0x0
 da4:	38 42 0e d4 	ori r2,r2,0xed4
 da8:	28 41 00 00 	lw r1,(r2+0)
 dac:	28 22 00 00 	lw r2,(r1+0)
 db0:	28 41 00 00 	lw r1,(r2+0)
 db4:	20 21 00 01 	andi r1,r1,0x1
 db8:	44 20 ff fe 	be r1,r0,db0 <_ZN10clase_uart11uart_getintEv+0x10>
    return uart0->rxtx;
 dbc:	28 41 00 04 	lw r1,(r2+4)
    }
 dc0:	c3 a0 00 00 	ret

00000dc4 <_ZN10clase_uart12uart_getcharEv>:
char clase_uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 dc4:	78 02 00 00 	mvhi r2,0x0
 dc8:	38 42 0e d8 	ori r2,r2,0xed8
 dcc:	28 41 00 00 	lw r1,(r2+0)
 dd0:	28 22 00 00 	lw r2,(r1+0)
 dd4:	28 41 00 00 	lw r1,(r2+0)
 dd8:	20 21 00 01 	andi r1,r1,0x1
 ddc:	44 20 ff fe 	be r1,r0,dd4 <_ZN10clase_uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 de0:	28 41 00 04 	lw r1,(r2+4)
}
 de4:	20 21 00 ff 	andi r1,r1,0xff
 de8:	c3 a0 00 00 	ret

00000dec <_ZN10clase_uart12uart_putcharEc>:

void clase_uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 dec:	78 03 00 00 	mvhi r3,0x0
 df0:	38 63 0e dc 	ori r3,r3,0xedc
 df4:	28 61 00 00 	lw r1,(r3+0)
{
 df8:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 dfc:	28 23 00 00 	lw r3,(r1+0)
 e00:	28 61 00 00 	lw r1,(r3+0)
 e04:	20 21 00 10 	andi r1,r1,0x10
 e08:	5c 20 ff fe 	bne r1,r0,e00 <_ZN10clase_uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 e0c:	58 62 00 04 	sw (r3+4),r2
}
 e10:	c3 a0 00 00 	ret

00000e14 <_ZN10clase_uart11uart_putstrEPc>:

void clase_uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 e14:	40 44 00 00 	lbu r4,(r2+0)
 e18:	44 80 00 0c 	be r4,r0,e48 <_ZN10clase_uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 e1c:	78 03 00 00 	mvhi r3,0x0
 e20:	38 63 0e e0 	ori r3,r3,0xee0
 e24:	28 61 00 00 	lw r1,(r3+0)
 e28:	28 23 00 00 	lw r3,(r1+0)
 e2c:	28 61 00 00 	lw r1,(r3+0)
 e30:	20 21 00 10 	andi r1,r1,0x10
 e34:	5c 20 ff fe 	bne r1,r0,e2c <_ZN10clase_uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 e38:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 e3c:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 e40:	40 44 00 00 	lbu r4,(r2+0)
 e44:	5c 80 ff fa 	bne r4,r0,e2c <_ZN10clase_uart11uart_putstrEPc+0x18>
	}
}
 e48:	c3 a0 00 00 	ret
