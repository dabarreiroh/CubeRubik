
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000006c  000005d8  000005d8  0000062c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000644  00000644  00000698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000065c  0000065c  000006b0  2**2
                  ALLOC
  4 .debug_frame  000001bc  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000875  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f2  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  000013d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004df  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000351  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY
 12 .debug_loc    0000015e  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 91 	calli 310 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 60 	ori gp,gp,0x660
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 5c 	ori r1,r1,0x65c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 06 e0 	ori r3,r3,0x6e0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
        pwm_addr(8);
        pwm_din(4);
	    pwm_addr(00);
        pwm_din(1);
	*/
}
 208:	34 01 00 00 	mvi r1,0
 20c:	c3 a0 00 00 	ret

00000210 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 210:	78 01 00 00 	mvhi r1,0x0
 214:	38 21 05 d8 	ori r1,r1,0x5d8
 218:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 21c:	78 04 00 00 	mvhi r4,0x0
 220:	38 84 05 dc 	ori r4,r4,0x5dc
 224:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 228:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 22c:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 230:	34 21 00 01 	addi r1,r1,1
 234:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 238:	34 01 00 0e 	mvi r1,14
 23c:	58 61 00 00 	sw (r3+0),r1
}
 240:	c3 a0 00 00 	ret

00000244 <isr_null>:
 244:	c3 a0 00 00 	ret

00000248 <pwm_read>:
	return pwm -> d_out;
 248:	78 02 00 00 	mvhi r2,0x0
 24c:	38 42 05 e0 	ori r2,r2,0x5e0
 250:	28 41 00 00 	lw r1,(r2+0)
 254:	28 21 00 00 	lw r1,(r1+0)
 258:	28 21 00 00 	lw r1,(r1+0)
}
 25c:	c3 a0 00 00 	ret

00000260 <pwm_rd>:
pwm -> rd = vrd;
 260:	78 03 00 00 	mvhi r3,0x0
 264:	38 63 05 e4 	ori r3,r3,0x5e4
 268:	28 62 00 00 	lw r2,(r3+0)
void pwm_rd(uint8_t vrd){
 26c:	20 21 00 ff 	andi r1,r1,0xff
pwm -> rd = vrd;
 270:	28 42 00 00 	lw r2,(r2+0)
 274:	30 41 00 04 	sb (r2+4),r1
}
 278:	c3 a0 00 00 	ret

0000027c <pwm_addr>:
pwm -> addr = vaddr;
 27c:	78 03 00 00 	mvhi r3,0x0
 280:	38 63 05 e8 	ori r3,r3,0x5e8
 284:	28 62 00 00 	lw r2,(r3+0)
 288:	28 42 00 00 	lw r2,(r2+0)
 28c:	58 41 00 08 	sw (r2+8),r1
}
 290:	c3 a0 00 00 	ret

00000294 <pwm_wr>:
pwm -> wr = vwr;
 294:	78 03 00 00 	mvhi r3,0x0
 298:	38 63 05 ec 	ori r3,r3,0x5ec
 29c:	28 62 00 00 	lw r2,(r3+0)
void pwm_wr(uint8_t vwr){
 2a0:	20 21 00 ff 	andi r1,r1,0xff
pwm -> wr = vwr;
 2a4:	28 42 00 00 	lw r2,(r2+0)
 2a8:	30 41 00 0c 	sb (r2+12),r1
}
 2ac:	c3 a0 00 00 	ret

000002b0 <pwm_din>:
pwm -> d_in = vd_in;
 2b0:	78 03 00 00 	mvhi r3,0x0
 2b4:	38 63 05 f0 	ori r3,r3,0x5f0
 2b8:	28 62 00 00 	lw r2,(r3+0)
 2bc:	28 42 00 00 	lw r2,(r2+0)
 2c0:	58 41 00 10 	sw (r2+16),r1
}
 2c4:	c3 a0 00 00 	ret

000002c8 <gpio_config_dir>:
	gpio0 -> dir = vdir;
 2c8:	78 03 00 00 	mvhi r3,0x0
 2cc:	38 63 05 f4 	ori r3,r3,0x5f4
 2d0:	28 62 00 00 	lw r2,(r3+0)
 2d4:	28 42 00 00 	lw r2,(r2+0)
 2d8:	58 41 00 08 	sw (r2+8),r1
}
 2dc:	c3 a0 00 00 	ret

000002e0 <gpio_write>:
	gpio0 -> wr = vpins;
 2e0:	78 03 00 00 	mvhi r3,0x0
 2e4:	38 63 05 f8 	ori r3,r3,0x5f8
 2e8:	28 62 00 00 	lw r2,(r3+0)
 2ec:	28 42 00 00 	lw r2,(r2+0)
 2f0:	58 41 00 04 	sw (r2+4),r1
}
 2f4:	c3 a0 00 00 	ret

000002f8 <gpio_read>:
	return gpio0 -> rd;
 2f8:	78 02 00 00 	mvhi r2,0x0
 2fc:	38 42 05 fc 	ori r2,r2,0x5fc
 300:	28 41 00 00 	lw r1,(r2+0)
 304:	28 21 00 00 	lw r1,(r1+0)
 308:	28 21 00 00 	lw r1,(r1+0)
}
 30c:	c3 a0 00 00 	ret

00000310 <irq_handler>:
{
 310:	37 9c ff f0 	addi sp,sp,-16
 314:	5b 8b 00 10 	sw (sp+16),r11
 318:	5b 8c 00 0c 	sw (sp+12),r12
 31c:	5b 8d 00 08 	sw (sp+8),r13
 320:	5b 9d 00 04 	sw (sp+4),ra
 324:	78 02 00 00 	mvhi r2,0x0
 328:	38 42 06 00 	ori r2,r2,0x600
 32c:	28 4b 00 00 	lw r11,(r2+0)
 330:	b8 20 60 00 	mv r12,r1
 334:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 338:	21 81 00 01 	andi r1,r12,0x1
 33c:	44 20 00 03 	be r1,r0,348 <irq_handler+0x38>
 340:	29 61 00 00 	lw r1,(r11+0)
 344:	d8 20 00 00 	call r1
 348:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 34c:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 350:	5d ab ff fa 	bne r13,r11,338 <irq_handler+0x28>
}
 354:	2b 9d 00 04 	lw ra,(sp+4)
 358:	2b 8b 00 10 	lw r11,(sp+16)
 35c:	2b 8c 00 0c 	lw r12,(sp+12)
 360:	2b 8d 00 08 	lw r13,(sp+8)
 364:	37 9c 00 10 	addi sp,sp,16
 368:	c3 a0 00 00 	ret

0000036c <isr_init>:
{
 36c:	78 02 00 00 	mvhi r2,0x0
 370:	38 42 06 04 	ori r2,r2,0x604
 374:	28 41 00 00 	lw r1,(r2+0)
 378:	78 02 00 00 	mvhi r2,0x0
 37c:	38 42 06 08 	ori r2,r2,0x608
 380:	28 43 00 00 	lw r3,(r2+0)
 384:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 388:	58 23 00 00 	sw (r1+0),r3
 38c:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 390:	5c 22 ff fe 	bne r1,r2,388 <isr_init+0x1c>
}
 394:	c3 a0 00 00 	ret

00000398 <isr_register>:
	isr_table[irq] = isr;
 398:	78 04 00 00 	mvhi r4,0x0
 39c:	38 84 06 0c 	ori r4,r4,0x60c
 3a0:	3c 23 00 02 	sli r3,r1,2
 3a4:	28 81 00 00 	lw r1,(r4+0)
 3a8:	b4 23 08 00 	add r1,r1,r3
 3ac:	58 22 00 00 	sw (r1+0),r2
}
 3b0:	c3 a0 00 00 	ret

000003b4 <isr_unregister>:
	isr_table[irq] = &isr_null;
 3b4:	78 03 00 00 	mvhi r3,0x0
 3b8:	38 63 06 10 	ori r3,r3,0x610
 3bc:	3c 22 00 02 	sli r2,r1,2
 3c0:	28 61 00 00 	lw r1,(r3+0)
 3c4:	78 03 00 00 	mvhi r3,0x0
 3c8:	38 63 06 14 	ori r3,r3,0x614
 3cc:	b4 22 08 00 	add r1,r1,r2
 3d0:	28 62 00 00 	lw r2,(r3+0)
 3d4:	58 22 00 00 	sw (r1+0),r2
}
 3d8:	c3 a0 00 00 	ret

000003dc <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 3dc:	78 03 00 00 	mvhi r3,0x0
 3e0:	38 02 86 a0 	mvu r2,0x86a0
 3e4:	78 42 00 01 	orhi r2,r2,0x1
 3e8:	38 63 06 18 	ori r3,r3,0x618
 3ec:	88 22 08 00 	mul r1,r1,r2
 3f0:	28 62 00 00 	lw r2,(r3+0)
 3f4:	28 42 00 00 	lw r2,(r2+0)
 3f8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3fc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 400:	34 01 00 08 	mvi r1,8
 404:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 408:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 40c:	20 21 00 01 	andi r1,r1,0x1
 410:	44 20 ff fe 	be r1,r0,408 <msleep+0x2c>
}
 414:	c3 a0 00 00 	ret

00000418 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 418:	78 03 00 00 	mvhi r3,0x0
 41c:	38 63 06 1c 	ori r3,r3,0x61c
 420:	28 62 00 00 	lw r2,(r3+0)
 424:	08 21 00 64 	muli r1,r1,100
 428:	28 42 00 00 	lw r2,(r2+0)
 42c:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 430:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 434:	34 01 00 08 	mvi r1,8
 438:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 43c:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 440:	20 21 00 01 	andi r1,r1,0x1
 444:	44 20 ff fe 	be r1,r0,43c <nsleep+0x24>
}
 448:	c3 a0 00 00 	ret

0000044c <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 44c:	78 02 00 00 	mvhi r2,0x0
 450:	38 42 06 20 	ori r2,r2,0x620
 454:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 458:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 45c:	34 02 27 10 	mvi r2,10000
 460:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 464:	38 63 06 24 	ori r3,r3,0x624
	timer0->compare0 = (FCPU/10000);
 468:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 46c:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 470:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 474:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 478:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 47c:	34 02 00 0e 	mvi r2,14
 480:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 484:	78 02 00 00 	mvhi r2,0x0
 488:	38 42 06 28 	ori r2,r2,0x628
 48c:	38 63 06 2c 	ori r3,r3,0x62c
 490:	28 41 00 00 	lw r1,(r2+0)
 494:	28 62 00 00 	lw r2,(r3+0)
 498:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 49c:	c3 a0 00 00 	ret

000004a0 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 4a0:	c3 a0 00 00 	ret

000004a4 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 4a4:	78 02 00 00 	mvhi r2,0x0
 4a8:	38 42 06 30 	ori r2,r2,0x630
 4ac:	28 41 00 00 	lw r1,(r2+0)
 4b0:	28 22 00 00 	lw r2,(r1+0)
 4b4:	28 41 00 00 	lw r1,(r2+0)
 4b8:	20 21 00 01 	andi r1,r1,0x1
 4bc:	44 20 ff fe 	be r1,r0,4b4 <uart_getchar+0x10>
	return uart0->rxtx;
 4c0:	28 41 00 04 	lw r1,(r2+4)
}
 4c4:	20 21 00 ff 	andi r1,r1,0xff
 4c8:	c3 a0 00 00 	ret

000004cc <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4cc:	78 03 00 00 	mvhi r3,0x0
 4d0:	38 63 06 34 	ori r3,r3,0x634
 4d4:	28 62 00 00 	lw r2,(r3+0)
{
 4d8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4dc:	28 43 00 00 	lw r3,(r2+0)
 4e0:	28 62 00 00 	lw r2,(r3+0)
 4e4:	20 42 00 10 	andi r2,r2,0x10
 4e8:	5c 40 ff fe 	bne r2,r0,4e0 <uart_putchar+0x14>
	uart0->rxtx = c;
 4ec:	58 61 00 04 	sw (r3+4),r1
}
 4f0:	c3 a0 00 00 	ret

000004f4 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4f4:	40 24 00 00 	lbu r4,(r1+0)
 4f8:	44 80 00 0c 	be r4,r0,528 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 4fc:	78 03 00 00 	mvhi r3,0x0
 500:	38 63 06 38 	ori r3,r3,0x638
 504:	28 62 00 00 	lw r2,(r3+0)
 508:	28 43 00 00 	lw r3,(r2+0)
 50c:	28 62 00 00 	lw r2,(r3+0)
 510:	20 42 00 10 	andi r2,r2,0x10
 514:	5c 40 ff fe 	bne r2,r0,50c <uart_putstr+0x18>
	uart0->rxtx = c;
 518:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 51c:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 520:	40 24 00 00 	lbu r4,(r1+0)
 524:	5c 80 ff fa 	bne r4,r0,50c <uart_putstr+0x18>
	}
}
 528:	c3 a0 00 00 	ret

0000052c <i2c_init>:
 * I2C Functions
 */
void i2c_init()
{

	i2c0->prerl =0x00;
 52c:	78 02 00 00 	mvhi r2,0x0
 530:	38 42 06 3c 	ori r2,r2,0x63c
 534:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 538:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 53c:	28 21 00 00 	lw r1,(r1+0)
 540:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 544:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 548:	34 02 ff 80 	mvi r2,-128
 54c:	30 22 00 02 	sb (r1+2),r2


}
 550:	c3 a0 00 00 	ret

00000554 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 554:	78 05 00 00 	mvhi r5,0x0
 558:	38 a5 06 40 	ori r5,r5,0x640
 55c:	28 a4 00 00 	lw r4,(r5+0)
 560:	3c 21 00 02 	sli r1,r1,2
{
 564:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 568:	28 84 00 00 	lw r4,(r4+0)
 56c:	20 21 00 fc 	andi r1,r1,0xfc
{
 570:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 574:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 578:	34 01 ff 90 	mvi r1,-112
 57c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 580:	40 81 00 04 	lbu r1,(r4+4)
 584:	20 21 00 02 	andi r1,r1,0x2
 588:	5c 20 ff fe 	bne r1,r0,580 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 58c:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 590:	34 01 00 10 	mvi r1,16
 594:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 598:	40 81 00 04 	lbu r1,(r4+4)
 59c:	20 21 00 02 	andi r1,r1,0x2
 5a0:	5c 20 ff fe 	bne r1,r0,598 <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 5a4:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 5a8:	34 01 00 10 	mvi r1,16
 5ac:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 5b0:	40 81 00 04 	lbu r1,(r4+4)
 5b4:	20 21 00 02 	andi r1,r1,0x2
 5b8:	5c 20 ff fe 	bne r1,r0,5b0 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 5bc:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 5c0:	34 01 00 50 	mvi r1,80
 5c4:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 5c8:	40 81 00 04 	lbu r1,(r4+4)
 5cc:	20 21 00 02 	andi r1,r1,0x2
 5d0:	5c 20 ff fe 	bne r1,r0,5c8 <i2c_write+0x74>
//7

}
 5d4:	c3 a0 00 00 	ret
