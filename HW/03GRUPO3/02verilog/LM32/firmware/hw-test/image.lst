
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eb4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000080  00000eb4  00000eb4  00000f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000f34  00000f34  00000f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000f4c  00000f4c  00000fa0  2**2
                  ALLOC
  4 .debug_frame  00000268  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e4d  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c5  00000000  00000000  00004055  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000000a0  00000000  00000000  0000491a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000310  00000000  00000000  000049ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ec0  00000000  00000000  00004cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fb  00000000  00000000  00005b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY
 12 .debug_loc    000020ee  00000000  00000000  00006096  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 ca 	calli 3f4 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0f 50 	ori gp,gp,0xf50
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0f 4c 	ori r1,r1,0xf4c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0f d0 	ori r3,r3,0xfd0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "clase_pwm.h"
//#include "soc-hw.h"
#include "clase_timer.h"
#include "clase_uart.h"

int main(){
 208:	37 9c ff ec 	addi sp,sp,-20
 20c:	5b 8b 00 08 	sw (sp+8),r11
 210:	5b 9d 00 04 	sw (sp+4),ra

    clase_pwm arm;
    clase_timer tim;
    arm.pwm_setMov(1,13);
 214:	34 03 00 0d 	mvi r3,13
 218:	37 81 00 10 	addi r1,sp,16
 21c:	34 02 00 01 	mvi r2,1
    tim.nsleep(3000000);
 220:	38 0b c6 c0 	mvu r11,0xc6c0
 224:	79 6b 00 2d 	orhi r11,r11,0x2d
    arm.pwm_setMov(1,13);
 228:	f8 00 01 25 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 22c:	b9 60 10 00 	mv r2,r11
 230:	37 81 00 0c 	addi r1,sp,12
 234:	f8 00 02 f0 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,14);
 238:	34 03 00 0e 	mvi r3,14
 23c:	37 81 00 10 	addi r1,sp,16
 240:	34 02 00 01 	mvi r2,1
 244:	f8 00 01 1e 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 248:	b9 60 10 00 	mv r2,r11
 24c:	37 81 00 0c 	addi r1,sp,12
 250:	f8 00 02 e9 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,10);
 254:	34 03 00 0a 	mvi r3,10
 258:	37 81 00 10 	addi r1,sp,16
 25c:	34 02 00 01 	mvi r2,1
 260:	f8 00 01 17 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 264:	b9 60 10 00 	mv r2,r11
 268:	37 81 00 0c 	addi r1,sp,12
 26c:	f8 00 02 e2 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,12);
 270:	34 03 00 0c 	mvi r3,12
 274:	37 81 00 10 	addi r1,sp,16
 278:	34 02 00 01 	mvi r2,1
 27c:	f8 00 01 10 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 280:	b9 60 10 00 	mv r2,r11
 284:	37 81 00 0c 	addi r1,sp,12
 288:	f8 00 02 db 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(2,13);
 28c:	34 03 00 0d 	mvi r3,13
 290:	37 81 00 10 	addi r1,sp,16
 294:	34 02 00 02 	mvi r2,2
 298:	f8 00 01 09 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 29c:	b9 60 10 00 	mv r2,r11
 2a0:	37 81 00 0c 	addi r1,sp,12
 2a4:	f8 00 02 d4 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(2,14);
 2a8:	34 03 00 0e 	mvi r3,14
 2ac:	37 81 00 10 	addi r1,sp,16
 2b0:	34 02 00 02 	mvi r2,2
 2b4:	f8 00 01 02 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 2b8:	b9 60 10 00 	mv r2,r11
 2bc:	37 81 00 0c 	addi r1,sp,12
 2c0:	f8 00 02 cd 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,10);   
 2c4:	34 03 00 0a 	mvi r3,10
 2c8:	37 81 00 10 	addi r1,sp,16
 2cc:	34 02 00 01 	mvi r2,1
 2d0:	f8 00 00 fb 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);    
 2d4:	b9 60 10 00 	mv r2,r11
 2d8:	37 81 00 0c 	addi r1,sp,12
 2dc:	f8 00 02 c6 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,11);    
 2e0:	34 03 00 0b 	mvi r3,11
 2e4:	37 81 00 10 	addi r1,sp,16
 2e8:	34 02 00 01 	mvi r2,1
 2ec:	f8 00 00 f4 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 2f0:	b9 60 10 00 	mv r2,r11
 2f4:	37 81 00 0c 	addi r1,sp,12
 2f8:	f8 00 02 bf 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,12);
 2fc:	34 03 00 0c 	mvi r3,12
 300:	37 81 00 10 	addi r1,sp,16
 304:	34 02 00 01 	mvi r2,1
 308:	f8 00 00 ed 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 30c:	b9 60 10 00 	mv r2,r11
 310:	37 81 00 0c 	addi r1,sp,12
 314:	f8 00 02 b8 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(2,10);
 318:	34 03 00 0a 	mvi r3,10
 31c:	37 81 00 10 	addi r1,sp,16
 320:	34 02 00 02 	mvi r2,2
 324:	f8 00 00 e6 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 328:	b9 60 10 00 	mv r2,r11
 32c:	37 81 00 0c 	addi r1,sp,12
 330:	f8 00 02 b1 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(2,11); 
 334:	34 03 00 0b 	mvi r3,11
 338:	37 81 00 10 	addi r1,sp,16
 33c:	34 02 00 02 	mvi r2,2
 340:	f8 00 00 df 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(3000000);
 344:	b9 60 10 00 	mv r2,r11
 348:	37 81 00 0c 	addi r1,sp,12
 34c:	f8 00 02 aa 	calli df4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(2,12);
 350:	37 81 00 10 	addi r1,sp,16
 354:	34 03 00 0c 	mvi r3,12
 358:	34 02 00 02 	mvi r2,2
 35c:	f8 00 00 d8 	calli 6bc <_ZN9clase_pwm10pwm_setMovEii>
}
 360:	34 01 00 00 	mvi r1,0
 364:	2b 9d 00 04 	lw ra,(sp+4)
 368:	2b 8b 00 08 	lw r11,(sp+8)
 36c:	37 9c 00 14 	addi sp,sp,20
 370:	c3 a0 00 00 	ret

00000374 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 374:	78 01 00 00 	mvhi r1,0x0
 378:	38 21 0e b4 	ori r1,r1,0xeb4
 37c:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 380:	78 04 00 00 	mvhi r4,0x0
 384:	38 84 0e b8 	ori r4,r4,0xeb8
 388:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 38c:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 390:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 394:	34 21 00 01 	addi r1,r1,1
 398:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 39c:	34 01 00 0e 	mvi r1,14
 3a0:	58 61 00 00 	sw (r3+0),r1
}
 3a4:	c3 a0 00 00 	ret

000003a8 <isr_null>:
 3a8:	c3 a0 00 00 	ret

000003ac <gpio_config_dir>:
	gpio0 -> dir = vdir;
 3ac:	78 03 00 00 	mvhi r3,0x0
 3b0:	38 63 0e bc 	ori r3,r3,0xebc
 3b4:	28 62 00 00 	lw r2,(r3+0)
 3b8:	28 42 00 00 	lw r2,(r2+0)
 3bc:	58 41 00 08 	sw (r2+8),r1
}
 3c0:	c3 a0 00 00 	ret

000003c4 <gpio_write>:
	gpio0 -> wr = vpins;
 3c4:	78 03 00 00 	mvhi r3,0x0
 3c8:	38 63 0e c0 	ori r3,r3,0xec0
 3cc:	28 62 00 00 	lw r2,(r3+0)
 3d0:	28 42 00 00 	lw r2,(r2+0)
 3d4:	58 41 00 04 	sw (r2+4),r1
}
 3d8:	c3 a0 00 00 	ret

000003dc <gpio_read>:
	return gpio0 -> rd;
 3dc:	78 02 00 00 	mvhi r2,0x0
 3e0:	38 42 0e c4 	ori r2,r2,0xec4
 3e4:	28 41 00 00 	lw r1,(r2+0)
 3e8:	28 21 00 00 	lw r1,(r1+0)
 3ec:	28 21 00 00 	lw r1,(r1+0)
}
 3f0:	c3 a0 00 00 	ret

000003f4 <irq_handler>:
{
 3f4:	37 9c ff f0 	addi sp,sp,-16
 3f8:	5b 8b 00 10 	sw (sp+16),r11
 3fc:	5b 8c 00 0c 	sw (sp+12),r12
 400:	5b 8d 00 08 	sw (sp+8),r13
 404:	5b 9d 00 04 	sw (sp+4),ra
 408:	78 02 00 00 	mvhi r2,0x0
 40c:	38 42 0e c8 	ori r2,r2,0xec8
 410:	28 4b 00 00 	lw r11,(r2+0)
 414:	b8 20 60 00 	mv r12,r1
 418:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 41c:	21 81 00 01 	andi r1,r12,0x1
 420:	44 20 00 03 	be r1,r0,42c <irq_handler+0x38>
 424:	29 61 00 00 	lw r1,(r11+0)
 428:	d8 20 00 00 	call r1
 42c:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 430:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 434:	5d ab ff fa 	bne r13,r11,41c <irq_handler+0x28>
}
 438:	2b 9d 00 04 	lw ra,(sp+4)
 43c:	2b 8b 00 10 	lw r11,(sp+16)
 440:	2b 8c 00 0c 	lw r12,(sp+12)
 444:	2b 8d 00 08 	lw r13,(sp+8)
 448:	37 9c 00 10 	addi sp,sp,16
 44c:	c3 a0 00 00 	ret

00000450 <isr_init>:
{
 450:	78 02 00 00 	mvhi r2,0x0
 454:	38 42 0e cc 	ori r2,r2,0xecc
 458:	28 41 00 00 	lw r1,(r2+0)
 45c:	78 02 00 00 	mvhi r2,0x0
 460:	38 42 0e d0 	ori r2,r2,0xed0
 464:	28 43 00 00 	lw r3,(r2+0)
 468:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 46c:	58 23 00 00 	sw (r1+0),r3
 470:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 474:	5c 22 ff fe 	bne r1,r2,46c <isr_init+0x1c>
}
 478:	c3 a0 00 00 	ret

0000047c <isr_register>:
	isr_table[irq] = isr;
 47c:	78 04 00 00 	mvhi r4,0x0
 480:	38 84 0e d4 	ori r4,r4,0xed4
 484:	3c 23 00 02 	sli r3,r1,2
 488:	28 81 00 00 	lw r1,(r4+0)
 48c:	b4 23 08 00 	add r1,r1,r3
 490:	58 22 00 00 	sw (r1+0),r2
}
 494:	c3 a0 00 00 	ret

00000498 <isr_unregister>:
	isr_table[irq] = &isr_null;
 498:	78 03 00 00 	mvhi r3,0x0
 49c:	38 63 0e d8 	ori r3,r3,0xed8
 4a0:	3c 22 00 02 	sli r2,r1,2
 4a4:	28 61 00 00 	lw r1,(r3+0)
 4a8:	78 03 00 00 	mvhi r3,0x0
 4ac:	38 63 0e dc 	ori r3,r3,0xedc
 4b0:	b4 22 08 00 	add r1,r1,r2
 4b4:	28 62 00 00 	lw r2,(r3+0)
 4b8:	58 22 00 00 	sw (r1+0),r2
}
 4bc:	c3 a0 00 00 	ret

000004c0 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 4c0:	78 03 00 00 	mvhi r3,0x0
 4c4:	38 02 86 a0 	mvu r2,0x86a0
 4c8:	78 42 00 01 	orhi r2,r2,0x1
 4cc:	38 63 0e e0 	ori r3,r3,0xee0
 4d0:	88 22 08 00 	mul r1,r1,r2
 4d4:	28 62 00 00 	lw r2,(r3+0)
 4d8:	28 42 00 00 	lw r2,(r2+0)
 4dc:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 4e0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 4e4:	34 01 00 08 	mvi r1,8
 4e8:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 4ec:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 4f0:	20 21 00 01 	andi r1,r1,0x1
 4f4:	44 20 ff fe 	be r1,r0,4ec <msleep+0x2c>
}
 4f8:	c3 a0 00 00 	ret

000004fc <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 4fc:	78 03 00 00 	mvhi r3,0x0
 500:	38 63 0e e4 	ori r3,r3,0xee4
 504:	28 62 00 00 	lw r2,(r3+0)
 508:	08 21 00 64 	muli r1,r1,100
 50c:	28 42 00 00 	lw r2,(r2+0)
 510:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 514:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 518:	34 01 00 08 	mvi r1,8
 51c:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 520:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 524:	20 21 00 01 	andi r1,r1,0x1
 528:	44 20 ff fe 	be r1,r0,520 <nsleep+0x24>
}
 52c:	c3 a0 00 00 	ret

00000530 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 530:	78 02 00 00 	mvhi r2,0x0
 534:	38 42 0e e8 	ori r2,r2,0xee8
 538:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 53c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 540:	34 02 27 10 	mvi r2,10000
 544:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 548:	38 63 0e ec 	ori r3,r3,0xeec
	timer0->compare0 = (FCPU/10000);
 54c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 550:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 554:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 558:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 55c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 560:	34 02 00 0e 	mvi r2,14
 564:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 568:	78 02 00 00 	mvhi r2,0x0
 56c:	38 42 0e f0 	ori r2,r2,0xef0
 570:	38 63 0e f4 	ori r3,r3,0xef4
 574:	28 41 00 00 	lw r1,(r2+0)
 578:	28 62 00 00 	lw r2,(r3+0)
 57c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 580:	c3 a0 00 00 	ret

00000584 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 584:	c3 a0 00 00 	ret

00000588 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 588:	78 02 00 00 	mvhi r2,0x0
 58c:	38 42 0e f8 	ori r2,r2,0xef8
 590:	28 41 00 00 	lw r1,(r2+0)
 594:	28 22 00 00 	lw r2,(r1+0)
 598:	28 41 00 00 	lw r1,(r2+0)
 59c:	20 21 00 01 	andi r1,r1,0x1
 5a0:	44 20 ff fe 	be r1,r0,598 <uart_getchar+0x10>
	return uart0->rxtx;
 5a4:	28 41 00 04 	lw r1,(r2+4)
}
 5a8:	20 21 00 ff 	andi r1,r1,0xff
 5ac:	c3 a0 00 00 	ret

000005b0 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 5b0:	78 03 00 00 	mvhi r3,0x0
 5b4:	38 63 0e fc 	ori r3,r3,0xefc
 5b8:	28 62 00 00 	lw r2,(r3+0)
{
 5bc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 5c0:	28 43 00 00 	lw r3,(r2+0)
 5c4:	28 62 00 00 	lw r2,(r3+0)
 5c8:	20 42 00 10 	andi r2,r2,0x10
 5cc:	5c 40 ff fe 	bne r2,r0,5c4 <uart_putchar+0x14>
	uart0->rxtx = c;
 5d0:	58 61 00 04 	sw (r3+4),r1
}
 5d4:	c3 a0 00 00 	ret

000005d8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 5d8:	40 24 00 00 	lbu r4,(r1+0)
 5dc:	44 80 00 0c 	be r4,r0,60c <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 5e0:	78 03 00 00 	mvhi r3,0x0
 5e4:	38 63 0f 00 	ori r3,r3,0xf00
 5e8:	28 62 00 00 	lw r2,(r3+0)
 5ec:	28 43 00 00 	lw r3,(r2+0)
 5f0:	28 62 00 00 	lw r2,(r3+0)
 5f4:	20 42 00 10 	andi r2,r2,0x10
 5f8:	5c 40 ff fe 	bne r2,r0,5f0 <uart_putstr+0x18>
	uart0->rxtx = c;
 5fc:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 600:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 604:	40 24 00 00 	lbu r4,(r1+0)
 608:	5c 80 ff fa 	bne r4,r0,5f0 <uart_putstr+0x18>
	}
}
 60c:	c3 a0 00 00 	ret

00000610 <i2c_init>:
 * I2C Functions
*/
void i2c_init()
{

	i2c0->prerl =0x00;
 610:	78 02 00 00 	mvhi r2,0x0
 614:	38 42 0f 04 	ori r2,r2,0xf04
 618:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 61c:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 620:	28 21 00 00 	lw r1,(r1+0)
 624:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 628:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 62c:	34 02 ff 80 	mvi r2,-128
 630:	30 22 00 02 	sb (r1+2),r2


}
 634:	c3 a0 00 00 	ret

00000638 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 638:	78 05 00 00 	mvhi r5,0x0
 63c:	38 a5 0f 08 	ori r5,r5,0xf08
 640:	28 a4 00 00 	lw r4,(r5+0)
 644:	3c 21 00 02 	sli r1,r1,2
{
 648:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 64c:	28 84 00 00 	lw r4,(r4+0)
 650:	20 21 00 fc 	andi r1,r1,0xfc
{
 654:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 658:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 65c:	34 01 ff 90 	mvi r1,-112
 660:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 664:	40 81 00 04 	lbu r1,(r4+4)
 668:	20 21 00 02 	andi r1,r1,0x2
 66c:	5c 20 ff fe 	bne r1,r0,664 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 670:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 674:	34 01 00 10 	mvi r1,16
 678:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 67c:	40 81 00 04 	lbu r1,(r4+4)
 680:	20 21 00 02 	andi r1,r1,0x2
 684:	5c 20 ff fe 	bne r1,r0,67c <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 688:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 68c:	34 01 00 10 	mvi r1,16
 690:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 694:	40 81 00 04 	lbu r1,(r4+4)
 698:	20 21 00 02 	andi r1,r1,0x2
 69c:	5c 20 ff fe 	bne r1,r0,694 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 6a0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 6a4:	34 01 00 50 	mvi r1,80
 6a8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 6ac:	40 81 00 04 	lbu r1,(r4+4)
 6b0:	20 21 00 02 	andi r1,r1,0x2
 6b4:	5c 20 ff fe 	bne r1,r0,6ac <i2c_write+0x74>
//7

}
 6b8:	c3 a0 00 00 	ret

000006bc <_ZN9clase_pwm10pwm_setMovEii>:
uint32_t ae7=84;    uint32_t ad7=88;    uint32_t at7=92;

//Arm Selection


if (b == 1){      //Arm 1 -> Servos 0 (RLC) & 1(DA)
 6bc:	34 01 00 01 	mvi r1,1
 6c0:	44 41 00 35 	be r2,r1,794 <_ZN9clase_pwm10pwm_setMovEii+0xd8>

}



if (b == 2){      //Arm 2 -> Servos 2 (RLC) & 3(DA)
 6c4:	34 04 00 02 	mvi r4,2
 6c8:	5c 44 00 19 	bne r2,r4,72c <_ZN9clase_pwm10pwm_setMovEii+0x70>
    
    if (com == 10){ //R
 6cc:	34 02 00 0a 	mvi r2,10
 6d0:	44 62 00 c7 	be r3,r2,9ec <_ZN9clase_pwm10pwm_setMovEii+0x330>
        pwm_din(dind);
        pwm_addr(ae2);
        pwm_din(on);
    }

    if (com == 11){ //C
 6d4:	34 02 00 0b 	mvi r2,11
 6d8:	5c 62 00 9f 	bne r3,r2,954 <_ZN9clase_pwm10pwm_setMovEii+0x298>
}
void clase_pwm:: pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
}
void clase_pwm:: pwm_wr(uint8_t vwr){
pwm -> wr = vwr;
 6dc:	78 03 00 00 	mvhi r3,0x0
 6e0:	38 63 0f 0c 	ori r3,r3,0xf0c
 6e4:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 6e8:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 6ec:	28 42 00 00 	lw r2,(r2+0)
 6f0:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 6f4:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 6f8:	58 43 00 08 	sw (r2+8),r3
}
void clase_pwm:: pwm_din(uint32_t vd_in){
pwm -> d_in = vd_in;
 6fc:	38 03 84 80 	mvu r3,0x8480
 700:	78 63 00 1e 	orhi r3,r3,0x1e
 704:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 708:	34 03 00 1c 	mvi r3,28
 70c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 710:	38 03 fb d0 	mvu r3,0xfbd0
 714:	78 63 00 01 	orhi r3,r3,0x1
 718:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 71c:	34 03 00 18 	mvi r3,24
 720:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 724:	58 41 00 10 	sw (r2+16),r1
};
 728:	c3 a0 00 00 	ret
if (b == 3){      //Arm 3 -> Servos 4 (RLC) & 5(DA)
 72c:	34 04 00 03 	mvi r4,3
 730:	5c 44 00 2f 	bne r2,r4,7ec <_ZN9clase_pwm10pwm_setMovEii+0x130>
    if (com == 10){ //R
 734:	34 02 00 0a 	mvi r2,10
 738:	44 62 00 c0 	be r3,r2,a38 <_ZN9clase_pwm10pwm_setMovEii+0x37c>
    if (com == 11){ //C
 73c:	34 02 00 0b 	mvi r2,11
 740:	5c 62 00 5a 	bne r3,r2,8a8 <_ZN9clase_pwm10pwm_setMovEii+0x1ec>
pwm -> wr = vwr;
 744:	78 04 00 00 	mvhi r4,0x0
 748:	38 84 0f 0c 	ori r4,r4,0xf0c
 74c:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 750:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 754:	28 42 00 00 	lw r2,(r2+0)
 758:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 75c:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 760:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 764:	38 03 84 80 	mvu r3,0x8480
 768:	78 63 00 1e 	orhi r3,r3,0x1e
 76c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 770:	34 03 00 34 	mvi r3,52
 774:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 778:	38 03 fb d0 	mvu r3,0xfbd0
 77c:	78 63 00 01 	orhi r3,r3,0x1
 780:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 784:	34 03 00 30 	mvi r3,48
 788:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 78c:	58 41 00 10 	sw (r2+16),r1
};
 790:	c3 a0 00 00 	ret
    if (com == 10){  //R servo 0
 794:	34 01 00 0a 	mvi r1,10
 798:	44 61 00 bb 	be r3,r1,a84 <_ZN9clase_pwm10pwm_setMovEii+0x3c8>
    if (com == 11){ //C servo 0
 79c:	34 01 00 0b 	mvi r1,11
 7a0:	5c 61 00 58 	bne r3,r1,900 <_ZN9clase_pwm10pwm_setMovEii+0x244>
pwm -> wr = vwr;
 7a4:	78 04 00 00 	mvhi r4,0x0
 7a8:	38 84 0f 0c 	ori r4,r4,0xf0c
 7ac:	28 81 00 00 	lw r1,(r4+0)
pwm -> addr = vaddr;
 7b0:	34 04 00 08 	mvi r4,8
pwm -> wr = vwr;
 7b4:	28 21 00 00 	lw r1,(r1+0)
 7b8:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 7bc:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 7c0:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 7c4:	38 04 84 80 	mvu r4,0x8480
 7c8:	78 84 00 1e 	orhi r4,r4,0x1e
 7cc:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 7d0:	34 04 00 04 	mvi r4,4
 7d4:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 7d8:	38 04 e8 48 	mvu r4,0xe848
 7dc:	78 84 00 01 	orhi r4,r4,0x1
 7e0:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 7e4:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 7e8:	58 22 00 10 	sw (r1+16),r2
if (b == 4){      //Arm 4 -> Servos 6 (RLC) & 7(DA)
 7ec:	34 01 00 04 	mvi r1,4
 7f0:	5c 41 ff ce 	bne r2,r1,728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    if (com == 10){ //R
 7f4:	34 01 00 0a 	mvi r1,10
 7f8:	44 61 00 6d 	be r3,r1,9ac <_ZN9clase_pwm10pwm_setMovEii+0x2f0>
    if (com == 11){ //C
 7fc:	34 01 00 0b 	mvi r1,11
 800:	5c 61 00 17 	bne r3,r1,85c <_ZN9clase_pwm10pwm_setMovEii+0x1a0>
pwm -> wr = vwr;
 804:	78 02 00 00 	mvhi r2,0x0
 808:	38 42 0f 0c 	ori r2,r2,0xf0c
 80c:	28 41 00 00 	lw r1,(r2+0)
 810:	34 02 00 01 	mvi r2,1
 814:	28 21 00 00 	lw r1,(r1+0)
 818:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 81c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 820:	34 02 00 50 	mvi r2,80
 824:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 828:	38 02 84 80 	mvu r2,0x8480
 82c:	78 42 00 1e 	orhi r2,r2,0x1e
 830:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 834:	34 02 00 4c 	mvi r2,76
 838:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 83c:	38 02 fb d0 	mvu r2,0xfbd0
 840:	78 42 00 01 	orhi r2,r2,0x1
 844:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 848:	34 02 00 48 	mvi r2,72
 84c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 850:	34 02 00 01 	mvi r2,1
 854:	58 22 00 10 	sw (r1+16),r2
};
 858:	c3 a0 00 00 	ret
    if (com == 12){ //L
 85c:	34 01 00 0c 	mvi r1,12
 860:	5c 61 00 9b 	bne r3,r1,acc <_ZN9clase_pwm10pwm_setMovEii+0x410>
pwm -> wr = vwr;
 864:	78 03 00 00 	mvhi r3,0x0
 868:	38 63 0f 0c 	ori r3,r3,0xf0c
 86c:	28 61 00 00 	lw r1,(r3+0)
 870:	34 02 00 01 	mvi r2,1
 874:	28 21 00 00 	lw r1,(r1+0)
 878:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 87c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 880:	34 02 00 50 	mvi r2,80
 884:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 888:	38 02 84 80 	mvu r2,0x8480
 88c:	78 42 00 1e 	orhi r2,r2,0x1e
 890:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 894:	34 02 00 4c 	mvi r2,76
 898:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 89c:	38 02 82 70 	mvu r2,0x8270
 8a0:	78 42 00 03 	orhi r2,r2,0x3
 8a4:	e3 ff ff e8 	bi 844 <_ZN9clase_pwm10pwm_setMovEii+0x188>
    if (com == 12){ //L
 8a8:	34 02 00 0c 	mvi r2,12
 8ac:	5c 62 00 f2 	bne r3,r2,c74 <_ZN9clase_pwm10pwm_setMovEii+0x5b8>
pwm -> wr = vwr;
 8b0:	78 03 00 00 	mvhi r3,0x0
 8b4:	38 63 0f 0c 	ori r3,r3,0xf0c
 8b8:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 8bc:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 8c0:	28 42 00 00 	lw r2,(r2+0)
 8c4:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 8c8:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 8cc:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 8d0:	38 03 84 80 	mvu r3,0x8480
 8d4:	78 63 00 1e 	orhi r3,r3,0x1e
 8d8:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 8dc:	34 03 00 34 	mvi r3,52
 8e0:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 8e4:	38 03 82 70 	mvu r3,0x8270
 8e8:	78 63 00 03 	orhi r3,r3,0x3
 8ec:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 8f0:	34 03 00 30 	mvi r3,48
 8f4:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 8f8:	58 41 00 10 	sw (r2+16),r1
};
 8fc:	c3 a0 00 00 	ret
    if (com == 12){ //L servo 0 
 900:	34 04 00 0c 	mvi r4,12
 904:	5c 64 00 c7 	bne r3,r4,c20 <_ZN9clase_pwm10pwm_setMovEii+0x564>
pwm -> wr = vwr;
 908:	78 04 00 00 	mvhi r4,0x0
 90c:	38 84 0f 0c 	ori r4,r4,0xf0c
 910:	28 81 00 00 	lw r1,(r4+0)
pwm -> addr = vaddr;
 914:	34 04 00 08 	mvi r4,8
pwm -> wr = vwr;
 918:	28 21 00 00 	lw r1,(r1+0)
 91c:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 920:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 924:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 928:	38 04 84 80 	mvu r4,0x8480
 92c:	78 84 00 1e 	orhi r4,r4,0x1e
 930:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 934:	34 04 00 04 	mvi r4,4
 938:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 93c:	38 04 47 d8 	mvu r4,0x47d8
 940:	78 84 00 03 	orhi r4,r4,0x3
 944:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 948:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 94c:	58 22 00 10 	sw (r1+16),r2
 950:	e3 ff ff a7 	bi 7ec <_ZN9clase_pwm10pwm_setMovEii+0x130>
    if (com == 12){ //L
 954:	34 02 00 0c 	mvi r2,12
 958:	5c 62 00 74 	bne r3,r2,b28 <_ZN9clase_pwm10pwm_setMovEii+0x46c>
pwm -> wr = vwr;
 95c:	78 04 00 00 	mvhi r4,0x0
 960:	38 84 0f 0c 	ori r4,r4,0xf0c
 964:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 968:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 96c:	28 42 00 00 	lw r2,(r2+0)
 970:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 974:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 978:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 97c:	38 03 84 80 	mvu r3,0x8480
 980:	78 63 00 1e 	orhi r3,r3,0x1e
 984:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 988:	34 03 00 1c 	mvi r3,28
 98c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 990:	38 03 82 70 	mvu r3,0x8270
 994:	78 63 00 03 	orhi r3,r3,0x3
 998:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 99c:	34 03 00 18 	mvi r3,24
 9a0:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 9a4:	58 41 00 10 	sw (r2+16),r1
};
 9a8:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 9ac:	78 04 00 00 	mvhi r4,0x0
 9b0:	38 84 0f 0c 	ori r4,r4,0xf0c
 9b4:	28 81 00 00 	lw r1,(r4+0)
 9b8:	34 02 00 01 	mvi r2,1
 9bc:	28 21 00 00 	lw r1,(r1+0)
 9c0:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 9c4:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 9c8:	34 02 00 50 	mvi r2,80
 9cc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9d0:	38 02 84 80 	mvu r2,0x8480
 9d4:	78 42 00 1e 	orhi r2,r2,0x1e
 9d8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9dc:	34 02 00 4c 	mvi r2,76
 9e0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9e4:	38 02 c3 50 	mvu r2,0xc350
 9e8:	e3 ff ff 97 	bi 844 <_ZN9clase_pwm10pwm_setMovEii+0x188>
pwm -> wr = vwr;
 9ec:	78 04 00 00 	mvhi r4,0x0
 9f0:	38 84 0f 0c 	ori r4,r4,0xf0c
 9f4:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 9f8:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 9fc:	28 42 00 00 	lw r2,(r2+0)
 a00:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 a04:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 a08:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a0c:	38 03 84 80 	mvu r3,0x8480
 a10:	78 63 00 1e 	orhi r3,r3,0x1e
 a14:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a18:	34 03 00 1c 	mvi r3,28
 a1c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a20:	38 03 c3 50 	mvu r3,0xc350
 a24:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a28:	34 03 00 18 	mvi r3,24
 a2c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a30:	58 41 00 10 	sw (r2+16),r1
};
 a34:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 a38:	78 03 00 00 	mvhi r3,0x0
 a3c:	38 63 0f 0c 	ori r3,r3,0xf0c
 a40:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 a44:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 a48:	28 42 00 00 	lw r2,(r2+0)
 a4c:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 a50:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 a54:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a58:	38 03 84 80 	mvu r3,0x8480
 a5c:	78 63 00 1e 	orhi r3,r3,0x1e
 a60:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a64:	34 03 00 34 	mvi r3,52
 a68:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a6c:	38 03 c3 50 	mvu r3,0xc350
 a70:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a74:	34 03 00 30 	mvi r3,48
 a78:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a7c:	58 41 00 10 	sw (r2+16),r1
};
 a80:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 a84:	78 03 00 00 	mvhi r3,0x0
 a88:	38 63 0f 0c 	ori r3,r3,0xf0c
 a8c:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 a90:	34 03 00 08 	mvi r3,8
pwm -> wr = vwr;
 a94:	28 21 00 00 	lw r1,(r1+0)
 a98:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 a9c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 aa0:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 aa4:	38 03 84 80 	mvu r3,0x8480
 aa8:	78 63 00 1e 	orhi r3,r3,0x1e
 aac:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 ab0:	34 03 00 04 	mvi r3,4
 ab4:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 ab8:	38 03 c3 50 	mvu r3,0xc350
 abc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 ac0:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 ac4:	58 22 00 10 	sw (r1+16),r2
};
 ac8:	c3 a0 00 00 	ret
    if (com == 13){ //D
 acc:	34 01 00 0d 	mvi r1,13
 ad0:	5c 61 00 2b 	bne r3,r1,b7c <_ZN9clase_pwm10pwm_setMovEii+0x4c0>
pwm -> wr = vwr;
 ad4:	78 04 00 00 	mvhi r4,0x0
 ad8:	38 84 0f 0c 	ori r4,r4,0xf0c
 adc:	28 81 00 00 	lw r1,(r4+0)
 ae0:	34 02 00 01 	mvi r2,1
 ae4:	28 21 00 00 	lw r1,(r1+0)
 ae8:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 aec:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 af0:	34 02 00 5c 	mvi r2,92
 af4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 af8:	38 02 84 80 	mvu r2,0x8480
 afc:	78 42 00 1e 	orhi r2,r2,0x1e
 b00:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b04:	34 02 00 58 	mvi r2,88
 b08:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b0c:	38 02 c3 50 	mvu r2,0xc350
 b10:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b14:	34 02 00 54 	mvi r2,84
 b18:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b1c:	34 02 00 01 	mvi r2,1
 b20:	58 22 00 10 	sw (r1+16),r2
};
 b24:	e3 ff ff 01 	bi 728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    if (com == 13){ //D
 b28:	34 02 00 0d 	mvi r2,13
 b2c:	5c 62 00 27 	bne r3,r2,bc8 <_ZN9clase_pwm10pwm_setMovEii+0x50c>
pwm -> wr = vwr;
 b30:	78 03 00 00 	mvhi r3,0x0
 b34:	38 63 0f 0c 	ori r3,r3,0xf0c
 b38:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 b3c:	34 03 00 2c 	mvi r3,44
pwm -> wr = vwr;
 b40:	28 42 00 00 	lw r2,(r2+0)
 b44:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 b48:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 b4c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b50:	38 03 84 80 	mvu r3,0x8480
 b54:	78 63 00 1e 	orhi r3,r3,0x1e
 b58:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 b5c:	34 03 00 28 	mvi r3,40
 b60:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b64:	38 03 c3 50 	mvu r3,0xc350
 b68:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 b6c:	34 03 00 24 	mvi r3,36
 b70:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b74:	58 41 00 10 	sw (r2+16),r1
 b78:	e3 ff fe ec 	bi 728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    if (com == 14){ //A
 b7c:	34 01 00 0e 	mvi r1,14
 b80:	5c 61 fe ea 	bne r3,r1,728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
pwm -> wr = vwr;
 b84:	78 02 00 00 	mvhi r2,0x0
 b88:	38 42 0f 0c 	ori r2,r2,0xf0c
 b8c:	28 41 00 00 	lw r1,(r2+0)
 b90:	34 02 00 01 	mvi r2,1
 b94:	28 21 00 00 	lw r1,(r1+0)
 b98:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 b9c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 ba0:	34 02 00 5c 	mvi r2,92
 ba4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ba8:	38 02 84 80 	mvu r2,0x8480
 bac:	78 42 00 1e 	orhi r2,r2,0x1e
 bb0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bb4:	34 02 00 58 	mvi r2,88
 bb8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bbc:	38 02 82 70 	mvu r2,0x8270
 bc0:	78 42 00 03 	orhi r2,r2,0x3
 bc4:	e3 ff ff d3 	bi b10 <_ZN9clase_pwm10pwm_setMovEii+0x454>
    if (com == 14){ //A
 bc8:	34 02 00 0e 	mvi r2,14
 bcc:	5c 62 fe d7 	bne r3,r2,728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
pwm -> wr = vwr;
 bd0:	78 04 00 00 	mvhi r4,0x0
 bd4:	38 84 0f 0c 	ori r4,r4,0xf0c
 bd8:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 bdc:	34 03 00 2c 	mvi r3,44
pwm -> wr = vwr;
 be0:	28 42 00 00 	lw r2,(r2+0)
 be4:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 be8:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 bec:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 bf0:	38 03 84 80 	mvu r3,0x8480
 bf4:	78 63 00 1e 	orhi r3,r3,0x1e
 bf8:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 bfc:	34 03 00 28 	mvi r3,40
 c00:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c04:	38 03 82 70 	mvu r3,0x8270
 c08:	78 63 00 03 	orhi r3,r3,0x3
 c0c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 c10:	34 03 00 24 	mvi r3,36
 c14:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c18:	58 41 00 10 	sw (r2+16),r1
 c1c:	e3 ff fe c3 	bi 728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    if (com == 13){ //D servo1
 c20:	34 01 00 0d 	mvi r1,13
 c24:	5c 61 00 29 	bne r3,r1,cc8 <_ZN9clase_pwm10pwm_setMovEii+0x60c>
pwm -> wr = vwr;
 c28:	78 03 00 00 	mvhi r3,0x0
 c2c:	38 63 0f 0c 	ori r3,r3,0xf0c
 c30:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 c34:	34 03 00 14 	mvi r3,20
pwm -> wr = vwr;
 c38:	28 21 00 00 	lw r1,(r1+0)
 c3c:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 c40:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 c44:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c48:	38 03 84 80 	mvu r3,0x8480
 c4c:	78 63 00 1e 	orhi r3,r3,0x1e
 c50:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 c54:	34 03 00 10 	mvi r3,16
 c58:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c5c:	38 03 bf 20 	mvu r3,0xbf20
 c60:	78 63 00 02 	orhi r3,r3,0x2
 c64:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 c68:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 c6c:	58 22 00 10 	sw (r1+16),r2
 c70:	e3 ff fe ae 	bi 728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    if (com == 13){ //D
 c74:	34 02 00 0d 	mvi r2,13
 c78:	5c 62 00 29 	bne r3,r2,d1c <_ZN9clase_pwm10pwm_setMovEii+0x660>
pwm -> wr = vwr;
 c7c:	78 04 00 00 	mvhi r4,0x0
 c80:	38 84 0f 0c 	ori r4,r4,0xf0c
 c84:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 c88:	34 03 00 44 	mvi r3,68
pwm -> wr = vwr;
 c8c:	28 42 00 00 	lw r2,(r2+0)
 c90:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 c94:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 c98:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c9c:	38 03 84 80 	mvu r3,0x8480
 ca0:	78 63 00 1e 	orhi r3,r3,0x1e
 ca4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 ca8:	34 03 00 40 	mvi r3,64
 cac:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 cb0:	38 03 c3 50 	mvu r3,0xc350
 cb4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 cb8:	34 03 00 3c 	mvi r3,60
 cbc:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 cc0:	58 41 00 10 	sw (r2+16),r1
 cc4:	e3 ff fe 99 	bi 728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    if (com == 14){ //A servo 1
 cc8:	34 01 00 0e 	mvi r1,14
 ccc:	5c 61 fe 97 	bne r3,r1,728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
pwm -> wr = vwr;
 cd0:	78 03 00 00 	mvhi r3,0x0
 cd4:	38 63 0f 0c 	ori r3,r3,0xf0c
 cd8:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 cdc:	34 03 00 14 	mvi r3,20
pwm -> wr = vwr;
 ce0:	28 21 00 00 	lw r1,(r1+0)
 ce4:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 ce8:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 cec:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 cf0:	38 03 84 80 	mvu r3,0x8480
 cf4:	78 63 00 1e 	orhi r3,r3,0x1e
 cf8:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 cfc:	34 03 00 10 	mvi r3,16
 d00:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 d04:	38 03 86 a0 	mvu r3,0x86a0
 d08:	78 63 00 01 	orhi r3,r3,0x1
 d0c:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 d10:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 d14:	58 22 00 10 	sw (r1+16),r2
 d18:	e3 ff fe 84 	bi 728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    if (com == 14){ //A
 d1c:	34 02 00 0e 	mvi r2,14
 d20:	5c 62 fe 82 	bne r3,r2,728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
pwm -> wr = vwr;
 d24:	78 03 00 00 	mvhi r3,0x0
 d28:	38 63 0f 0c 	ori r3,r3,0xf0c
 d2c:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 d30:	34 03 00 44 	mvi r3,68
pwm -> wr = vwr;
 d34:	28 42 00 00 	lw r2,(r2+0)
 d38:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 d3c:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 d40:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 d44:	38 03 84 80 	mvu r3,0x8480
 d48:	78 63 00 1e 	orhi r3,r3,0x1e
 d4c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 d50:	34 03 00 40 	mvi r3,64
 d54:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 d58:	38 03 82 70 	mvu r3,0x8270
 d5c:	78 63 00 03 	orhi r3,r3,0x3
 d60:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 d64:	34 03 00 3c 	mvi r3,60
 d68:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 d6c:	58 41 00 10 	sw (r2+16),r1
 d70:	e3 ff fe 6e 	bi 728 <_ZN9clase_pwm10pwm_setMovEii+0x6c>

00000d74 <_ZN9clase_pwm8pwm_readEv>:
	return pwm -> d_out;
 d74:	78 02 00 00 	mvhi r2,0x0
 d78:	38 42 0f 10 	ori r2,r2,0xf10
 d7c:	28 41 00 00 	lw r1,(r2+0)
 d80:	28 21 00 00 	lw r1,(r1+0)
 d84:	28 21 00 00 	lw r1,(r1+0)
}
 d88:	c3 a0 00 00 	ret

00000d8c <_ZN9clase_pwm6pwm_rdEh>:
pwm -> rd = vrd;
 d8c:	78 03 00 00 	mvhi r3,0x0
 d90:	38 63 0f 14 	ori r3,r3,0xf14
 d94:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_rd(uint8_t vrd){
 d98:	20 42 00 ff 	andi r2,r2,0xff
pwm -> rd = vrd;
 d9c:	28 21 00 00 	lw r1,(r1+0)
 da0:	30 22 00 04 	sb (r1+4),r2
}
 da4:	c3 a0 00 00 	ret

00000da8 <_ZN9clase_pwm8pwm_addrEj>:
pwm -> addr = vaddr;
 da8:	78 03 00 00 	mvhi r3,0x0
 dac:	38 63 0f 18 	ori r3,r3,0xf18
 db0:	28 61 00 00 	lw r1,(r3+0)
 db4:	28 21 00 00 	lw r1,(r1+0)
 db8:	58 22 00 08 	sw (r1+8),r2
}
 dbc:	c3 a0 00 00 	ret

00000dc0 <_ZN9clase_pwm6pwm_wrEh>:
pwm -> wr = vwr;
 dc0:	78 03 00 00 	mvhi r3,0x0
 dc4:	38 63 0f 1c 	ori r3,r3,0xf1c
 dc8:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_wr(uint8_t vwr){
 dcc:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 dd0:	28 21 00 00 	lw r1,(r1+0)
 dd4:	30 22 00 0c 	sb (r1+12),r2
}
 dd8:	c3 a0 00 00 	ret

00000ddc <_ZN9clase_pwm7pwm_dinEj>:
pwm -> d_in = vd_in;
 ddc:	78 03 00 00 	mvhi r3,0x0
 de0:	38 63 0f 20 	ori r3,r3,0xf20
 de4:	28 61 00 00 	lw r1,(r3+0)
 de8:	28 21 00 00 	lw r1,(r1+0)
 dec:	58 22 00 10 	sw (r1+16),r2
}
 df0:	c3 a0 00 00 	ret

00000df4 <_ZN11clase_timer6nsleepEi>:
void clase_timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 df4:	78 03 00 00 	mvhi r3,0x0
 df8:	38 63 0f 24 	ori r3,r3,0xf24
 dfc:	28 61 00 00 	lw r1,(r3+0)
 e00:	08 42 00 64 	muli r2,r2,100
 e04:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 e08:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 e0c:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 e10:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 e14:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 e18:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 e1c:	20 21 00 01 	andi r1,r1,0x1
 e20:	44 20 ff fe 	be r1,r0,e18 <_ZN11clase_timer6nsleepEi+0x24>
};
 e24:	c3 a0 00 00 	ret

00000e28 <_ZN10clase_uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 e28:	c3 a0 00 00 	ret

00000e2c <_ZN10clase_uart12uart_getcharEv>:

char clase_uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 e2c:	78 02 00 00 	mvhi r2,0x0
 e30:	38 42 0f 28 	ori r2,r2,0xf28
 e34:	28 41 00 00 	lw r1,(r2+0)
 e38:	28 22 00 00 	lw r2,(r1+0)
 e3c:	28 41 00 00 	lw r1,(r2+0)
 e40:	20 21 00 01 	andi r1,r1,0x1
 e44:	44 20 ff fe 	be r1,r0,e3c <_ZN10clase_uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 e48:	28 41 00 04 	lw r1,(r2+4)
}
 e4c:	20 21 00 ff 	andi r1,r1,0xff
 e50:	c3 a0 00 00 	ret

00000e54 <_ZN10clase_uart12uart_putcharEc>:

void clase_uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 e54:	78 03 00 00 	mvhi r3,0x0
 e58:	38 63 0f 2c 	ori r3,r3,0xf2c
 e5c:	28 61 00 00 	lw r1,(r3+0)
{
 e60:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 e64:	28 23 00 00 	lw r3,(r1+0)
 e68:	28 61 00 00 	lw r1,(r3+0)
 e6c:	20 21 00 10 	andi r1,r1,0x10
 e70:	5c 20 ff fe 	bne r1,r0,e68 <_ZN10clase_uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 e74:	58 62 00 04 	sw (r3+4),r2
}
 e78:	c3 a0 00 00 	ret

00000e7c <_ZN10clase_uart11uart_putstrEPc>:

void clase_uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 e7c:	40 44 00 00 	lbu r4,(r2+0)
 e80:	44 80 00 0c 	be r4,r0,eb0 <_ZN10clase_uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 e84:	78 03 00 00 	mvhi r3,0x0
 e88:	38 63 0f 30 	ori r3,r3,0xf30
 e8c:	28 61 00 00 	lw r1,(r3+0)
 e90:	28 23 00 00 	lw r3,(r1+0)
 e94:	28 61 00 00 	lw r1,(r3+0)
 e98:	20 21 00 10 	andi r1,r1,0x10
 e9c:	5c 20 ff fe 	bne r1,r0,e94 <_ZN10clase_uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 ea0:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 ea4:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 ea8:	40 44 00 00 	lbu r4,(r2+0)
 eac:	5c 80 ff fa 	bne r4,r0,e94 <_ZN10clase_uart11uart_putstrEPc+0x18>
	}
}
 eb0:	c3 a0 00 00 	ret
