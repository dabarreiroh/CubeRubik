
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000074  00000cd8  00000cd8  00000d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000d4c  00000d4c  00000da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000d64  00000d64  00000db8  2**2
                  ALLOC
  4 .debug_frame  00000214  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028f8  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000722  00000000  00000000  000038c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000080  00000000  00000000  00003fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000310  00000000  00000000  00004066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d42  00000000  00000000  00004376  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045b  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00005513  2**0
                  CONTENTS, READONLY
 12 .debug_loc    00002036  00000000  00000000  00005524  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 8e 	calli 304 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0d 70 	ori gp,gp,0xd70
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0d 64 	ori r1,r1,0xd64
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0d e8 	ori r3,r3,0xde8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "clase_pwm.h"
//#include "soc-hw.h"
#include "clase_timer.h"


int main(){
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 9d 00 04 	sw (sp+4),ra

    clase_pwm arm;
    clase_timer tim;
    arm.pwm_setMov(1,13);
 210:	34 03 00 0d 	mvi r3,13
 214:	37 81 00 0c 	addi r1,sp,12
 218:	34 02 00 01 	mvi r2,1
 21c:	f8 00 00 ec 	calli 5cc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(20);
 220:	37 81 00 08 	addi r1,sp,8
 224:	34 02 00 14 	mvi r2,20
 228:	f8 00 02 9f 	calli ca4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,14);
 22c:	34 03 00 0e 	mvi r3,14
 230:	37 81 00 0c 	addi r1,sp,12
 234:	34 02 00 01 	mvi r2,1
 238:	f8 00 00 e5 	calli 5cc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(20);
 23c:	37 81 00 08 	addi r1,sp,8
 240:	34 02 00 14 	mvi r2,20
 244:	f8 00 02 98 	calli ca4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,10);
 248:	34 03 00 0a 	mvi r3,10
 24c:	37 81 00 0c 	addi r1,sp,12
 250:	34 02 00 01 	mvi r2,1
 254:	f8 00 00 de 	calli 5cc <_ZN9clase_pwm10pwm_setMovEii>
    tim.nsleep(20);
 258:	37 81 00 08 	addi r1,sp,8
 25c:	34 02 00 14 	mvi r2,20
 260:	f8 00 02 91 	calli ca4 <_ZN11clase_timer6nsleepEi>
    arm.pwm_setMov(1,12);
 264:	37 81 00 0c 	addi r1,sp,12
 268:	34 03 00 0c 	mvi r3,12
 26c:	34 02 00 01 	mvi r2,1
 270:	f8 00 00 d7 	calli 5cc <_ZN9clase_pwm10pwm_setMovEii>

}
 274:	34 01 00 00 	mvi r1,0
 278:	2b 9d 00 04 	lw ra,(sp+4)
 27c:	37 9c 00 10 	addi sp,sp,16
 280:	c3 a0 00 00 	ret

00000284 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 284:	78 01 00 00 	mvhi r1,0x0
 288:	38 21 0c d8 	ori r1,r1,0xcd8
 28c:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 290:	78 04 00 00 	mvhi r4,0x0
 294:	38 84 0c dc 	ori r4,r4,0xcdc
 298:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 29c:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2a0:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 2a4:	34 21 00 01 	addi r1,r1,1
 2a8:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2ac:	34 01 00 0e 	mvi r1,14
 2b0:	58 61 00 00 	sw (r3+0),r1
}
 2b4:	c3 a0 00 00 	ret

000002b8 <isr_null>:
 2b8:	c3 a0 00 00 	ret

000002bc <gpio_config_dir>:
	gpio0 -> dir = vdir;
 2bc:	78 03 00 00 	mvhi r3,0x0
 2c0:	38 63 0c e0 	ori r3,r3,0xce0
 2c4:	28 62 00 00 	lw r2,(r3+0)
 2c8:	28 42 00 00 	lw r2,(r2+0)
 2cc:	58 41 00 08 	sw (r2+8),r1
}
 2d0:	c3 a0 00 00 	ret

000002d4 <gpio_write>:
	gpio0 -> wr = vpins;
 2d4:	78 03 00 00 	mvhi r3,0x0
 2d8:	38 63 0c e4 	ori r3,r3,0xce4
 2dc:	28 62 00 00 	lw r2,(r3+0)
 2e0:	28 42 00 00 	lw r2,(r2+0)
 2e4:	58 41 00 04 	sw (r2+4),r1
}
 2e8:	c3 a0 00 00 	ret

000002ec <gpio_read>:
	return gpio0 -> rd;
 2ec:	78 02 00 00 	mvhi r2,0x0
 2f0:	38 42 0c e8 	ori r2,r2,0xce8
 2f4:	28 41 00 00 	lw r1,(r2+0)
 2f8:	28 21 00 00 	lw r1,(r1+0)
 2fc:	28 21 00 00 	lw r1,(r1+0)
}
 300:	c3 a0 00 00 	ret

00000304 <irq_handler>:
{
 304:	37 9c ff f0 	addi sp,sp,-16
 308:	5b 8b 00 10 	sw (sp+16),r11
 30c:	5b 8c 00 0c 	sw (sp+12),r12
 310:	5b 8d 00 08 	sw (sp+8),r13
 314:	5b 9d 00 04 	sw (sp+4),ra
 318:	78 02 00 00 	mvhi r2,0x0
 31c:	38 42 0c ec 	ori r2,r2,0xcec
 320:	28 4b 00 00 	lw r11,(r2+0)
 324:	b8 20 60 00 	mv r12,r1
 328:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 32c:	21 81 00 01 	andi r1,r12,0x1
 330:	44 20 00 03 	be r1,r0,33c <irq_handler+0x38>
 334:	29 61 00 00 	lw r1,(r11+0)
 338:	d8 20 00 00 	call r1
 33c:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 340:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 344:	5d ab ff fa 	bne r13,r11,32c <irq_handler+0x28>
}
 348:	2b 9d 00 04 	lw ra,(sp+4)
 34c:	2b 8b 00 10 	lw r11,(sp+16)
 350:	2b 8c 00 0c 	lw r12,(sp+12)
 354:	2b 8d 00 08 	lw r13,(sp+8)
 358:	37 9c 00 10 	addi sp,sp,16
 35c:	c3 a0 00 00 	ret

00000360 <isr_init>:
{
 360:	78 02 00 00 	mvhi r2,0x0
 364:	38 42 0c f0 	ori r2,r2,0xcf0
 368:	28 41 00 00 	lw r1,(r2+0)
 36c:	78 02 00 00 	mvhi r2,0x0
 370:	38 42 0c f4 	ori r2,r2,0xcf4
 374:	28 43 00 00 	lw r3,(r2+0)
 378:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 37c:	58 23 00 00 	sw (r1+0),r3
 380:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 384:	5c 22 ff fe 	bne r1,r2,37c <isr_init+0x1c>
}
 388:	c3 a0 00 00 	ret

0000038c <isr_register>:
	isr_table[irq] = isr;
 38c:	78 04 00 00 	mvhi r4,0x0
 390:	38 84 0c f8 	ori r4,r4,0xcf8
 394:	3c 23 00 02 	sli r3,r1,2
 398:	28 81 00 00 	lw r1,(r4+0)
 39c:	b4 23 08 00 	add r1,r1,r3
 3a0:	58 22 00 00 	sw (r1+0),r2
}
 3a4:	c3 a0 00 00 	ret

000003a8 <isr_unregister>:
	isr_table[irq] = &isr_null;
 3a8:	78 03 00 00 	mvhi r3,0x0
 3ac:	38 63 0c fc 	ori r3,r3,0xcfc
 3b0:	3c 22 00 02 	sli r2,r1,2
 3b4:	28 61 00 00 	lw r1,(r3+0)
 3b8:	78 03 00 00 	mvhi r3,0x0
 3bc:	38 63 0d 00 	ori r3,r3,0xd00
 3c0:	b4 22 08 00 	add r1,r1,r2
 3c4:	28 62 00 00 	lw r2,(r3+0)
 3c8:	58 22 00 00 	sw (r1+0),r2
}
 3cc:	c3 a0 00 00 	ret

000003d0 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 3d0:	78 03 00 00 	mvhi r3,0x0
 3d4:	38 02 86 a0 	mvu r2,0x86a0
 3d8:	78 42 00 01 	orhi r2,r2,0x1
 3dc:	38 63 0d 04 	ori r3,r3,0xd04
 3e0:	88 22 08 00 	mul r1,r1,r2
 3e4:	28 62 00 00 	lw r2,(r3+0)
 3e8:	28 42 00 00 	lw r2,(r2+0)
 3ec:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3f0:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3f4:	34 01 00 08 	mvi r1,8
 3f8:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 3fc:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 400:	20 21 00 01 	andi r1,r1,0x1
 404:	44 20 ff fe 	be r1,r0,3fc <msleep+0x2c>
}
 408:	c3 a0 00 00 	ret

0000040c <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 40c:	78 03 00 00 	mvhi r3,0x0
 410:	38 63 0d 08 	ori r3,r3,0xd08
 414:	28 62 00 00 	lw r2,(r3+0)
 418:	08 21 00 64 	muli r1,r1,100
 41c:	28 42 00 00 	lw r2,(r2+0)
 420:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 424:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 428:	34 01 00 08 	mvi r1,8
 42c:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 430:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 434:	20 21 00 01 	andi r1,r1,0x1
 438:	44 20 ff fe 	be r1,r0,430 <nsleep+0x24>
}
 43c:	c3 a0 00 00 	ret

00000440 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 440:	78 02 00 00 	mvhi r2,0x0
 444:	38 42 0d 0c 	ori r2,r2,0xd0c
 448:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 44c:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 450:	34 02 27 10 	mvi r2,10000
 454:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 458:	38 63 0d 10 	ori r3,r3,0xd10
	timer0->compare0 = (FCPU/10000);
 45c:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 460:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 464:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 468:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 46c:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 470:	34 02 00 0e 	mvi r2,14
 474:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 478:	78 02 00 00 	mvhi r2,0x0
 47c:	38 42 0d 14 	ori r2,r2,0xd14
 480:	38 63 0d 18 	ori r3,r3,0xd18
 484:	28 41 00 00 	lw r1,(r2+0)
 488:	28 62 00 00 	lw r2,(r3+0)
 48c:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 490:	c3 a0 00 00 	ret

00000494 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 494:	c3 a0 00 00 	ret

00000498 <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 498:	78 02 00 00 	mvhi r2,0x0
 49c:	38 42 0d 1c 	ori r2,r2,0xd1c
 4a0:	28 41 00 00 	lw r1,(r2+0)
 4a4:	28 22 00 00 	lw r2,(r1+0)
 4a8:	28 41 00 00 	lw r1,(r2+0)
 4ac:	20 21 00 01 	andi r1,r1,0x1
 4b0:	44 20 ff fe 	be r1,r0,4a8 <uart_getchar+0x10>
	return uart0->rxtx;
 4b4:	28 41 00 04 	lw r1,(r2+4)
}
 4b8:	20 21 00 ff 	andi r1,r1,0xff
 4bc:	c3 a0 00 00 	ret

000004c0 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4c0:	78 03 00 00 	mvhi r3,0x0
 4c4:	38 63 0d 20 	ori r3,r3,0xd20
 4c8:	28 62 00 00 	lw r2,(r3+0)
{
 4cc:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4d0:	28 43 00 00 	lw r3,(r2+0)
 4d4:	28 62 00 00 	lw r2,(r3+0)
 4d8:	20 42 00 10 	andi r2,r2,0x10
 4dc:	5c 40 ff fe 	bne r2,r0,4d4 <uart_putchar+0x14>
	uart0->rxtx = c;
 4e0:	58 61 00 04 	sw (r3+4),r1
}
 4e4:	c3 a0 00 00 	ret

000004e8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4e8:	40 24 00 00 	lbu r4,(r1+0)
 4ec:	44 80 00 0c 	be r4,r0,51c <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 4f0:	78 03 00 00 	mvhi r3,0x0
 4f4:	38 63 0d 24 	ori r3,r3,0xd24
 4f8:	28 62 00 00 	lw r2,(r3+0)
 4fc:	28 43 00 00 	lw r3,(r2+0)
 500:	28 62 00 00 	lw r2,(r3+0)
 504:	20 42 00 10 	andi r2,r2,0x10
 508:	5c 40 ff fe 	bne r2,r0,500 <uart_putstr+0x18>
	uart0->rxtx = c;
 50c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 510:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 514:	40 24 00 00 	lbu r4,(r1+0)
 518:	5c 80 ff fa 	bne r4,r0,500 <uart_putstr+0x18>
	}
}
 51c:	c3 a0 00 00 	ret

00000520 <i2c_init>:
 * I2C Functions
*/
void i2c_init()
{

	i2c0->prerl =0x00;
 520:	78 02 00 00 	mvhi r2,0x0
 524:	38 42 0d 28 	ori r2,r2,0xd28
 528:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 52c:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 530:	28 21 00 00 	lw r1,(r1+0)
 534:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 538:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 53c:	34 02 ff 80 	mvi r2,-128
 540:	30 22 00 02 	sb (r1+2),r2


}
 544:	c3 a0 00 00 	ret

00000548 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 548:	78 05 00 00 	mvhi r5,0x0
 54c:	38 a5 0d 2c 	ori r5,r5,0xd2c
 550:	28 a4 00 00 	lw r4,(r5+0)
 554:	3c 21 00 02 	sli r1,r1,2
{
 558:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 55c:	28 84 00 00 	lw r4,(r4+0)
 560:	20 21 00 fc 	andi r1,r1,0xfc
{
 564:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 568:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 56c:	34 01 ff 90 	mvi r1,-112
 570:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 574:	40 81 00 04 	lbu r1,(r4+4)
 578:	20 21 00 02 	andi r1,r1,0x2
 57c:	5c 20 ff fe 	bne r1,r0,574 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 580:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 584:	34 01 00 10 	mvi r1,16
 588:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 58c:	40 81 00 04 	lbu r1,(r4+4)
 590:	20 21 00 02 	andi r1,r1,0x2
 594:	5c 20 ff fe 	bne r1,r0,58c <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 598:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 59c:	34 01 00 10 	mvi r1,16
 5a0:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 5a4:	40 81 00 04 	lbu r1,(r4+4)
 5a8:	20 21 00 02 	andi r1,r1,0x2
 5ac:	5c 20 ff fe 	bne r1,r0,5a4 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 5b0:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 5b4:	34 01 00 50 	mvi r1,80
 5b8:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 5bc:	40 81 00 04 	lbu r1,(r4+4)
 5c0:	20 21 00 02 	andi r1,r1,0x2
 5c4:	5c 20 ff fe 	bne r1,r0,5bc <i2c_write+0x74>
//7

}
 5c8:	c3 a0 00 00 	ret

000005cc <_ZN9clase_pwm10pwm_setMovEii>:
uint32_t ae7=84;    uint32_t ad7=88;    uint32_t at7=92;

//Arm Selection


if (b == 1){      //Arm 1 -> Servos 0 (RLC) & 1(DA)
 5cc:	34 01 00 01 	mvi r1,1
 5d0:	44 41 00 33 	be r2,r1,69c <_ZN9clase_pwm10pwm_setMovEii+0xd0>

}



if (b == 2){      //Arm 2 -> Servos 2 (RLC) & 3(DA)
 5d4:	34 04 00 02 	mvi r4,2
 5d8:	5c 44 00 18 	bne r2,r4,638 <_ZN9clase_pwm10pwm_setMovEii+0x6c>
    
    if (com == 10){ //R
 5dc:	34 02 00 0a 	mvi r2,10
 5e0:	44 62 00 bc 	be r3,r2,8d0 <_ZN9clase_pwm10pwm_setMovEii+0x304>
        pwm_din(dind);
        pwm_addr(ae2);
        pwm_din(on);
    }

    if (com == 11){ //C
 5e4:	34 02 00 0b 	mvi r2,11
 5e8:	5c 62 00 96 	bne r3,r2,840 <_ZN9clase_pwm10pwm_setMovEii+0x274>
}
void clase_pwm:: pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
}
void clase_pwm:: pwm_wr(uint8_t vwr){
pwm -> wr = vwr;
 5ec:	78 03 00 00 	mvhi r3,0x0
 5f0:	38 63 0d 30 	ori r3,r3,0xd30
 5f4:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 5f8:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 5fc:	28 42 00 00 	lw r2,(r2+0)
 600:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 604:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 608:	58 43 00 08 	sw (r2+8),r3
}
void clase_pwm:: pwm_din(uint32_t vd_in){
pwm -> d_in = vd_in;
 60c:	34 03 07 d0 	mvi r3,2000
 610:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 614:	34 03 00 1c 	mvi r3,28
 618:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 61c:	38 03 fb d0 	mvu r3,0xfbd0
 620:	78 63 00 01 	orhi r3,r3,0x1
 624:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 628:	34 03 00 18 	mvi r3,24
 62c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 630:	58 41 00 10 	sw (r2+16),r1
};
 634:	c3 a0 00 00 	ret
if (b == 3){      //Arm 3 -> Servos 4 (RLC) & 5(DA)
 638:	34 04 00 03 	mvi r4,3
 63c:	5c 44 00 2c 	bne r2,r4,6ec <_ZN9clase_pwm10pwm_setMovEii+0x120>
    if (com == 10){ //R
 640:	34 02 00 0a 	mvi r2,10
 644:	44 62 00 b5 	be r3,r2,918 <_ZN9clase_pwm10pwm_setMovEii+0x34c>
    if (com == 11){ //C
 648:	34 02 00 0b 	mvi r2,11
 64c:	5c 62 00 55 	bne r3,r2,7a0 <_ZN9clase_pwm10pwm_setMovEii+0x1d4>
pwm -> wr = vwr;
 650:	78 04 00 00 	mvhi r4,0x0
 654:	38 84 0d 30 	ori r4,r4,0xd30
 658:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 65c:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 660:	28 42 00 00 	lw r2,(r2+0)
 664:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 668:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 66c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 670:	34 03 07 d0 	mvi r3,2000
 674:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 678:	34 03 00 34 	mvi r3,52
 67c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 680:	38 03 fb d0 	mvu r3,0xfbd0
 684:	78 63 00 01 	orhi r3,r3,0x1
 688:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 68c:	34 03 00 30 	mvi r3,48
 690:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 694:	58 41 00 10 	sw (r2+16),r1
};
 698:	c3 a0 00 00 	ret
    if (com == 10){  //R servo 0
 69c:	34 01 00 0a 	mvi r1,10
 6a0:	44 61 00 b0 	be r3,r1,960 <_ZN9clase_pwm10pwm_setMovEii+0x394>
    if (com == 11){ //C servo 0
 6a4:	34 01 00 0b 	mvi r1,11
 6a8:	5c 61 00 53 	bne r3,r1,7f4 <_ZN9clase_pwm10pwm_setMovEii+0x228>
pwm -> wr = vwr;
 6ac:	78 04 00 00 	mvhi r4,0x0
 6b0:	38 84 0d 30 	ori r4,r4,0xd30
 6b4:	28 81 00 00 	lw r1,(r4+0)
pwm -> addr = vaddr;
 6b8:	34 04 00 08 	mvi r4,8
pwm -> wr = vwr;
 6bc:	28 21 00 00 	lw r1,(r1+0)
 6c0:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 6c4:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 6c8:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 6cc:	34 04 07 d0 	mvi r4,2000
 6d0:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 6d4:	34 04 00 04 	mvi r4,4
 6d8:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 6dc:	34 04 00 82 	mvi r4,130
 6e0:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 6e4:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 6e8:	58 22 00 10 	sw (r1+16),r2
if (b == 4){      //Arm 4 -> Servos 6 (RLC) & 7(DA)
 6ec:	34 01 00 04 	mvi r1,4
 6f0:	5c 41 ff d1 	bne r2,r1,634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
    if (com == 10){ //R
 6f4:	34 01 00 0a 	mvi r1,10
 6f8:	44 61 00 67 	be r3,r1,894 <_ZN9clase_pwm10pwm_setMovEii+0x2c8>
    if (com == 11){ //C
 6fc:	34 01 00 0b 	mvi r1,11
 700:	5c 61 00 16 	bne r3,r1,758 <_ZN9clase_pwm10pwm_setMovEii+0x18c>
pwm -> wr = vwr;
 704:	78 02 00 00 	mvhi r2,0x0
 708:	38 42 0d 30 	ori r2,r2,0xd30
 70c:	28 41 00 00 	lw r1,(r2+0)
 710:	34 02 00 01 	mvi r2,1
 714:	28 21 00 00 	lw r1,(r1+0)
 718:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 71c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 720:	34 02 00 50 	mvi r2,80
 724:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 728:	34 02 07 d0 	mvi r2,2000
 72c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 730:	34 02 00 4c 	mvi r2,76
 734:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 738:	38 02 fb d0 	mvu r2,0xfbd0
 73c:	78 42 00 01 	orhi r2,r2,0x1
 740:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 744:	34 02 00 48 	mvi r2,72
 748:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 74c:	34 02 00 01 	mvi r2,1
 750:	58 22 00 10 	sw (r1+16),r2
};
 754:	c3 a0 00 00 	ret
    if (com == 12){ //L
 758:	34 01 00 0c 	mvi r1,12
 75c:	5c 61 00 92 	bne r3,r1,9a4 <_ZN9clase_pwm10pwm_setMovEii+0x3d8>
pwm -> wr = vwr;
 760:	78 03 00 00 	mvhi r3,0x0
 764:	38 63 0d 30 	ori r3,r3,0xd30
 768:	28 61 00 00 	lw r1,(r3+0)
 76c:	34 02 00 01 	mvi r2,1
 770:	28 21 00 00 	lw r1,(r1+0)
 774:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 778:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 77c:	34 02 00 50 	mvi r2,80
 780:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 784:	34 02 07 d0 	mvi r2,2000
 788:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 78c:	34 02 00 4c 	mvi r2,76
 790:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 794:	38 02 82 70 	mvu r2,0x8270
 798:	78 42 00 03 	orhi r2,r2,0x3
 79c:	e3 ff ff e9 	bi 740 <_ZN9clase_pwm10pwm_setMovEii+0x174>
    if (com == 12){ //L
 7a0:	34 02 00 0c 	mvi r2,12
 7a4:	5c 62 00 e4 	bne r3,r2,b34 <_ZN9clase_pwm10pwm_setMovEii+0x568>
pwm -> wr = vwr;
 7a8:	78 03 00 00 	mvhi r3,0x0
 7ac:	38 63 0d 30 	ori r3,r3,0xd30
 7b0:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 7b4:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 7b8:	28 42 00 00 	lw r2,(r2+0)
 7bc:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 7c0:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 7c4:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 7c8:	34 03 07 d0 	mvi r3,2000
 7cc:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 7d0:	34 03 00 34 	mvi r3,52
 7d4:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 7d8:	38 03 82 70 	mvu r3,0x8270
 7dc:	78 63 00 03 	orhi r3,r3,0x3
 7e0:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 7e4:	34 03 00 30 	mvi r3,48
 7e8:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 7ec:	58 41 00 10 	sw (r2+16),r1
};
 7f0:	c3 a0 00 00 	ret
    if (com == 12){ //L servo 0 
 7f4:	34 04 00 0c 	mvi r4,12
 7f8:	5c 64 00 bc 	bne r3,r4,ae8 <_ZN9clase_pwm10pwm_setMovEii+0x51c>
pwm -> wr = vwr;
 7fc:	78 04 00 00 	mvhi r4,0x0
 800:	38 84 0d 30 	ori r4,r4,0xd30
 804:	28 81 00 00 	lw r1,(r4+0)
pwm -> addr = vaddr;
 808:	34 04 00 08 	mvi r4,8
pwm -> wr = vwr;
 80c:	28 21 00 00 	lw r1,(r1+0)
 810:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 814:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 818:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 81c:	34 04 07 d0 	mvi r4,2000
 820:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 824:	34 04 00 04 	mvi r4,4
 828:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 82c:	34 04 00 e6 	mvi r4,230
 830:	58 24 00 10 	sw (r1+16),r4
pwm -> addr = vaddr;
 834:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 838:	58 22 00 10 	sw (r1+16),r2
 83c:	e3 ff ff ac 	bi 6ec <_ZN9clase_pwm10pwm_setMovEii+0x120>
    if (com == 12){ //L
 840:	34 02 00 0c 	mvi r2,12
 844:	5c 62 00 6e 	bne r3,r2,9fc <_ZN9clase_pwm10pwm_setMovEii+0x430>
pwm -> wr = vwr;
 848:	78 04 00 00 	mvhi r4,0x0
 84c:	38 84 0d 30 	ori r4,r4,0xd30
 850:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 854:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 858:	28 42 00 00 	lw r2,(r2+0)
 85c:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 860:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 864:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 868:	34 03 07 d0 	mvi r3,2000
 86c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 870:	34 03 00 1c 	mvi r3,28
 874:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 878:	38 03 82 70 	mvu r3,0x8270
 87c:	78 63 00 03 	orhi r3,r3,0x3
 880:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 884:	34 03 00 18 	mvi r3,24
 888:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 88c:	58 41 00 10 	sw (r2+16),r1
};
 890:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 894:	78 04 00 00 	mvhi r4,0x0
 898:	38 84 0d 30 	ori r4,r4,0xd30
 89c:	28 81 00 00 	lw r1,(r4+0)
 8a0:	34 02 00 01 	mvi r2,1
 8a4:	28 21 00 00 	lw r1,(r1+0)
 8a8:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 8ac:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 8b0:	34 02 00 50 	mvi r2,80
 8b4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8b8:	34 02 07 d0 	mvi r2,2000
 8bc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8c0:	34 02 00 4c 	mvi r2,76
 8c4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8c8:	38 02 c3 50 	mvu r2,0xc350
 8cc:	e3 ff ff 9d 	bi 740 <_ZN9clase_pwm10pwm_setMovEii+0x174>
pwm -> wr = vwr;
 8d0:	78 04 00 00 	mvhi r4,0x0
 8d4:	38 84 0d 30 	ori r4,r4,0xd30
 8d8:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 8dc:	34 03 00 20 	mvi r3,32
pwm -> wr = vwr;
 8e0:	28 42 00 00 	lw r2,(r2+0)
 8e4:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 8e8:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 8ec:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 8f0:	34 03 07 d0 	mvi r3,2000
 8f4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 8f8:	34 03 00 1c 	mvi r3,28
 8fc:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 900:	38 03 c3 50 	mvu r3,0xc350
 904:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 908:	34 03 00 18 	mvi r3,24
 90c:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 910:	58 41 00 10 	sw (r2+16),r1
};
 914:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 918:	78 03 00 00 	mvhi r3,0x0
 91c:	38 63 0d 30 	ori r3,r3,0xd30
 920:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 924:	34 03 00 38 	mvi r3,56
pwm -> wr = vwr;
 928:	28 42 00 00 	lw r2,(r2+0)
 92c:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 930:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 934:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 938:	34 03 07 d0 	mvi r3,2000
 93c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 940:	34 03 00 34 	mvi r3,52
 944:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 948:	38 03 c3 50 	mvu r3,0xc350
 94c:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 950:	34 03 00 30 	mvi r3,48
 954:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 958:	58 41 00 10 	sw (r2+16),r1
};
 95c:	c3 a0 00 00 	ret
pwm -> wr = vwr;
 960:	78 03 00 00 	mvhi r3,0x0
 964:	38 63 0d 30 	ori r3,r3,0xd30
 968:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 96c:	34 03 00 08 	mvi r3,8
pwm -> wr = vwr;
 970:	28 21 00 00 	lw r1,(r1+0)
 974:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 978:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 97c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 980:	34 03 07 d0 	mvi r3,2000
 984:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 988:	34 03 00 04 	mvi r3,4
 98c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 990:	34 03 00 32 	mvi r3,50
 994:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 998:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 99c:	58 22 00 10 	sw (r1+16),r2
};
 9a0:	c3 a0 00 00 	ret
    if (com == 13){ //D
 9a4:	34 01 00 0d 	mvi r1,13
 9a8:	5c 61 00 29 	bne r3,r1,a4c <_ZN9clase_pwm10pwm_setMovEii+0x480>
pwm -> wr = vwr;
 9ac:	78 04 00 00 	mvhi r4,0x0
 9b0:	38 84 0d 30 	ori r4,r4,0xd30
 9b4:	28 81 00 00 	lw r1,(r4+0)
 9b8:	34 02 00 01 	mvi r2,1
 9bc:	28 21 00 00 	lw r1,(r1+0)
 9c0:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 9c4:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 9c8:	34 02 00 5c 	mvi r2,92
 9cc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9d0:	34 02 07 d0 	mvi r2,2000
 9d4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9d8:	34 02 00 58 	mvi r2,88
 9dc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9e0:	38 02 c3 50 	mvu r2,0xc350
 9e4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9e8:	34 02 00 54 	mvi r2,84
 9ec:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9f0:	34 02 00 01 	mvi r2,1
 9f4:	58 22 00 10 	sw (r1+16),r2
};
 9f8:	e3 ff ff 0f 	bi 634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
    if (com == 13){ //D
 9fc:	34 02 00 0d 	mvi r2,13
 a00:	5c 62 00 25 	bne r3,r2,a94 <_ZN9clase_pwm10pwm_setMovEii+0x4c8>
pwm -> wr = vwr;
 a04:	78 03 00 00 	mvhi r3,0x0
 a08:	38 63 0d 30 	ori r3,r3,0xd30
 a0c:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 a10:	34 03 00 2c 	mvi r3,44
pwm -> wr = vwr;
 a14:	28 42 00 00 	lw r2,(r2+0)
 a18:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 a1c:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 a20:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a24:	34 03 07 d0 	mvi r3,2000
 a28:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a2c:	34 03 00 28 	mvi r3,40
 a30:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a34:	38 03 c3 50 	mvu r3,0xc350
 a38:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 a3c:	34 03 00 24 	mvi r3,36
 a40:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 a44:	58 41 00 10 	sw (r2+16),r1
 a48:	e3 ff fe fb 	bi 634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
    if (com == 14){ //A
 a4c:	34 01 00 0e 	mvi r1,14
 a50:	5c 61 fe f9 	bne r3,r1,634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
pwm -> wr = vwr;
 a54:	78 02 00 00 	mvhi r2,0x0
 a58:	38 42 0d 30 	ori r2,r2,0xd30
 a5c:	28 41 00 00 	lw r1,(r2+0)
 a60:	34 02 00 01 	mvi r2,1
 a64:	28 21 00 00 	lw r1,(r1+0)
 a68:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 a6c:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 a70:	34 02 00 5c 	mvi r2,92
 a74:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a78:	34 02 07 d0 	mvi r2,2000
 a7c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a80:	34 02 00 58 	mvi r2,88
 a84:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a88:	38 02 82 70 	mvu r2,0x8270
 a8c:	78 42 00 03 	orhi r2,r2,0x3
 a90:	e3 ff ff d5 	bi 9e4 <_ZN9clase_pwm10pwm_setMovEii+0x418>
    if (com == 14){ //A
 a94:	34 02 00 0e 	mvi r2,14
 a98:	5c 62 fe e7 	bne r3,r2,634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
pwm -> wr = vwr;
 a9c:	78 04 00 00 	mvhi r4,0x0
 aa0:	38 84 0d 30 	ori r4,r4,0xd30
 aa4:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 aa8:	34 03 00 2c 	mvi r3,44
pwm -> wr = vwr;
 aac:	28 42 00 00 	lw r2,(r2+0)
 ab0:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 ab4:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 ab8:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 abc:	34 03 07 d0 	mvi r3,2000
 ac0:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 ac4:	34 03 00 28 	mvi r3,40
 ac8:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 acc:	38 03 82 70 	mvu r3,0x8270
 ad0:	78 63 00 03 	orhi r3,r3,0x3
 ad4:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 ad8:	34 03 00 24 	mvi r3,36
 adc:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 ae0:	58 41 00 10 	sw (r2+16),r1
 ae4:	e3 ff fe d4 	bi 634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
    if (com == 13){ //D servo1
 ae8:	34 01 00 0d 	mvi r1,13
 aec:	5c 61 00 26 	bne r3,r1,b84 <_ZN9clase_pwm10pwm_setMovEii+0x5b8>
pwm -> wr = vwr;
 af0:	78 03 00 00 	mvhi r3,0x0
 af4:	38 63 0d 30 	ori r3,r3,0xd30
 af8:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 afc:	34 03 00 14 	mvi r3,20
pwm -> wr = vwr;
 b00:	28 21 00 00 	lw r1,(r1+0)
 b04:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 b08:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 b0c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 b10:	34 03 07 d0 	mvi r3,2000
 b14:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 b18:	34 03 00 10 	mvi r3,16
 b1c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 b20:	34 03 00 32 	mvi r3,50
 b24:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 b28:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 b2c:	58 22 00 10 	sw (r1+16),r2
 b30:	e3 ff fe c1 	bi 634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
    if (com == 13){ //D
 b34:	34 02 00 0d 	mvi r2,13
 b38:	5c 62 00 26 	bne r3,r2,bd0 <_ZN9clase_pwm10pwm_setMovEii+0x604>
pwm -> wr = vwr;
 b3c:	78 04 00 00 	mvhi r4,0x0
 b40:	38 84 0d 30 	ori r4,r4,0xd30
 b44:	28 82 00 00 	lw r2,(r4+0)
pwm -> addr = vaddr;
 b48:	34 03 00 44 	mvi r3,68
pwm -> wr = vwr;
 b4c:	28 42 00 00 	lw r2,(r2+0)
 b50:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 b54:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 b58:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b5c:	34 03 07 d0 	mvi r3,2000
 b60:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 b64:	34 03 00 40 	mvi r3,64
 b68:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b6c:	38 03 c3 50 	mvu r3,0xc350
 b70:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 b74:	34 03 00 3c 	mvi r3,60
 b78:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 b7c:	58 41 00 10 	sw (r2+16),r1
 b80:	e3 ff fe ad 	bi 634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
    if (com == 14){ //A servo 1
 b84:	34 01 00 0e 	mvi r1,14
 b88:	5c 61 fe ab 	bne r3,r1,634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
pwm -> wr = vwr;
 b8c:	78 03 00 00 	mvhi r3,0x0
 b90:	38 63 0d 30 	ori r3,r3,0xd30
 b94:	28 61 00 00 	lw r1,(r3+0)
pwm -> addr = vaddr;
 b98:	34 03 00 14 	mvi r3,20
pwm -> wr = vwr;
 b9c:	28 21 00 00 	lw r1,(r1+0)
 ba0:	30 22 00 0c 	sb (r1+12),r2
pwm -> rd = vrd;
 ba4:	30 20 00 04 	sb (r1+4),r0
pwm -> addr = vaddr;
 ba8:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 bac:	34 03 07 d0 	mvi r3,2000
 bb0:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 bb4:	34 03 00 10 	mvi r3,16
 bb8:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 bbc:	34 03 00 e6 	mvi r3,230
 bc0:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 bc4:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 bc8:	58 22 00 10 	sw (r1+16),r2
 bcc:	e3 ff fe 9a 	bi 634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
    if (com == 14){ //A
 bd0:	34 02 00 0e 	mvi r2,14
 bd4:	5c 62 fe 98 	bne r3,r2,634 <_ZN9clase_pwm10pwm_setMovEii+0x68>
pwm -> wr = vwr;
 bd8:	78 03 00 00 	mvhi r3,0x0
 bdc:	38 63 0d 30 	ori r3,r3,0xd30
 be0:	28 62 00 00 	lw r2,(r3+0)
pwm -> addr = vaddr;
 be4:	34 03 00 44 	mvi r3,68
pwm -> wr = vwr;
 be8:	28 42 00 00 	lw r2,(r2+0)
 bec:	30 41 00 0c 	sb (r2+12),r1
pwm -> rd = vrd;
 bf0:	30 40 00 04 	sb (r2+4),r0
pwm -> addr = vaddr;
 bf4:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 bf8:	34 03 07 d0 	mvi r3,2000
 bfc:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 c00:	34 03 00 40 	mvi r3,64
 c04:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c08:	38 03 82 70 	mvu r3,0x8270
 c0c:	78 63 00 03 	orhi r3,r3,0x3
 c10:	58 43 00 10 	sw (r2+16),r3
pwm -> addr = vaddr;
 c14:	34 03 00 3c 	mvi r3,60
 c18:	58 43 00 08 	sw (r2+8),r3
pwm -> d_in = vd_in;
 c1c:	58 41 00 10 	sw (r2+16),r1
 c20:	e3 ff fe 85 	bi 634 <_ZN9clase_pwm10pwm_setMovEii+0x68>

00000c24 <_ZN9clase_pwm8pwm_readEv>:
	return pwm -> d_out;
 c24:	78 02 00 00 	mvhi r2,0x0
 c28:	38 42 0d 34 	ori r2,r2,0xd34
 c2c:	28 41 00 00 	lw r1,(r2+0)
 c30:	28 21 00 00 	lw r1,(r1+0)
 c34:	28 21 00 00 	lw r1,(r1+0)
}
 c38:	c3 a0 00 00 	ret

00000c3c <_ZN9clase_pwm6pwm_rdEh>:
pwm -> rd = vrd;
 c3c:	78 03 00 00 	mvhi r3,0x0
 c40:	38 63 0d 38 	ori r3,r3,0xd38
 c44:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_rd(uint8_t vrd){
 c48:	20 42 00 ff 	andi r2,r2,0xff
pwm -> rd = vrd;
 c4c:	28 21 00 00 	lw r1,(r1+0)
 c50:	30 22 00 04 	sb (r1+4),r2
}
 c54:	c3 a0 00 00 	ret

00000c58 <_ZN9clase_pwm8pwm_addrEj>:
pwm -> addr = vaddr;
 c58:	78 03 00 00 	mvhi r3,0x0
 c5c:	38 63 0d 3c 	ori r3,r3,0xd3c
 c60:	28 61 00 00 	lw r1,(r3+0)
 c64:	28 21 00 00 	lw r1,(r1+0)
 c68:	58 22 00 08 	sw (r1+8),r2
}
 c6c:	c3 a0 00 00 	ret

00000c70 <_ZN9clase_pwm6pwm_wrEh>:
pwm -> wr = vwr;
 c70:	78 03 00 00 	mvhi r3,0x0
 c74:	38 63 0d 40 	ori r3,r3,0xd40
 c78:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_wr(uint8_t vwr){
 c7c:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 c80:	28 21 00 00 	lw r1,(r1+0)
 c84:	30 22 00 0c 	sb (r1+12),r2
}
 c88:	c3 a0 00 00 	ret

00000c8c <_ZN9clase_pwm7pwm_dinEj>:
pwm -> d_in = vd_in;
 c8c:	78 03 00 00 	mvhi r3,0x0
 c90:	38 63 0d 44 	ori r3,r3,0xd44
 c94:	28 61 00 00 	lw r1,(r3+0)
 c98:	28 21 00 00 	lw r1,(r1+0)
 c9c:	58 22 00 10 	sw (r1+16),r2
}
 ca0:	c3 a0 00 00 	ret

00000ca4 <_ZN11clase_timer6nsleepEi>:
void clase_timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 ca4:	78 03 00 00 	mvhi r3,0x0
 ca8:	38 63 0d 48 	ori r3,r3,0xd48
 cac:	28 61 00 00 	lw r1,(r3+0)
 cb0:	08 42 00 64 	muli r2,r2,100
 cb4:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 cb8:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 cbc:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 cc0:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 cc4:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 cc8:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 ccc:	20 21 00 01 	andi r1,r1,0x1
 cd0:	44 20 ff fe 	be r1,r0,cc8 <_ZN11clase_timer6nsleepEi+0x24>
};
 cd4:	c3 a0 00 00 	ret
