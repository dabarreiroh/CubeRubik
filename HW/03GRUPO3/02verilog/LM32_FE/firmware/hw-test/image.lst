
image:     formato del fichero elf32-lm32

Secciones:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dcc  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000a4  00000dcc  00000dcc  00000e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00000e70  00000e70  00000ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000e88  00000e88  00000edc  2**2
                  ALLOC
  4 .debug_frame  00000310  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ad3  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a49  00000000  00000000  00004cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00002996  00000000  00000000  00005708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000000c0  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000815e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000eb5  00000000  00000000  000081a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000628  00000000  00000000  0000905b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  00009683  2**0
                  CONTENTS, READONLY

Desensamblado de la secci√≥n .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 8b 	calli 2f8 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 1f fc 	ori sp,sp,0x1ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0e 90 	ori gp,gp,0xe90
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0e 88 	ori r1,r1,0xe88
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0f 0c 	ori r3,r3,0xf0c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "clase_uart.h"
#include "camara.h"



int main () {
 208:	37 9c ff e4 	addi sp,sp,-28
 20c:	5b 8b 00 0c 	sw (sp+12),r11
 210:	5b 8c 00 08 	sw (sp+8),r12
 214:	5b 9d 00 04 	sw (sp+4),ra
        
    while (1){
        int i=0;        
        comando=uart.uart_getchar();
        uart.uart_putchar(comando);       
        if (comando==0XC){
 218:	34 0c 00 0c 	mvi r12,12
        comando=uart.uart_getchar();
 21c:	37 81 00 18 	addi r1,sp,24
 220:	f8 00 02 b6 	calli cf8 <_ZN10clase_uart12uart_getcharEv>
 224:	b8 20 58 00 	mv r11,r1
        uart.uart_putchar(comando);       
 228:	b8 20 10 00 	mv r2,r1
 22c:	37 81 00 18 	addi r1,sp,24
 230:	f8 00 02 bc 	calli d20 <_ZN10clase_uart12uart_putcharEc>
        if (comando==0XC){
 234:	5d 6c ff fa 	bne r11,r12,21c <main+0x14>
            cam.camCapture(a);
 238:	34 02 00 01 	mvi r2,1
 23c:	37 81 00 10 	addi r1,sp,16
 240:	f8 00 02 d0 	calli d80 <_ZN6camara10camCaptureEi>
 244:	38 0b b0 00 	mvu r11,0xb000
 248:	79 6b 00 04 	orhi r11,r11,0x4
                while (i<307200){
                    cam.camRead(a);
 24c:	34 02 00 01 	mvi r2,1
 250:	37 81 00 10 	addi r1,sp,16
 254:	f8 00 02 d1 	calli d98 <_ZN6camara7camReadEi>
                    datos=cam.camData();
 258:	37 81 00 10 	addi r1,sp,16
 25c:	f8 00 02 d5 	calli db0 <_ZN6camara7camDataEv>
                    uart.uart_putchar(datos);                       
 260:	b8 20 10 00 	mv r2,r1
 264:	35 6b ff ff 	addi r11,r11,-1
 268:	37 81 00 18 	addi r1,sp,24
 26c:	f8 00 02 ad 	calli d20 <_ZN10clase_uart12uart_putcharEc>
                while (i<307200){
 270:	5d 60 ff f7 	bne r11,r0,24c <main+0x44>
 274:	e3 ff ff ea 	bi 21c <main+0x14>

00000278 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 278:	78 01 00 00 	mvhi r1,0x0
 27c:	38 21 0d cc 	ori r1,r1,0xdcc
 280:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 284:	78 04 00 00 	mvhi r4,0x0
 288:	38 84 0d d0 	ori r4,r4,0xdd0
 28c:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 290:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 294:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 298:	34 21 00 01 	addi r1,r1,1
 29c:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2a0:	34 01 00 0e 	mvi r1,14
 2a4:	58 61 00 00 	sw (r3+0),r1
}
 2a8:	c3 a0 00 00 	ret

000002ac <isr_null>:
 2ac:	c3 a0 00 00 	ret

000002b0 <gpio_config_dir>:
	gpio0 -> dir = vdir;
 2b0:	78 03 00 00 	mvhi r3,0x0
 2b4:	38 63 0d d4 	ori r3,r3,0xdd4
 2b8:	28 62 00 00 	lw r2,(r3+0)
 2bc:	28 42 00 00 	lw r2,(r2+0)
 2c0:	58 41 00 08 	sw (r2+8),r1
}
 2c4:	c3 a0 00 00 	ret

000002c8 <gpio_write>:
	gpio0 -> wr = vpins;
 2c8:	78 03 00 00 	mvhi r3,0x0
 2cc:	38 63 0d d8 	ori r3,r3,0xdd8
 2d0:	28 62 00 00 	lw r2,(r3+0)
 2d4:	28 42 00 00 	lw r2,(r2+0)
 2d8:	58 41 00 04 	sw (r2+4),r1
}
 2dc:	c3 a0 00 00 	ret

000002e0 <gpio_read>:
	return gpio0 -> rd;
 2e0:	78 02 00 00 	mvhi r2,0x0
 2e4:	38 42 0d dc 	ori r2,r2,0xddc
 2e8:	28 41 00 00 	lw r1,(r2+0)
 2ec:	28 21 00 00 	lw r1,(r1+0)
 2f0:	28 21 00 00 	lw r1,(r1+0)
}
 2f4:	c3 a0 00 00 	ret

000002f8 <irq_handler>:
{
 2f8:	37 9c ff f0 	addi sp,sp,-16
 2fc:	5b 8b 00 10 	sw (sp+16),r11
 300:	5b 8c 00 0c 	sw (sp+12),r12
 304:	5b 8d 00 08 	sw (sp+8),r13
 308:	5b 9d 00 04 	sw (sp+4),ra
 30c:	78 02 00 00 	mvhi r2,0x0
 310:	38 42 0d e0 	ori r2,r2,0xde0
 314:	28 4b 00 00 	lw r11,(r2+0)
 318:	b8 20 60 00 	mv r12,r1
 31c:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 320:	21 81 00 01 	andi r1,r12,0x1
 324:	44 20 00 03 	be r1,r0,330 <irq_handler+0x38>
 328:	29 61 00 00 	lw r1,(r11+0)
 32c:	d8 20 00 00 	call r1
 330:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 334:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 338:	5d ab ff fa 	bne r13,r11,320 <irq_handler+0x28>
}
 33c:	2b 9d 00 04 	lw ra,(sp+4)
 340:	2b 8b 00 10 	lw r11,(sp+16)
 344:	2b 8c 00 0c 	lw r12,(sp+12)
 348:	2b 8d 00 08 	lw r13,(sp+8)
 34c:	37 9c 00 10 	addi sp,sp,16
 350:	c3 a0 00 00 	ret

00000354 <isr_init>:
{
 354:	78 02 00 00 	mvhi r2,0x0
 358:	38 42 0d e4 	ori r2,r2,0xde4
 35c:	28 41 00 00 	lw r1,(r2+0)
 360:	78 02 00 00 	mvhi r2,0x0
 364:	38 42 0d e8 	ori r2,r2,0xde8
 368:	28 43 00 00 	lw r3,(r2+0)
 36c:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 370:	58 23 00 00 	sw (r1+0),r3
 374:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 378:	5c 22 ff fe 	bne r1,r2,370 <isr_init+0x1c>
}
 37c:	c3 a0 00 00 	ret

00000380 <isr_register>:
	isr_table[irq] = isr;
 380:	78 04 00 00 	mvhi r4,0x0
 384:	38 84 0d ec 	ori r4,r4,0xdec
 388:	3c 23 00 02 	sli r3,r1,2
 38c:	28 81 00 00 	lw r1,(r4+0)
 390:	b4 23 08 00 	add r1,r1,r3
 394:	58 22 00 00 	sw (r1+0),r2
}
 398:	c3 a0 00 00 	ret

0000039c <isr_unregister>:
	isr_table[irq] = &isr_null;
 39c:	78 03 00 00 	mvhi r3,0x0
 3a0:	38 63 0d f0 	ori r3,r3,0xdf0
 3a4:	3c 22 00 02 	sli r2,r1,2
 3a8:	28 61 00 00 	lw r1,(r3+0)
 3ac:	78 03 00 00 	mvhi r3,0x0
 3b0:	38 63 0d f4 	ori r3,r3,0xdf4
 3b4:	b4 22 08 00 	add r1,r1,r2
 3b8:	28 62 00 00 	lw r2,(r3+0)
 3bc:	58 22 00 00 	sw (r1+0),r2
}
 3c0:	c3 a0 00 00 	ret

000003c4 <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 3c4:	78 03 00 00 	mvhi r3,0x0
 3c8:	38 02 86 a0 	mvu r2,0x86a0
 3cc:	78 42 00 01 	orhi r2,r2,0x1
 3d0:	38 63 0d f8 	ori r3,r3,0xdf8
 3d4:	88 22 08 00 	mul r1,r1,r2
 3d8:	28 62 00 00 	lw r2,(r3+0)
 3dc:	28 42 00 00 	lw r2,(r2+0)
 3e0:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3e4:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3e8:	34 01 00 08 	mvi r1,8
 3ec:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 3f0:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3f4:	20 21 00 01 	andi r1,r1,0x1
 3f8:	44 20 ff fe 	be r1,r0,3f0 <msleep+0x2c>
}
 3fc:	c3 a0 00 00 	ret

00000400 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 400:	78 03 00 00 	mvhi r3,0x0
 404:	38 63 0d fc 	ori r3,r3,0xdfc
 408:	28 62 00 00 	lw r2,(r3+0)
 40c:	08 21 00 64 	muli r1,r1,100
 410:	28 42 00 00 	lw r2,(r2+0)
 414:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 418:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 41c:	34 01 00 08 	mvi r1,8
 420:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 424:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 428:	20 21 00 01 	andi r1,r1,0x1
 42c:	44 20 ff fe 	be r1,r0,424 <nsleep+0x24>
}
 430:	c3 a0 00 00 	ret

00000434 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 434:	78 02 00 00 	mvhi r2,0x0
 438:	38 42 0e 00 	ori r2,r2,0xe00
 43c:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 440:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 444:	34 02 27 10 	mvi r2,10000
 448:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 44c:	38 63 0e 04 	ori r3,r3,0xe04
	timer0->compare0 = (FCPU/10000);
 450:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 454:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 458:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 45c:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 460:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 464:	34 02 00 0e 	mvi r2,14
 468:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 46c:	78 02 00 00 	mvhi r2,0x0
 470:	38 42 0e 08 	ori r2,r2,0xe08
 474:	38 63 0e 0c 	ori r3,r3,0xe0c
 478:	28 41 00 00 	lw r1,(r2+0)
 47c:	28 62 00 00 	lw r2,(r3+0)
 480:	58 22 00 04 	sw (r1+4),r2

	isr_register(1, &tic_isr);
}
 484:	c3 a0 00 00 	ret

00000488 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 488:	c3 a0 00 00 	ret

0000048c <uart_getchar>:

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 48c:	78 02 00 00 	mvhi r2,0x0
 490:	38 42 0e 10 	ori r2,r2,0xe10
 494:	28 41 00 00 	lw r1,(r2+0)
 498:	28 22 00 00 	lw r2,(r1+0)
 49c:	28 41 00 00 	lw r1,(r2+0)
 4a0:	20 21 00 01 	andi r1,r1,0x1
 4a4:	44 20 ff fe 	be r1,r0,49c <uart_getchar+0x10>
	return uart0->rxtx;
 4a8:	28 41 00 04 	lw r1,(r2+4)
}
 4ac:	20 21 00 ff 	andi r1,r1,0xff
 4b0:	c3 a0 00 00 	ret

000004b4 <uart_putchar>:

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4b4:	78 03 00 00 	mvhi r3,0x0
 4b8:	38 63 0e 14 	ori r3,r3,0xe14
 4bc:	28 62 00 00 	lw r2,(r3+0)
{
 4c0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4c4:	28 43 00 00 	lw r3,(r2+0)
 4c8:	28 62 00 00 	lw r2,(r3+0)
 4cc:	20 42 00 10 	andi r2,r2,0x10
 4d0:	5c 40 ff fe 	bne r2,r0,4c8 <uart_putchar+0x14>
	uart0->rxtx = c;
 4d4:	58 61 00 04 	sw (r3+4),r1
}
 4d8:	c3 a0 00 00 	ret

000004dc <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4dc:	40 24 00 00 	lbu r4,(r1+0)
 4e0:	44 80 00 0c 	be r4,r0,510 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 4e4:	78 03 00 00 	mvhi r3,0x0
 4e8:	38 63 0e 18 	ori r3,r3,0xe18
 4ec:	28 62 00 00 	lw r2,(r3+0)
 4f0:	28 43 00 00 	lw r3,(r2+0)
 4f4:	28 62 00 00 	lw r2,(r3+0)
 4f8:	20 42 00 10 	andi r2,r2,0x10
 4fc:	5c 40 ff fe 	bne r2,r0,4f4 <uart_putstr+0x18>
	uart0->rxtx = c;
 500:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 504:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 508:	40 24 00 00 	lbu r4,(r1+0)
 50c:	5c 80 ff fa 	bne r4,r0,4f4 <uart_putstr+0x18>
	}
}
 510:	c3 a0 00 00 	ret

00000514 <i2c_init>:
 * I2C Functions
*/
void i2c_init()
{

	i2c0->prerl =0x00;
 514:	78 02 00 00 	mvhi r2,0x0
 518:	38 42 0e 1c 	ori r2,r2,0xe1c
 51c:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 520:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 524:	28 21 00 00 	lw r1,(r1+0)
 528:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 52c:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 530:	34 02 ff 80 	mvi r2,-128
 534:	30 22 00 02 	sb (r1+2),r2


}
 538:	c3 a0 00 00 	ret

0000053c <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat)
{

   i2c0->TxRx=(addrDev<<1 +1);
 53c:	78 05 00 00 	mvhi r5,0x0
 540:	38 a5 0e 20 	ori r5,r5,0xe20
 544:	28 a4 00 00 	lw r4,(r5+0)
 548:	3c 21 00 02 	sli r1,r1,2
{
 54c:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 550:	28 84 00 00 	lw r4,(r4+0)
 554:	20 21 00 fc 	andi r1,r1,0xfc
{
 558:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 55c:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 560:	34 01 ff 90 	mvi r1,-112
 564:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 568:	40 81 00 04 	lbu r1,(r4+4)
 56c:	20 21 00 02 	andi r1,r1,0x2
 570:	5c 20 ff fe 	bne r1,r0,568 <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 574:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 578:	34 01 00 10 	mvi r1,16
 57c:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 580:	40 81 00 04 	lbu r1,(r4+4)
 584:	20 21 00 02 	andi r1,r1,0x2
 588:	5c 20 ff fe 	bne r1,r0,580 <i2c_write+0x44>
   
   i2c0->TxRx=dat;
 58c:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 590:	34 01 00 10 	mvi r1,16
 594:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 598:	40 81 00 04 	lbu r1,(r4+4)
 59c:	20 21 00 02 	andi r1,r1,0x2
 5a0:	5c 20 ff fe 	bne r1,r0,598 <i2c_write+0x5c>
//........... todo byte 70 9

   i2c0->TxRx=dat; // last byte
 5a4:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 5a8:	34 01 00 50 	mvi r1,80
 5ac:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 5b0:	40 81 00 04 	lbu r1,(r4+4)
 5b4:	20 21 00 02 	andi r1,r1,0x2
 5b8:	5c 20 ff fe 	bne r1,r0,5b0 <i2c_write+0x74>
//7

}
 5bc:	c3 a0 00 00 	ret

000005c0 <_ZN9clase_pwm6setMovEcc>:
}
void clase_pwm:: pwm_addr(uint32_t vaddr){
pwm -> addr = vaddr;
}
void clase_pwm:: pwm_wr(uint8_t vwr){
pwm -> wr = vwr;
 5c0:	78 04 00 00 	mvhi r4,0x0
 5c4:	38 84 0e 24 	ori r4,r4,0xe24
 5c8:	28 81 00 00 	lw r1,(r4+0)
 5cc:	34 05 00 01 	mvi r5,1
void clase_pwm::setMov(char b, char com){
 5d0:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 5d4:	28 21 00 00 	lw r1,(r1+0)
    if (b == 0x01){        //Arm 1 -> Servo 0 (RLC) & 1(DA)
 5d8:	34 04 00 01 	mvi r4,1
void clase_pwm::setMov(char b, char com){
 5dc:	20 63 00 ff 	andi r3,r3,0xff
pwm -> wr = vwr;
 5e0:	30 25 00 0c 	sb (r1+12),r5
pwm -> rd = vrd;
 5e4:	30 20 00 04 	sb (r1+4),r0
    if (b == 0x01){        //Arm 1 -> Servo 0 (RLC) & 1(DA)
 5e8:	44 44 00 28 	be r2,r4,688 <_ZN9clase_pwm6setMovEcc+0xc8>
    if (b == 0x02){        //Arm 2 -> Servo 2 (RLC) & 3(DA)
 5ec:	34 05 00 02 	mvi r5,2
 5f0:	5c 45 00 0c 	bne r2,r5,620 <_ZN9clase_pwm6setMovEcc+0x60>
        if (com==0x10){           //S2
 5f4:	34 02 00 10 	mvi r2,16
 5f8:	44 62 00 60 	be r3,r2,778 <_ZN9clase_pwm6setMovEcc+0x1b8>
        else if(com==0x11){       //S2
 5fc:	34 02 00 11 	mvi r2,17
 600:	44 62 00 51 	be r3,r2,744 <_ZN9clase_pwm6setMovEcc+0x184>
        else if(com==0x12){       //S2
 604:	34 02 00 12 	mvi r2,18
 608:	44 62 00 85 	be r3,r2,81c <_ZN9clase_pwm6setMovEcc+0x25c>
        else if(com==0x13){       //S3
 60c:	34 02 00 13 	mvi r2,19
 610:	44 62 00 ba 	be r3,r2,8f8 <_ZN9clase_pwm6setMovEcc+0x338>
        else if(com==0x14){       //S3
 614:	34 02 00 14 	mvi r2,20
 618:	44 62 00 aa 	be r3,r2,8c0 <_ZN9clase_pwm6setMovEcc+0x300>
} //cierra setMov
 61c:	c3 a0 00 00 	ret
    if (b == 0x03){        //Arm 3 -> Servo 4 (RLC) & 5(DA)
 620:	34 05 00 03 	mvi r5,3
 624:	5c 45 00 de 	bne r2,r5,99c <_ZN9clase_pwm6setMovEcc+0x3dc>
        if (com==0x10){           //S4
 628:	34 02 00 10 	mvi r2,16
 62c:	44 62 00 6e 	be r3,r2,7e4 <_ZN9clase_pwm6setMovEcc+0x224>
        else if(com==0x11){       //S4
 630:	34 02 00 11 	mvi r2,17
 634:	44 62 00 37 	be r3,r2,710 <_ZN9clase_pwm6setMovEcc+0x150>
        else if(com==0x12){       //S4
 638:	34 02 00 12 	mvi r2,18
 63c:	44 62 00 93 	be r3,r2,888 <_ZN9clase_pwm6setMovEcc+0x2c8>
        else if(com==0x13){       //S5
 640:	34 02 00 13 	mvi r2,19
 644:	44 62 00 bb 	be r3,r2,930 <_ZN9clase_pwm6setMovEcc+0x370>
        else if(com==0x14){       //S5
 648:	34 02 00 14 	mvi r2,20
 64c:	5c 62 ff f4 	bne r3,r2,61c <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 650:	34 02 00 44 	mvi r2,68
 654:	58 22 00 08 	sw (r1+8),r2
}
void clase_pwm:: pwm_din(uint32_t vd_in){
pwm -> d_in = vd_in;
 658:	38 02 84 80 	mvu r2,0x8480
 65c:	78 42 00 1e 	orhi r2,r2,0x1e
 660:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 664:	34 02 00 40 	mvi r2,64
 668:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 66c:	38 02 86 a0 	mvu r2,0x86a0
 670:	78 42 00 01 	orhi r2,r2,0x1
 674:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 678:	34 02 00 3c 	mvi r2,60
 67c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 680:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 684:	c3 a0 00 00 	ret
        if (com==0x10){           //S0
 688:	34 04 00 10 	mvi r4,16
 68c:	44 64 00 49 	be r3,r4,7b0 <_ZN9clase_pwm6setMovEcc+0x1f0>
        else if(com==0x11){       //S0
 690:	34 05 00 11 	mvi r5,17
 694:	44 65 00 13 	be r3,r5,6e0 <_ZN9clase_pwm6setMovEcc+0x120>
        else if(com==0x12){       //S0
 698:	34 05 00 12 	mvi r5,18
 69c:	44 65 00 6e 	be r3,r5,854 <_ZN9clase_pwm6setMovEcc+0x294>
        else if(com==0x13){       //S1
 6a0:	34 05 00 13 	mvi r5,19
 6a4:	44 65 00 b1 	be r3,r5,968 <_ZN9clase_pwm6setMovEcc+0x3a8>
        else if(com==0x14){       //S1
 6a8:	34 05 00 14 	mvi r5,20
 6ac:	5c 65 ff dc 	bne r3,r5,61c <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 6b0:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 6b4:	38 03 84 80 	mvu r3,0x8480
 6b8:	78 63 00 1e 	orhi r3,r3,0x1e
 6bc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 6c0:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 6c4:	38 03 86 a0 	mvu r3,0x86a0
 6c8:	78 63 00 01 	orhi r3,r3,0x1
 6cc:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 6d0:	34 03 00 0c 	mvi r3,12
 6d4:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 6d8:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 6dc:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 6e0:	34 03 00 08 	mvi r3,8
 6e4:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 6e8:	38 03 84 80 	mvu r3,0x8480
 6ec:	78 63 00 1e 	orhi r3,r3,0x1e
 6f0:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 6f4:	34 03 00 04 	mvi r3,4
 6f8:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 6fc:	38 03 ea 60 	mvu r3,0xea60
 700:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 704:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 708:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 70c:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 710:	34 02 00 38 	mvi r2,56
 714:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 718:	38 02 84 80 	mvu r2,0x8480
 71c:	78 42 00 1e 	orhi r2,r2,0x1e
 720:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 724:	34 02 00 34 	mvi r2,52
 728:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 72c:	38 02 ea 60 	mvu r2,0xea60
 730:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 734:	34 02 00 30 	mvi r2,48
 738:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 73c:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 740:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 744:	34 02 00 20 	mvi r2,32
 748:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 74c:	38 02 84 80 	mvu r2,0x8480
 750:	78 42 00 1e 	orhi r2,r2,0x1e
 754:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 758:	34 02 00 1c 	mvi r2,28
 75c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 760:	38 02 ea 60 	mvu r2,0xea60
 764:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 768:	34 02 00 18 	mvi r2,24
 76c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 770:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 774:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 778:	34 02 00 20 	mvi r2,32
 77c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 780:	38 02 84 80 	mvu r2,0x8480
 784:	78 42 00 1e 	orhi r2,r2,0x1e
 788:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 78c:	34 02 00 1c 	mvi r2,28
 790:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 794:	38 02 5b 60 	mvu r2,0x5b60
 798:	78 42 00 03 	orhi r2,r2,0x3
 79c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 7a0:	34 02 00 18 	mvi r2,24
 7a4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 7a8:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 7ac:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 7b0:	34 03 00 08 	mvi r3,8
 7b4:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 7b8:	38 03 84 80 	mvu r3,0x8480
 7bc:	78 63 00 1e 	orhi r3,r3,0x1e
 7c0:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 7c4:	34 03 00 04 	mvi r3,4
 7c8:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 7cc:	38 03 5b 60 	mvu r3,0x5b60
 7d0:	78 63 00 03 	orhi r3,r3,0x3
 7d4:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 7d8:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 7dc:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 7e0:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 7e4:	34 02 00 38 	mvi r2,56
 7e8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 7ec:	38 02 84 80 	mvu r2,0x8480
 7f0:	78 42 00 1e 	orhi r2,r2,0x1e
 7f4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 7f8:	34 02 00 34 	mvi r2,52
 7fc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 800:	38 02 5b 60 	mvu r2,0x5b60
 804:	78 42 00 03 	orhi r2,r2,0x3
 808:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 80c:	34 02 00 30 	mvi r2,48
 810:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 814:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 818:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 81c:	34 02 00 20 	mvi r2,32
 820:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 824:	38 02 84 80 	mvu r2,0x8480
 828:	78 42 00 1e 	orhi r2,r2,0x1e
 82c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 830:	34 02 00 1c 	mvi r2,28
 834:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 838:	38 02 fb d0 	mvu r2,0xfbd0
 83c:	78 42 00 01 	orhi r2,r2,0x1
 840:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 844:	34 02 00 18 	mvi r2,24
 848:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 84c:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 850:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 854:	34 03 00 08 	mvi r3,8
 858:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 85c:	38 03 84 80 	mvu r3,0x8480
 860:	78 63 00 1e 	orhi r3,r3,0x1e
 864:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 868:	34 03 00 04 	mvi r3,4
 86c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 870:	38 03 fb d0 	mvu r3,0xfbd0
 874:	78 63 00 01 	orhi r3,r3,0x1
 878:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 87c:	58 20 00 08 	sw (r1+8),r0
pwm -> d_in = vd_in;
 880:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 884:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 888:	34 02 00 38 	mvi r2,56
 88c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 890:	38 02 84 80 	mvu r2,0x8480
 894:	78 42 00 1e 	orhi r2,r2,0x1e
 898:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 89c:	34 02 00 34 	mvi r2,52
 8a0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8a4:	38 02 fb d0 	mvu r2,0xfbd0
 8a8:	78 42 00 01 	orhi r2,r2,0x1
 8ac:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8b0:	34 02 00 30 	mvi r2,48
 8b4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8b8:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 8bc:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 8c0:	34 02 00 2c 	mvi r2,44
 8c4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8c8:	38 02 84 80 	mvu r2,0x8480
 8cc:	78 42 00 1e 	orhi r2,r2,0x1e
 8d0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8d4:	34 02 00 28 	mvi r2,40
 8d8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8dc:	38 02 86 a0 	mvu r2,0x86a0
 8e0:	78 42 00 01 	orhi r2,r2,0x1
 8e4:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 8e8:	34 02 00 24 	mvi r2,36
 8ec:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 8f0:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 8f4:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 8f8:	34 02 00 2c 	mvi r2,44
 8fc:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 900:	38 02 84 80 	mvu r2,0x8480
 904:	78 42 00 1e 	orhi r2,r2,0x1e
 908:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 90c:	34 02 00 28 	mvi r2,40
 910:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 914:	38 02 a9 80 	mvu r2,0xa980
 918:	78 42 00 03 	orhi r2,r2,0x3
 91c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 920:	34 02 00 24 	mvi r2,36
 924:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 928:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 92c:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 930:	34 02 00 44 	mvi r2,68
 934:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 938:	38 02 84 80 	mvu r2,0x8480
 93c:	78 42 00 1e 	orhi r2,r2,0x1e
 940:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 944:	34 02 00 40 	mvi r2,64
 948:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 94c:	38 02 a9 80 	mvu r2,0xa980
 950:	78 42 00 03 	orhi r2,r2,0x3
 954:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 958:	34 02 00 3c 	mvi r2,60
 95c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 960:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 964:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 968:	34 03 00 14 	mvi r3,20
 96c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 970:	38 03 84 80 	mvu r3,0x8480
 974:	78 63 00 1e 	orhi r3,r3,0x1e
 978:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 97c:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 980:	38 03 a9 80 	mvu r3,0xa980
 984:	78 63 00 03 	orhi r3,r3,0x3
 988:	58 23 00 10 	sw (r1+16),r3
pwm -> addr = vaddr;
 98c:	34 03 00 0c 	mvi r3,12
 990:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 994:	58 22 00 10 	sw (r1+16),r2
} //cierra setMov
 998:	c3 a0 00 00 	ret
    if (b == 0x04){        //Arm 4 -> Servo 6 (RLC) & 7(DA)
 99c:	34 05 00 04 	mvi r5,4
 9a0:	5c 45 ff 1f 	bne r2,r5,61c <_ZN9clase_pwm6setMovEcc+0x5c>
        if (com==0x10){           //S6
 9a4:	34 02 00 10 	mvi r2,16
 9a8:	44 62 00 17 	be r3,r2,a04 <_ZN9clase_pwm6setMovEcc+0x444>
        else if(com==0x11){       //S6
 9ac:	34 02 00 11 	mvi r2,17
 9b0:	44 62 00 23 	be r3,r2,a3c <_ZN9clase_pwm6setMovEcc+0x47c>
        else if(com==0x12){       //S6
 9b4:	34 02 00 12 	mvi r2,18
 9b8:	44 62 00 2e 	be r3,r2,a70 <_ZN9clase_pwm6setMovEcc+0x4b0>
        else if(com==0x13){       //S7
 9bc:	34 02 00 13 	mvi r2,19
 9c0:	44 62 00 3a 	be r3,r2,aa8 <_ZN9clase_pwm6setMovEcc+0x4e8>
        else if(com==0x14){       //S7
 9c4:	34 02 00 14 	mvi r2,20
 9c8:	5c 62 ff 15 	bne r3,r2,61c <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 9cc:	34 02 00 5c 	mvi r2,92
 9d0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9d4:	38 02 84 80 	mvu r2,0x8480
 9d8:	78 42 00 1e 	orhi r2,r2,0x1e
 9dc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9e0:	34 02 00 58 	mvi r2,88
 9e4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9e8:	38 02 86 a0 	mvu r2,0x86a0
 9ec:	78 42 00 01 	orhi r2,r2,0x1
 9f0:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 9f4:	34 02 00 54 	mvi r2,84
 9f8:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 9fc:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 a00:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 a04:	34 02 00 50 	mvi r2,80
 a08:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a0c:	38 02 84 80 	mvu r2,0x8480
 a10:	78 42 00 1e 	orhi r2,r2,0x1e
 a14:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a18:	34 02 00 4c 	mvi r2,76
 a1c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a20:	38 02 5b 60 	mvu r2,0x5b60
 a24:	78 42 00 03 	orhi r2,r2,0x3
 a28:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a2c:	34 02 00 48 	mvi r2,72
 a30:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a34:	58 24 00 10 	sw (r1+16),r4
} //cierra setMov
 a38:	c3 a0 00 00 	ret
pwm -> addr = vaddr;
 a3c:	34 02 00 50 	mvi r2,80
 a40:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a44:	38 02 84 80 	mvu r2,0x8480
 a48:	78 42 00 1e 	orhi r2,r2,0x1e
 a4c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a50:	34 02 00 4c 	mvi r2,76
 a54:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a58:	38 02 ea 60 	mvu r2,0xea60
 a5c:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a60:	34 02 00 48 	mvi r2,72
 a64:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a68:	58 24 00 10 	sw (r1+16),r4
 a6c:	e3 ff fe ec 	bi 61c <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 a70:	34 02 00 50 	mvi r2,80
 a74:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a78:	38 02 84 80 	mvu r2,0x8480
 a7c:	78 42 00 1e 	orhi r2,r2,0x1e
 a80:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a84:	34 02 00 4c 	mvi r2,76
 a88:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 a8c:	38 02 fb d0 	mvu r2,0xfbd0
 a90:	78 42 00 01 	orhi r2,r2,0x1
 a94:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 a98:	34 02 00 48 	mvi r2,72
 a9c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 aa0:	58 24 00 10 	sw (r1+16),r4
 aa4:	e3 ff fe de 	bi 61c <_ZN9clase_pwm6setMovEcc+0x5c>
pwm -> addr = vaddr;
 aa8:	34 02 00 5c 	mvi r2,92
 aac:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ab0:	38 02 84 80 	mvu r2,0x8480
 ab4:	78 42 00 1e 	orhi r2,r2,0x1e
 ab8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 abc:	34 02 00 58 	mvi r2,88
 ac0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ac4:	38 02 a9 80 	mvu r2,0xa980
 ac8:	78 42 00 03 	orhi r2,r2,0x3
 acc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 ad0:	34 02 00 54 	mvi r2,84
 ad4:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 ad8:	58 24 00 10 	sw (r1+16),r4
 adc:	e3 ff fe d0 	bi 61c <_ZN9clase_pwm6setMovEcc+0x5c>

00000ae0 <_ZN9clase_pwm4LeftEiii>:
pwm -> addr = vaddr;
 ae0:	78 05 00 00 	mvhi r5,0x0
 ae4:	38 a5 0e 28 	ori r5,r5,0xe28
 ae8:	28 a1 00 00 	lw r1,(r5+0)
 aec:	28 21 00 00 	lw r1,(r1+0)
 af0:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 af4:	38 02 84 80 	mvu r2,0x8480
 af8:	78 42 00 1e 	orhi r2,r2,0x1e
 afc:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b00:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 b04:	38 02 ea 60 	mvu r2,0xea60
 b08:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b0c:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 b10:	34 02 00 01 	mvi r2,1
 b14:	58 22 00 10 	sw (r1+16),r2
}
 b18:	c3 a0 00 00 	ret

00000b1c <_ZN9clase_pwm6CenterEiii>:
pwm -> addr = vaddr;
 b1c:	78 05 00 00 	mvhi r5,0x0
 b20:	38 a5 0e 2c 	ori r5,r5,0xe2c
 b24:	28 a1 00 00 	lw r1,(r5+0)
 b28:	28 21 00 00 	lw r1,(r1+0)
 b2c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b30:	38 02 84 80 	mvu r2,0x8480
 b34:	78 42 00 1e 	orhi r2,r2,0x1e
 b38:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b3c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 b40:	38 02 fb d0 	mvu r2,0xfbd0
 b44:	78 42 00 01 	orhi r2,r2,0x1
 b48:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b4c:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 b50:	34 02 00 01 	mvi r2,1
 b54:	58 22 00 10 	sw (r1+16),r2
}
 b58:	c3 a0 00 00 	ret

00000b5c <_ZN9clase_pwm5RightEiii>:
pwm -> addr = vaddr;
 b5c:	78 05 00 00 	mvhi r5,0x0
 b60:	38 a5 0e 30 	ori r5,r5,0xe30
 b64:	28 a1 00 00 	lw r1,(r5+0)
 b68:	28 21 00 00 	lw r1,(r1+0)
 b6c:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 b70:	38 02 84 80 	mvu r2,0x8480
 b74:	78 42 00 1e 	orhi r2,r2,0x1e
 b78:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b7c:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 b80:	38 02 5b 60 	mvu r2,0x5b60
 b84:	78 42 00 03 	orhi r2,r2,0x3
 b88:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 b8c:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 b90:	34 02 00 01 	mvi r2,1
 b94:	58 22 00 10 	sw (r1+16),r2
}
 b98:	c3 a0 00 00 	ret

00000b9c <_ZN9clase_pwm5LeaveEiii>:
pwm -> addr = vaddr;
 b9c:	78 05 00 00 	mvhi r5,0x0
 ba0:	38 a5 0e 34 	ori r5,r5,0xe34
 ba4:	28 a1 00 00 	lw r1,(r5+0)
 ba8:	28 21 00 00 	lw r1,(r1+0)
 bac:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bb0:	38 02 84 80 	mvu r2,0x8480
 bb4:	78 42 00 1e 	orhi r2,r2,0x1e
 bb8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bbc:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 bc0:	38 02 a9 80 	mvu r2,0xa980
 bc4:	78 42 00 03 	orhi r2,r2,0x3
 bc8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bcc:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 bd0:	34 02 00 01 	mvi r2,1
 bd4:	58 22 00 10 	sw (r1+16),r2
}
 bd8:	c3 a0 00 00 	ret

00000bdc <_ZN9clase_pwm4TakeEiii>:
pwm -> addr = vaddr;
 bdc:	78 05 00 00 	mvhi r5,0x0
 be0:	38 a5 0e 38 	ori r5,r5,0xe38
 be4:	28 a1 00 00 	lw r1,(r5+0)
 be8:	28 21 00 00 	lw r1,(r1+0)
 bec:	58 22 00 08 	sw (r1+8),r2
pwm -> d_in = vd_in;
 bf0:	38 02 84 80 	mvu r2,0x8480
 bf4:	78 42 00 1e 	orhi r2,r2,0x1e
 bf8:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 bfc:	58 23 00 08 	sw (r1+8),r3
pwm -> d_in = vd_in;
 c00:	38 02 86 a0 	mvu r2,0x86a0
 c04:	78 42 00 01 	orhi r2,r2,0x1
 c08:	58 22 00 10 	sw (r1+16),r2
pwm -> addr = vaddr;
 c0c:	58 24 00 08 	sw (r1+8),r4
pwm -> d_in = vd_in;
 c10:	34 02 00 01 	mvi r2,1
 c14:	58 22 00 10 	sw (r1+16),r2
}
 c18:	c3 a0 00 00 	ret

00000c1c <_ZN9clase_pwm8pwm_readEv>:
	return pwm -> d_out;
 c1c:	78 02 00 00 	mvhi r2,0x0
 c20:	38 42 0e 3c 	ori r2,r2,0xe3c
 c24:	28 41 00 00 	lw r1,(r2+0)
 c28:	28 21 00 00 	lw r1,(r1+0)
 c2c:	28 21 00 00 	lw r1,(r1+0)
}
 c30:	c3 a0 00 00 	ret

00000c34 <_ZN9clase_pwm6pwm_rdEh>:
pwm -> rd = vrd;
 c34:	78 03 00 00 	mvhi r3,0x0
 c38:	38 63 0e 40 	ori r3,r3,0xe40
 c3c:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_rd(uint8_t vrd){
 c40:	20 42 00 ff 	andi r2,r2,0xff
pwm -> rd = vrd;
 c44:	28 21 00 00 	lw r1,(r1+0)
 c48:	30 22 00 04 	sb (r1+4),r2
}
 c4c:	c3 a0 00 00 	ret

00000c50 <_ZN9clase_pwm8pwm_addrEj>:
pwm -> addr = vaddr;
 c50:	78 03 00 00 	mvhi r3,0x0
 c54:	38 63 0e 44 	ori r3,r3,0xe44
 c58:	28 61 00 00 	lw r1,(r3+0)
 c5c:	28 21 00 00 	lw r1,(r1+0)
 c60:	58 22 00 08 	sw (r1+8),r2
}
 c64:	c3 a0 00 00 	ret

00000c68 <_ZN9clase_pwm6pwm_wrEh>:
pwm -> wr = vwr;
 c68:	78 03 00 00 	mvhi r3,0x0
 c6c:	38 63 0e 48 	ori r3,r3,0xe48
 c70:	28 61 00 00 	lw r1,(r3+0)
void clase_pwm:: pwm_wr(uint8_t vwr){
 c74:	20 42 00 ff 	andi r2,r2,0xff
pwm -> wr = vwr;
 c78:	28 21 00 00 	lw r1,(r1+0)
 c7c:	30 22 00 0c 	sb (r1+12),r2
}
 c80:	c3 a0 00 00 	ret

00000c84 <_ZN9clase_pwm7pwm_dinEj>:
pwm -> d_in = vd_in;
 c84:	78 03 00 00 	mvhi r3,0x0
 c88:	38 63 0e 4c 	ori r3,r3,0xe4c
 c8c:	28 61 00 00 	lw r1,(r3+0)
 c90:	28 21 00 00 	lw r1,(r1+0)
 c94:	58 22 00 10 	sw (r1+16),r2
}
 c98:	c3 a0 00 00 	ret

00000c9c <_ZN11clase_timer6nsleepEi>:
void clase_timer::nsleep(int nsec)
{
	int tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 c9c:	78 03 00 00 	mvhi r3,0x0
 ca0:	38 63 0e 50 	ori r3,r3,0xe50
 ca4:	28 61 00 00 	lw r1,(r3+0)
 ca8:	08 42 00 64 	muli r2,r2,100
 cac:	28 23 00 00 	lw r3,(r1+0)
	timer0->counter1 = 0;
	timer0->tcr1 = TIMER_EN;
 cb0:	34 01 00 08 	mvi r1,8
	timer0->compare1 = (FCPU/1000000)*nsec;
 cb4:	58 62 00 10 	sw (r3+16),r2
	timer0->counter1 = 0;
 cb8:	58 60 00 14 	sw (r3+20),r0
	timer0->tcr1 = TIMER_EN;
 cbc:	58 61 00 0c 	sw (r3+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 cc0:	28 61 00 0c 	lw r1,(r3+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 cc4:	20 21 00 01 	andi r1,r1,0x1
 cc8:	44 20 ff fe 	be r1,r0,cc0 <_ZN11clase_timer6nsleepEi+0x24>
};
 ccc:	c3 a0 00 00 	ret

00000cd0 <_ZN10clase_uart9uart_initEv>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 cd0:	c3 a0 00 00 	ret

00000cd4 <_ZN10clase_uart11uart_getintEv>:

int clase_uart::uart_getint()
{
    while   (!(uart0->ucr & UART_DR));
 cd4:	78 02 00 00 	mvhi r2,0x0
 cd8:	38 42 0e 54 	ori r2,r2,0xe54
 cdc:	28 41 00 00 	lw r1,(r2+0)
 ce0:	28 22 00 00 	lw r2,(r1+0)
 ce4:	28 41 00 00 	lw r1,(r2+0)
 ce8:	20 21 00 01 	andi r1,r1,0x1
 cec:	44 20 ff fe 	be r1,r0,ce4 <_ZN10clase_uart11uart_getintEv+0x10>
    return uart0->rxtx;
 cf0:	28 41 00 04 	lw r1,(r2+4)
    }
 cf4:	c3 a0 00 00 	ret

00000cf8 <_ZN10clase_uart12uart_getcharEv>:
char clase_uart::uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 cf8:	78 02 00 00 	mvhi r2,0x0
 cfc:	38 42 0e 58 	ori r2,r2,0xe58
 d00:	28 41 00 00 	lw r1,(r2+0)
 d04:	28 22 00 00 	lw r2,(r1+0)
 d08:	28 41 00 00 	lw r1,(r2+0)
 d0c:	20 21 00 01 	andi r1,r1,0x1
 d10:	44 20 ff fe 	be r1,r0,d08 <_ZN10clase_uart12uart_getcharEv+0x10>
	return uart0->rxtx;
 d14:	28 41 00 04 	lw r1,(r2+4)
}
 d18:	20 21 00 ff 	andi r1,r1,0xff
 d1c:	c3 a0 00 00 	ret

00000d20 <_ZN10clase_uart12uart_putcharEc>:

void clase_uart::uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 d20:	78 03 00 00 	mvhi r3,0x0
 d24:	38 63 0e 5c 	ori r3,r3,0xe5c
 d28:	28 61 00 00 	lw r1,(r3+0)
{
 d2c:	20 42 00 ff 	andi r2,r2,0xff
	while (uart0->ucr & UART_BUSY) ;
 d30:	28 23 00 00 	lw r3,(r1+0)
 d34:	28 61 00 00 	lw r1,(r3+0)
 d38:	20 21 00 10 	andi r1,r1,0x10
 d3c:	5c 20 ff fe 	bne r1,r0,d34 <_ZN10clase_uart12uart_putcharEc+0x14>
	uart0->rxtx = c;
 d40:	58 62 00 04 	sw (r3+4),r2
}
 d44:	c3 a0 00 00 	ret

00000d48 <_ZN10clase_uart11uart_putstrEPc>:

void clase_uart::uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 d48:	40 44 00 00 	lbu r4,(r2+0)
 d4c:	44 80 00 0c 	be r4,r0,d7c <_ZN10clase_uart11uart_putstrEPc+0x34>
	while (uart0->ucr & UART_BUSY) ;
 d50:	78 03 00 00 	mvhi r3,0x0
 d54:	38 63 0e 60 	ori r3,r3,0xe60
 d58:	28 61 00 00 	lw r1,(r3+0)
 d5c:	28 23 00 00 	lw r3,(r1+0)
 d60:	28 61 00 00 	lw r1,(r3+0)
 d64:	20 21 00 10 	andi r1,r1,0x10
 d68:	5c 20 ff fe 	bne r1,r0,d60 <_ZN10clase_uart11uart_putstrEPc+0x18>
	uart0->rxtx = c;
 d6c:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 d70:	34 42 00 01 	addi r2,r2,1
	while(*c) {
 d74:	40 44 00 00 	lbu r4,(r2+0)
 d78:	5c 80 ff fa 	bne r4,r0,d60 <_ZN10clase_uart11uart_putstrEPc+0x18>
	}
}
 d7c:	c3 a0 00 00 	ret

00000d80 <_ZN6camara10camCaptureEi>:
#include "camara.h"
#include "soc-hw.h"

void camara:: camCapture(int vcapture){
    cam -> capture = vcapture;
 d80:	78 03 00 00 	mvhi r3,0x0
 d84:	38 63 0e 64 	ori r3,r3,0xe64
 d88:	28 61 00 00 	lw r1,(r3+0)
 d8c:	28 21 00 00 	lw r1,(r1+0)
 d90:	58 22 00 08 	sw (r1+8),r2
}
 d94:	c3 a0 00 00 	ret

00000d98 <_ZN6camara7camReadEi>:

void camara::camRead (int vrd){
    cam -> rd1 = vrd;
 d98:	78 03 00 00 	mvhi r3,0x0
 d9c:	38 63 0e 68 	ori r3,r3,0xe68
 da0:	28 61 00 00 	lw r1,(r3+0)
 da4:	28 21 00 00 	lw r1,(r1+0)
 da8:	58 22 00 04 	sw (r1+4),r2
}
 dac:	c3 a0 00 00 	ret

00000db0 <_ZN6camara7camDataEv>:

char camara::camData(){	
	return cam -> data_out;
 db0:	78 02 00 00 	mvhi r2,0x0
 db4:	38 42 0e 6c 	ori r2,r2,0xe6c
 db8:	28 41 00 00 	lw r1,(r2+0)
 dbc:	28 21 00 00 	lw r1,(r1+0)
 dc0:	28 21 00 00 	lw r1,(r1+0)
}
 dc4:	20 21 00 ff 	andi r1,r1,0xff
 dc8:	c3 a0 00 00 	ret
